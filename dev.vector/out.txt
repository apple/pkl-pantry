–– Pkl Error ––
No member of union type matched value 'new Resource { uri = "file:///Users/thomas/src/github.com/vectordotdev/vector/schema.json"; text = "{\n  \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n  \"description\": \"A complete Vector configuration.\",\n  \"allOf\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"api\": {\n          \"description\": \"API options.\",\n          \"default\": {\n            \"enabled\": false,\n            \"address\": \"127.0.0.1:8686\",\n            \"playground\": true\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"address\": {\n              \"description\": \"The socket address to listen on for the API endpoint.\",\n              \"default\": \"127.0.0.1:8686\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"description\": \"An internet socket address, either IPv4 or IPv6.\",\n                  \"type\": \"string\"\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Address\"\n              }\n            },\n            \"enabled\": {\n              \"description\": \"Whether or not the API endpoint is available.\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Enabled\"\n              }\n            },\n            \"graphql\": {\n              \"description\": \"Whether or not the GraphQL endpoint is enabled\",\n              \"default\": true,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Graphql\"\n              }\n            },\n            \"playground\": {\n              \"description\": \"Whether or not to expose the GraphQL playground on the API endpoint.\",\n              \"default\": true,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Playground\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"API\"\n          }\n        },\n        \"enrichment_tables\": {\n          \"description\": \"All configured enrichment tables.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"description\": \"Fully resolved enrichment table component.\",\n            \"allOf\": [\n              {\n                \"description\": \"Configurable enrichment tables.\",\n                \"oneOf\": [\n                  {\n                    \"description\": \"Exposes data from a static file as an enrichment table.\",\n                    \"allOf\": [\n                      {\n                        \"description\": \"Configuration for the `file` enrichment table.\",\n                        \"$ref\": \"#/definitions/vector::enrichment_tables::file::FileConfig\"\n                      },\n                      {\n                        \"type\": \"object\",\n                        \"required\": [\n                          \"type\"\n                        ],\n                        \"properties\": {\n                          \"type\": {\n                            \"description\": \"Exposes data from a static file as an enrichment table.\",\n                            \"const\": \"file\",\n                            \"_metadata\": {\n                              \"docs::human_name\": \"Type\"\n                            }\n                          }\n                        }\n                      }\n                    ],\n                    \"_metadata\": {\n                      \"logical_name\": \"File\",\n                      \"docs::human_name\": \"File\"\n                    }\n                  },\n                  {\n                    \"title\": \"Exposes data from a [MaxMind][maxmind] [GeoIP2][geoip2] database as an enrichment table.\",\n                    \"description\": \"[maxmind]: https://www.maxmind.com/\\n[geoip2]: https://www.maxmind.com/en/geoip2-databases\",\n                    \"allOf\": [\n                      {\n                        \"description\": \"Configuration for the `geoip` enrichment table.\",\n                        \"$ref\": \"#/definitions/vector::enrichment_tables::geoip::GeoipConfig\"\n                      },\n                      {\n                        \"type\": \"object\",\n                        \"required\": [\n                          \"type\"\n                        ],\n                        \"properties\": {\n                          \"type\": {\n                            \"title\": \"Exposes data from a [MaxMind][maxmind] [GeoIP2][geoip2] database as an enrichment table.\",\n                            \"description\": \"[maxmind]: https://www.maxmind.com/\\n[geoip2]: https://www.maxmind.com/en/geoip2-databases\",\n                            \"const\": \"geoip\",\n                            \"_metadata\": {\n                              \"docs::human_name\": \"Type\"\n                            }\n                          }\n                        }\n                      }\n                    ],\n                    \"_metadata\": {\n                      \"logical_name\": \"Geoip\",\n                      \"docs::human_name\": \"GeoIP\"\n                    }\n                  },\n                  {\n                    \"title\": \"Exposes data from a [MaxMind][maxmind] database as an enrichment table.\",\n                    \"description\": \"[maxmind]: https://www.maxmind.com/\",\n                    \"allOf\": [\n                      {\n                        \"description\": \"Configuration for the `mmdb` enrichment table.\",\n                        \"$ref\": \"#/definitions/vector::enrichment_tables::mmdb::MmdbConfig\"\n                      },\n                      {\n                        \"type\": \"object\",\n                        \"required\": [\n                          \"type\"\n                        ],\n                        \"properties\": {\n                          \"type\": {\n                            \"title\": \"Exposes data from a [MaxMind][maxmind] database as an enrichment table.\",\n                            \"description\": \"[maxmind]: https://www.maxmind.com/\",\n                            \"const\": \"mmdb\",\n                            \"_metadata\": {\n                              \"docs::human_name\": \"Type\"\n                            }\n                          }\n                        }\n                      }\n                    ],\n                    \"_metadata\": {\n                      \"logical_name\": \"Mmdb\",\n                      \"docs::human_name\": \"Mmdb\"\n                    }\n                  }\n                ],\n                \"_metadata\": {\n                  \"docs::enum_tagging\": \"internal\",\n                  \"docs::enum_tag_field\": \"type\"\n                }\n              }\n            ],\n            \"unevaluatedProperties\": false\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Enrichment Tables\"\n          }\n        },\n        \"healthchecks\": {\n          \"description\": \"Healthcheck options.\",\n          \"default\": {\n            \"enabled\": true,\n            \"require_healthy\": false\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"enabled\": {\n              \"title\": \"Whether or not healthchecks are enabled for all sinks.\",\n              \"description\": \"Can be overridden on a per-sink basis.\",\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Enabled\"\n              }\n            },\n            \"require_healthy\": {\n              \"title\": \"Whether or not to require a sink to report as being healthy during startup.\",\n              \"description\": \"When enabled and a sink reports not being healthy, Vector will exit during start-up.\\n\\nCan be alternatively set, and overridden by, the `--require-healthy` command-line flag.\",\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Require Healthy\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Healthchecks\"\n          }\n        },\n        \"provider\": {\n          \"title\": \"Optional configuration provider to use.\",\n          \"description\": \"Configuration providers allow sourcing configuration information from a source other than\\nthe typical configuration files that must be passed to Vector.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Configurable providers in Vector.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"HTTP.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Configuration for the `http` provider.\",\n                      \"$ref\": \"#/definitions/vector::providers::http::HttpConfig\"\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"type\"\n                      ],\n                      \"properties\": {\n                        \"type\": {\n                          \"description\": \"HTTP.\",\n                          \"const\": \"http\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Type\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Http\",\n                    \"docs::human_name\": \"HTTP\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"internal\",\n                \"docs::enum_tag_field\": \"type\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Provider\"\n          }\n        },\n        \"schema\": {\n          \"description\": \"Schema options.\",\n          \"default\": {\n            \"enabled\": false,\n            \"validation\": false,\n            \"log_namespace\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"enabled\": {\n              \"description\": \"Whether or not schema is enabled.\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Enabled\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"Whether or not to enable log namespacing.\",\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            },\n            \"validation\": {\n              \"description\": \"Whether or not schema validation is enabled.\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Validation\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Schema\"\n          }\n        },\n        \"secret\": {\n          \"description\": \"All configured secrets backends.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"description\": \"Configurable secret backends in Vector.\",\n            \"oneOf\": [\n              {\n                \"description\": \"Exec.\",\n                \"allOf\": [\n                  {\n                    \"description\": \"Configuration for the `exec` secrets backend.\",\n                    \"$ref\": \"#/definitions/vector::secrets::exec::ExecBackend\"\n                  },\n                  {\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"type\"\n                    ],\n                    \"properties\": {\n                      \"type\": {\n                        \"description\": \"Exec.\",\n                        \"const\": \"exec\",\n                        \"_metadata\": {\n                          \"docs::human_name\": \"Type\"\n                        }\n                      }\n                    }\n                  }\n                ],\n                \"_metadata\": {\n                  \"logical_name\": \"Exec\",\n                  \"docs::human_name\": \"Exec\"\n                }\n              },\n              {\n                \"description\": \"AWS Secrets Manager.\",\n                \"allOf\": [\n                  {\n                    \"description\": \"Configuration for the `aws_secrets_manager` secrets backend.\",\n                    \"$ref\": \"#/definitions/vector::secrets::aws_secrets_manager::AwsSecretsManagerBackend\"\n                  },\n                  {\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"type\"\n                    ],\n                    \"properties\": {\n                      \"type\": {\n                        \"description\": \"AWS Secrets Manager.\",\n                        \"const\": \"aws_secrets_manager\",\n                        \"_metadata\": {\n                          \"docs::human_name\": \"Type\"\n                        }\n                      }\n                    }\n                  }\n                ],\n                \"_metadata\": {\n                  \"logical_name\": \"AwsSecretsManager\",\n                  \"docs::human_name\": \"AWS Secrets Manager\"\n                }\n              },\n              {\n                \"description\": \"Test.\",\n                \"allOf\": [\n                  {\n                    \"description\": \"Configuration for the `test` secrets backend.\",\n                    \"$ref\": \"#/definitions/vector::secrets::test::TestBackend\"\n                  },\n                  {\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"type\"\n                    ],\n                    \"properties\": {\n                      \"type\": {\n                        \"description\": \"Test.\",\n                        \"const\": \"test\",\n                        \"_metadata\": {\n                          \"docs::human_name\": \"Type\"\n                        }\n                      }\n                    }\n                  }\n                ],\n                \"_metadata\": {\n                  \"docs::hidden\": true,\n                  \"logical_name\": \"Test\",\n                  \"docs::human_name\": \"Test\"\n                }\n              }\n            ],\n            \"unevaluatedProperties\": false,\n            \"_metadata\": {\n              \"docs::enum_tagging\": \"internal\",\n              \"docs::enum_tag_field\": \"type\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Secret\"\n          }\n        },\n        \"sinks\": {\n          \"description\": \"All configured sinks.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/vector::config::sink::SinkOuter<alloc::string::String>\"\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Sinks\"\n          }\n        },\n        \"sources\": {\n          \"description\": \"All configured sources.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/vector::config::source::SourceOuter\"\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Sources\"\n          }\n        },\n        \"tests\": {\n          \"description\": \"All configured unit tests.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"A unit test definition.\",\n            \"type\": \"object\",\n            \"required\": [\n              \"name\"\n            ],\n            \"properties\": {\n              \"input\": {\n                \"title\": \"A unit test input.\",\n                \"description\": \"An input event to test against.\",\n                \"oneOf\": [\n                  {\n                    \"type\": \"null\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/vector::config::TestInput\"\n                  }\n                ],\n                \"unevaluatedProperties\": false,\n                \"_metadata\": {\n                  \"docs::optional\": true,\n                  \"docs::human_name\": \"Input\"\n                }\n              },\n              \"inputs\": {\n                \"title\": \"A unit test input.\",\n                \"description\": \"A set of input events to test against.\",\n                \"default\": [],\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/definitions/vector::config::TestInput\"\n                },\n                \"_metadata\": {\n                  \"docs::human_name\": \"Inputs\"\n                }\n              },\n              \"name\": {\n                \"description\": \"The name of the unit test.\",\n                \"type\": \"string\",\n                \"_metadata\": {\n                  \"docs::human_name\": \"Name\"\n                }\n              },\n              \"no_outputs_from\": {\n                \"description\": \"A set of component outputs that should not have emitted any events.\",\n                \"default\": [],\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"_metadata\": {\n                  \"docs::human_name\": \"No Outputs From\"\n                }\n              },\n              \"outputs\": {\n                \"title\": \"A unit test output.\",\n                \"description\": \"A set of expected output events after the test has run.\",\n                \"default\": [],\n                \"type\": \"array\",\n                \"items\": {\n                  \"title\": \"A unit test output.\",\n                  \"description\": \"An output describes what we expect a transform to emit when fed a certain event, or events, when\\nrunning a unit test.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"extract_from\"\n                  ],\n                  \"properties\": {\n                    \"conditions\": {\n                      \"description\": \"The conditions to run against the output to validate that they were transformed as expected.\",\n                      \"type\": [\n                        \"array\",\n                        \"null\"\n                      ],\n                      \"items\": {\n                        \"$ref\": \"#/definitions/vector::conditions::AnyCondition\"\n                      },\n                      \"_metadata\": {\n                        \"docs::type_override\": \"condition\",\n                        \"docs::enum_tagging\": \"untagged\",\n                        \"docs::optional\": true,\n                        \"docs::human_name\": \"Conditions\"\n                      }\n                    },\n                    \"extract_from\": {\n                      \"description\": \"The transform outputs to extract events from.\",\n                      \"oneOf\": [\n                        {\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"logical_name\": \"One\",\n                            \"docs::human_name\": \"One\"\n                          }\n                        },\n                        {\n                          \"type\": \"array\",\n                          \"items\": {\n                            \"type\": \"string\"\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Many\",\n                            \"docs::human_name\": \"Many\"\n                          }\n                        }\n                      ],\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::enum_tagging\": \"untagged\",\n                        \"docs::human_name\": \"Extract From\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false\n                },\n                \"_metadata\": {\n                  \"docs::human_name\": \"Outputs\"\n                }\n              }\n            },\n            \"unevaluatedProperties\": false\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Tests\"\n          }\n        },\n        \"transforms\": {\n          \"description\": \"All configured transforms.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/vector::config::transform::TransformOuter<alloc::string::String>\"\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Transforms\"\n          }\n        }\n      }\n    },\n    {\n      \"description\": \"Global configuration options.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for all sinks by default.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how Vector handles event\\nacknowledgement.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"data_dir\": {\n          \"title\": \"The directory used for persisting Vector state data.\",\n          \"description\": \"This is the directory where Vector will store any state data, such as disk buffers, file\\ncheckpoints, and more.\\n\\nVector must have write permissions to this directory.\",\n          \"default\": \"/var/lib/vector/\",\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Data Directory\"\n          }\n        },\n        \"expire_metrics\": {\n          \"title\": \"The amount of time, in seconds, that internal metrics will persist after having not been\\nupdated before they expire and are removed.\",\n          \"description\": \"Not set by default, which allows all internal metrics to grow unbounded over time. If you\\nhave a configuration that emits many high-cardinality metrics, you may want to consider\\nsetting this to a value that ensures that metrics live long enough to be emitted and\\ncaptured, but not so long that they continue to build up indefinitely, as this will consume\\na small amount of memory for each metric.\",\n          \"default\": null,\n          \"deprecated\": true,\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"An duration of time.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"nsecs\",\n                \"secs\"\n              ],\n              \"properties\": {\n                \"nsecs\": {\n                  \"type\": \"integer\",\n                  \"maximum\": 4294967295.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Nsecs\"\n                  }\n                },\n                \"secs\": {\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Secs\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Expire Metrics\"\n          }\n        },\n        \"expire_metrics_secs\": {\n          \"title\": \"The amount of time, in seconds, that internal metrics will persist after having not been\\nupdated before they expire and are removed.\",\n          \"description\": \"Not set by default, which allows all internal metrics to grow unbounded over time. If you\\nhave a configuration that emits many high-cardinality metrics, you may want to consider\\nsetting this to a value that ensures that metrics live long enough to be emitted and\\ncaptured, but not so long that they continue to build up indefinitely, as this will consume\\na small amount of memory for each metric.\",\n          \"default\": null,\n          \"type\": [\n            \"number\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": -9007199254740991.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Expire Metrics Secs\"\n          }\n        },\n        \"log_schema\": {\n          \"title\": \"Default log schema for all events.\",\n          \"description\": \"This is used if a component does not have its own specific log schema. All events use a log\\nschema, whether or not the default is used, to assign event fields on incoming events.\",\n          \"default\": {\n            \"message_key\": \".message\",\n            \"timestamp_key\": \".timestamp\",\n            \"host_key\": \".host\",\n            \"source_type_key\": \".source_type\",\n            \"metadata_key\": \".metadata\"\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"host_key\": {\n              \"title\": \"The name of the event field to treat as the host which sent the message.\",\n              \"description\": \"This field will generally represent a real host, or container, that generated the message,\\nbut is somewhat source-dependent.\",\n              \"default\": \".host\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Host Key\"\n              }\n            },\n            \"message_key\": {\n              \"title\": \"The name of the event field to treat as the event message.\",\n              \"description\": \"This would be the field that holds the raw message, such as a raw log line.\",\n              \"default\": \".message\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Message Key\"\n              }\n            },\n            \"metadata_key\": {\n              \"title\": \"The name of the event field to set the event metadata in.\",\n              \"description\": \"Generally, this field will be set by Vector to hold event-specific metadata, such as\\nannotations by the `remap` transform when an error or abort is encountered.\",\n              \"default\": \".metadata\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Metadata Key\"\n              }\n            },\n            \"source_type_key\": {\n              \"title\": \"The name of the event field to set the source identifier in.\",\n              \"description\": \"This field will be set by the Vector source that the event was created in.\",\n              \"default\": \".source_type\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Source Type Key\"\n              }\n            },\n            \"timestamp_key\": {\n              \"description\": \"The name of the event field to treat as the event timestamp.\",\n              \"default\": \".timestamp\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Timestamp Key\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Log Schema\"\n          }\n        },\n        \"proxy\": {\n          \"title\": \"Proxy configuration.\",\n          \"description\": \"Configure to proxy traffic through an HTTP(S) proxy when making external requests.\\n\\nSimilar to common proxy configuration convention, you can set different proxies\\nto use based on the type of traffic being proxied, as well as set specific hosts that\\nshould not be proxied.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector_core::config::proxy::ProxyConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Proxy\"\n          }\n        },\n        \"telemetry\": {\n          \"title\": \"Telemetry options.\",\n          \"description\": \"Determines whether `source` and `service` tags should be emitted with the\\n`component_sent_*` and `component_received_*` events.\",\n          \"default\": {\n            \"tags\": {\n              \"emit_service\": false,\n              \"emit_source\": false\n            }\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"tags\": {\n              \"description\": \"Configures whether to emit certain tags\",\n              \"default\": {\n                \"emit_service\": false,\n                \"emit_source\": false\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"emit_service\": {\n                  \"description\": \"True if the `service` tag should be emitted\\nin the `component_received_*` and `component_sent_*`\\ntelemetry.\",\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Emit Service\"\n                  }\n                },\n                \"emit_source\": {\n                  \"description\": \"True if the `source` tag should be emitted\\nin the `component_received_*` and `component_sent_*`\\ntelemetry.\",\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Emit Source\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"Tags\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Telemetry\"\n          }\n        },\n        \"timezone\": {\n          \"title\": \"The name of the time zone to apply to timestamp conversions that do not contain an explicit time zone.\",\n          \"description\": \"The time zone name may be any name in the [TZ database][tzdb] or `local` to indicate system\\nlocal time.\\n\\n[tzdb]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Timezone\"\n          }\n        }\n      }\n    }\n  ],\n  \"unevaluatedProperties\": false,\n  \"definitions\": {\n    \"codecs::MetricTagValues\": {\n      \"description\": \"The user configuration to choose the metric tag strategy.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Tag values are exposed as single strings, the same as they were before this config\\noption. Tags with multiple values show the last assigned value, and null values\\nare ignored.\",\n          \"const\": \"single\",\n          \"_metadata\": {\n            \"logical_name\": \"Single\",\n            \"docs::human_name\": \"Single\"\n          }\n        },\n        {\n          \"description\": \"All tags are exposed as arrays of either string or null values.\",\n          \"const\": \"full\",\n          \"_metadata\": {\n            \"logical_name\": \"Full\",\n            \"docs::human_name\": \"Full\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"external\"\n      }\n    },\n    \"codecs::common::length_delimited::LengthDelimitedCoderOptions\": {\n      \"description\": \"Options for building a `LengthDelimitedDecoder` or `LengthDelimitedEncoder`.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"length_field_is_big_endian\": {\n          \"description\": \"Length field byte order (little or big endian)\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Length Field Is Big Endian\"\n          }\n        },\n        \"length_field_length\": {\n          \"description\": \"Number of bytes representing the field length\",\n          \"default\": 4,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Length Field Length\"\n          }\n        },\n        \"length_field_offset\": {\n          \"description\": \"Number of bytes in the header before the length field\",\n          \"default\": 0,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Length Field Offset\"\n          }\n        },\n        \"max_frame_length\": {\n          \"description\": \"Maximum frame length\",\n          \"default\": 8388608,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Max Frame Length\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"codecs::decoding::DeserializerConfig\": {\n      \"description\": \"Configures how events are decoded from raw bytes.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Uses the raw bytes as-is.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"codec\"\n          ],\n          \"properties\": {\n            \"codec\": {\n              \"description\": \"Uses the raw bytes as-is.\",\n              \"const\": \"bytes\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Codec\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"logical_name\": \"Bytes\",\n            \"docs::human_name\": \"Bytes\"\n          }\n        },\n        {\n          \"title\": \"Decodes the raw bytes as [JSON][json].\",\n          \"description\": \"[json]: https://www.json.org/\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `JsonDeserializer`.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"json\": {\n                  \"description\": \"JSON-specific decoding options.\",\n                  \"default\": {\n                    \"lossy\": true\n                  },\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"lossy\": {\n                      \"title\": \"Determines whether or not to replace invalid UTF-8 sequences instead of failing.\",\n                      \"description\": \"When true, invalid UTF-8 sequences are replaced with the [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\\n\\n[U+FFFD]: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\",\n                      \"default\": true,\n                      \"type\": \"boolean\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Lossy\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"JSON\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Decodes the raw bytes as [JSON][json].\",\n                  \"description\": \"[json]: https://www.json.org/\",\n                  \"const\": \"json\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Json\",\n            \"docs::human_name\": \"JSON\"\n          }\n        },\n        {\n          \"title\": \"Decodes the raw bytes as [protobuf][protobuf].\",\n          \"description\": \"[protobuf]: https://protobuf.dev/\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `ProtobufDeserializer`.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"protobuf\": {\n                  \"description\": \"Protobuf-specific decoding options.\",\n                  \"default\": {\n                    \"desc_file\": \"\",\n                    \"message_type\": \"\"\n                  },\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"desc_file\",\n                    \"message_type\"\n                  ],\n                  \"properties\": {\n                    \"desc_file\": {\n                      \"description\": \"Path to desc file\",\n                      \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Desc File\"\n                      }\n                    },\n                    \"message_type\": {\n                      \"description\": \"message type. e.g package.message\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Message Type\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Protobuf\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Decodes the raw bytes as [protobuf][protobuf].\",\n                  \"description\": \"[protobuf]: https://protobuf.dev/\",\n                  \"const\": \"protobuf\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Protobuf\",\n            \"docs::human_name\": \"Protobuf\"\n          }\n        },\n        {\n          \"title\": \"Decodes the raw bytes as a Syslog message.\",\n          \"description\": \"Decodes either as the [RFC 3164][rfc3164]-style format (\\\"old\\\" style) or the\\n[RFC 5424][rfc5424]-style format (\\\"new\\\" style, includes structured data).\\n\\n[rfc3164]: https://www.ietf.org/rfc/rfc3164.txt\\n[rfc5424]: https://www.ietf.org/rfc/rfc5424.txt\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `SyslogDeserializer`.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"syslog\": {\n                  \"description\": \"Syslog-specific decoding options.\",\n                  \"default\": {\n                    \"lossy\": true\n                  },\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"lossy\": {\n                      \"title\": \"Determines whether or not to replace invalid UTF-8 sequences instead of failing.\",\n                      \"description\": \"When true, invalid UTF-8 sequences are replaced with the [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\\n\\n[U+FFFD]: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\",\n                      \"default\": true,\n                      \"type\": \"boolean\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Lossy\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Syslog\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Decodes the raw bytes as a Syslog message.\",\n                  \"description\": \"Decodes either as the [RFC 3164][rfc3164]-style format (\\\"old\\\" style) or the\\n[RFC 5424][rfc5424]-style format (\\\"new\\\" style, includes structured data).\\n\\n[rfc3164]: https://www.ietf.org/rfc/rfc3164.txt\\n[rfc5424]: https://www.ietf.org/rfc/rfc5424.txt\",\n                  \"const\": \"syslog\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Syslog\",\n            \"docs::human_name\": \"Syslog\"\n          }\n        },\n        {\n          \"title\": \"Decodes the raw bytes as [native Protocol Buffers format][vector_native_protobuf].\",\n          \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_protobuf]: https://github.com/vectordotdev/vector/blob/master/lib/vector-core/proto/event.proto\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n          \"type\": \"object\",\n          \"required\": [\n            \"codec\"\n          ],\n          \"properties\": {\n            \"codec\": {\n              \"title\": \"Decodes the raw bytes as [native Protocol Buffers format][vector_native_protobuf].\",\n              \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_protobuf]: https://github.com/vectordotdev/vector/blob/master/lib/vector-core/proto/event.proto\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n              \"const\": \"native\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Codec\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"logical_name\": \"Native\",\n            \"docs::human_name\": \"Native\"\n          }\n        },\n        {\n          \"title\": \"Decodes the raw bytes as [native JSON format][vector_native_json].\",\n          \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_json]: https://github.com/vectordotdev/vector/blob/master/lib/codecs/tests/data/native_encoding/schema.cue\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `NativeJsonDeserializer`.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"native_json\": {\n                  \"description\": \"Vector's native JSON-specific decoding options.\",\n                  \"default\": {\n                    \"lossy\": true\n                  },\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"lossy\": {\n                      \"title\": \"Determines whether or not to replace invalid UTF-8 sequences instead of failing.\",\n                      \"description\": \"When true, invalid UTF-8 sequences are replaced with the [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\\n\\n[U+FFFD]: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\",\n                      \"default\": true,\n                      \"type\": \"boolean\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Lossy\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Native JSON\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Decodes the raw bytes as [native JSON format][vector_native_json].\",\n                  \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_json]: https://github.com/vectordotdev/vector/blob/master/lib/codecs/tests/data/native_encoding/schema.cue\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n                  \"const\": \"native_json\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"NativeJson\",\n            \"docs::human_name\": \"Native JSON\"\n          }\n        },\n        {\n          \"title\": \"Decodes the raw bytes as a [GELF][gelf] message.\",\n          \"description\": \"This codec is experimental for the following reason:\\n\\nThe GELF specification is more strict than the actual Graylog receiver.\\nVector's decoder currently adheres more strictly to the GELF spec, with\\nthe exception that some characters such as `@`  are allowed in field names.\\n\\nOther GELF codecs such as Loki's, use a [Go SDK][implementation] that is maintained\\nby Graylog, and is much more relaxed than the GELF spec.\\n\\nGoing forward, Vector will use that [Go SDK][implementation] as the reference implementation, which means\\nthe codec may continue to relax the enforcement of specification.\\n\\n[gelf]: https://docs.graylog.org/docs/gelf\\n[implementation]: https://github.com/Graylog2/go-gelf/blob/v2/gelf/reader.go\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `GelfDeserializer`.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"gelf\": {\n                  \"description\": \"GELF-specific decoding options.\",\n                  \"default\": {\n                    \"lossy\": true\n                  },\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"lossy\": {\n                      \"title\": \"Determines whether or not to replace invalid UTF-8 sequences instead of failing.\",\n                      \"description\": \"When true, invalid UTF-8 sequences are replaced with the [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\\n\\n[U+FFFD]: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\",\n                      \"default\": true,\n                      \"type\": \"boolean\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Lossy\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"GELF\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Decodes the raw bytes as a [GELF][gelf] message.\",\n                  \"description\": \"This codec is experimental for the following reason:\\n\\nThe GELF specification is more strict than the actual Graylog receiver.\\nVector's decoder currently adheres more strictly to the GELF spec, with\\nthe exception that some characters such as `@`  are allowed in field names.\\n\\nOther GELF codecs such as Loki's, use a [Go SDK][implementation] that is maintained\\nby Graylog, and is much more relaxed than the GELF spec.\\n\\nGoing forward, Vector will use that [Go SDK][implementation] as the reference implementation, which means\\nthe codec may continue to relax the enforcement of specification.\\n\\n[gelf]: https://docs.graylog.org/docs/gelf\\n[implementation]: https://github.com/Graylog2/go-gelf/blob/v2/gelf/reader.go\",\n                  \"const\": \"gelf\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Gelf\",\n            \"docs::human_name\": \"GELF\"\n          }\n        },\n        {\n          \"title\": \"Decodes the raw bytes as as an [Apache Avro][apache_avro] message.\",\n          \"description\": \"[apache_avro]: https://avro.apache.org/\",\n          \"type\": \"object\",\n          \"required\": [\n            \"avro\",\n            \"codec\"\n          ],\n          \"properties\": {\n            \"avro\": {\n              \"description\": \"Apache Avro-specific encoder options.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"schema\",\n                \"strip_schema_id_prefix\"\n              ],\n              \"properties\": {\n                \"schema\": {\n                  \"description\": \"The Avro schema definition.\\nPlease note that the following [`apache_avro::types::Value`] variants are currently *not* supported:\\n* `Date`\\n* `Decimal`\\n* `Duration`\\n* `Fixed`\\n* `TimeMillis`\",\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::examples\": \"{ \\\"type\\\": \\\"record\\\", \\\"name\\\": \\\"log\\\", \\\"fields\\\": [{ \\\"name\\\": \\\"message\\\", \\\"type\\\": \\\"string\\\" }] }\",\n                    \"docs::additional_props_description\": \"Supports most avro data types, unsupported data types includes\\n        [\\\"decimal\\\", \\\"duration\\\", \\\"local-timestamp-millis\\\", \\\"local-timestamp-micros\\\"]\",\n                    \"docs::human_name\": \"Schema\"\n                  }\n                },\n                \"strip_schema_id_prefix\": {\n                  \"description\": \"For Avro datum encoded in Kafka messages, the bytes are prefixed with the schema ID.  Set this to true to strip the schema ID prefix.\\nAccording to [Confluent Kafka's document](https://docs.confluent.io/platform/current/schema-registry/fundamentals/serdes-develop/index.html#wire-format).\",\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strip Schema ID Prefix\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"Avro\"\n              }\n            },\n            \"codec\": {\n              \"title\": \"Decodes the raw bytes as as an [Apache Avro][apache_avro] message.\",\n              \"description\": \"[apache_avro]: https://avro.apache.org/\",\n              \"const\": \"avro\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Codec\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"logical_name\": \"Avro\",\n            \"docs::human_name\": \"Avro\"\n          }\n        },\n        {\n          \"title\": \"Decodes the raw bytes as a string and passes them as input to a [VRL][vrl] program.\",\n          \"description\": \"[vrl]: https://vector.dev/docs/reference/vrl\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `VrlDeserializer`.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"vrl\"\n              ],\n              \"properties\": {\n                \"vrl\": {\n                  \"description\": \"VRL-specific decoding options.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"source\"\n                  ],\n                  \"properties\": {\n                    \"source\": {\n                      \"title\": \"The [Vector Remap Language][vrl] (VRL) program to execute for each event.\\nNote that the final contents of the `.` target will be used as the decoding result.\\nCompilation error or use of 'abort' in a program will result in a decoding error.\",\n                      \"description\": \"[vrl]: https://vector.dev/docs/reference/vrl\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Source\"\n                      }\n                    },\n                    \"timezone\": {\n                      \"title\": \"The name of the timezone to apply to timestamp conversions that do not contain an explicit\\ntime zone. The time zone name may be any name in the [TZ database][tz_database], or `local`\\nto indicate system local time.\",\n                      \"description\": \"If not set, `local` will be used.\\n\\n[tz_database]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\",\n                      \"default\": null,\n                      \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n                      \"_metadata\": {\n                        \"docs::advanced\": true,\n                        \"docs::human_name\": \"Timezone\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"VRL\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Decodes the raw bytes as a string and passes them as input to a [VRL][vrl] program.\",\n                  \"description\": \"[vrl]: https://vector.dev/docs/reference/vrl\",\n                  \"const\": \"vrl\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Vrl\",\n            \"docs::human_name\": \"VRL\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tag_description\": \"The codec to use for decoding events.\",\n        \"docs::enum_tagging\": \"internal\",\n        \"docs::enum_tag_field\": \"codec\"\n      }\n    },\n    \"codecs::decoding::FramingConfig\": {\n      \"title\": \"Framing configuration.\",\n      \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Byte frames are passed through as-is according to the underlying I/O boundaries (for example, split between messages or stream segments).\",\n          \"type\": \"object\",\n          \"required\": [\n            \"method\"\n          ],\n          \"properties\": {\n            \"method\": {\n              \"description\": \"Byte frames are passed through as-is according to the underlying I/O boundaries (for example, split between messages or stream segments).\",\n              \"const\": \"bytes\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Method\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"logical_name\": \"Bytes\",\n            \"docs::human_name\": \"Bytes\"\n          }\n        },\n        {\n          \"description\": \"Byte frames which are delimited by a chosen character.\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `CharacterDelimitedDecoder`.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"character_delimited\"\n              ],\n              \"properties\": {\n                \"character_delimited\": {\n                  \"description\": \"Options for the character delimited decoder.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"delimiter\"\n                  ],\n                  \"properties\": {\n                    \"delimiter\": {\n                      \"description\": \"The character that delimits byte sequences.\",\n                      \"type\": \"integer\",\n                      \"maximum\": 255.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::human_name\": \"Delimiter\"\n                      }\n                    },\n                    \"max_length\": {\n                      \"title\": \"The maximum length of the byte buffer.\",\n                      \"description\": \"This length does *not* include the trailing delimiter.\\n\\nBy default, there is no maximum length enforced. If events are malformed, this can lead to\\nadditional resource usage as events continue to be buffered in memory, and can potentially\\nlead to memory exhaustion in extreme cases.\\n\\nIf there is a risk of processing malformed data, such as logs with user-controlled input,\\nconsider setting the maximum length to a reasonably large value as a safety net. This\\nensures that processing is not actually unbounded.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::human_name\": \"Max Length\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Character Delimited\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"method\"\n              ],\n              \"properties\": {\n                \"method\": {\n                  \"description\": \"Byte frames which are delimited by a chosen character.\",\n                  \"const\": \"character_delimited\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Method\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"CharacterDelimited\",\n            \"docs::human_name\": \"Character Delimited\"\n          }\n        },\n        {\n          \"description\": \"Byte frames which are prefixed by an unsigned big-endian 32-bit integer indicating the length.\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `LengthDelimitedDecoder`.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"length_delimited\"\n              ],\n              \"properties\": {\n                \"length_delimited\": {\n                  \"description\": \"Options for the length delimited decoder.\",\n                  \"$ref\": \"#/definitions/codecs::common::length_delimited::LengthDelimitedCoderOptions\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Length Delimited\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"method\"\n              ],\n              \"properties\": {\n                \"method\": {\n                  \"description\": \"Byte frames which are prefixed by an unsigned big-endian 32-bit integer indicating the length.\",\n                  \"const\": \"length_delimited\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Method\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"LengthDelimited\",\n            \"docs::human_name\": \"Length Delimited\"\n          }\n        },\n        {\n          \"description\": \"Byte frames which are delimited by a newline character.\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `NewlineDelimitedDecoder`.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"newline_delimited\": {\n                  \"description\": \"Options for the newline delimited decoder.\",\n                  \"default\": {},\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"max_length\": {\n                      \"title\": \"The maximum length of the byte buffer.\",\n                      \"description\": \"This length does *not* include the trailing delimiter.\\n\\nBy default, there is no maximum length enforced. If events are malformed, this can lead to\\nadditional resource usage as events continue to be buffered in memory, and can potentially\\nlead to memory exhaustion in extreme cases.\\n\\nIf there is a risk of processing malformed data, such as logs with user-controlled input,\\nconsider setting the maximum length to a reasonably large value as a safety net. This\\nensures that processing is not actually unbounded.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::human_name\": \"Max Length\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Newline Delimited\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"method\"\n              ],\n              \"properties\": {\n                \"method\": {\n                  \"description\": \"Byte frames which are delimited by a newline character.\",\n                  \"const\": \"newline_delimited\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Method\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"NewlineDelimited\",\n            \"docs::human_name\": \"Newline Delimited\"\n          }\n        },\n        {\n          \"title\": \"Byte frames according to the [octet counting][octet_counting] format.\",\n          \"description\": \"[octet_counting]: https://tools.ietf.org/html/rfc6587#section-3.4.1\",\n          \"allOf\": [\n            {\n              \"description\": \"Config used to build a `OctetCountingDecoder`.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"octet_counting\": {\n                  \"description\": \"Options for the octet counting decoder.\",\n                  \"default\": {},\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"max_length\": {\n                      \"description\": \"The maximum length of the byte buffer.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::human_name\": \"Max Length\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Octet Counting\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"method\"\n              ],\n              \"properties\": {\n                \"method\": {\n                  \"title\": \"Byte frames according to the [octet counting][octet_counting] format.\",\n                  \"description\": \"[octet_counting]: https://tools.ietf.org/html/rfc6587#section-3.4.1\",\n                  \"const\": \"octet_counting\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Method\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"OctetCounting\",\n            \"docs::human_name\": \"Octet Counting\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tag_description\": \"The framing method.\",\n        \"docs::enum_tagging\": \"internal\",\n        \"docs::enum_tag_field\": \"method\"\n      }\n    },\n    \"codecs::encoding::format::csv::CsvSerializerConfig\": {\n      \"description\": \"Config used to build a `CsvSerializer`.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"csv\"\n      ],\n      \"properties\": {\n        \"csv\": {\n          \"description\": \"The CSV Serializer Options.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"fields\"\n          ],\n          \"properties\": {\n            \"capacity\": {\n              \"description\": \"Set the capacity (in bytes) of the internal buffer used in the CSV writer.\\nThis defaults to a reasonable setting.\",\n              \"default\": 8192,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Capacity\"\n              }\n            },\n            \"delimiter\": {\n              \"description\": \"The field delimiter to use when writing CSV.\",\n              \"default\": 44,\n              \"type\": \"integer\",\n              \"maximum\": 255.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Delimiter\"\n              }\n            },\n            \"double_quote\": {\n              \"title\": \"Enable double quote escapes.\",\n              \"description\": \"This is enabled by default, but it may be disabled. When disabled, quotes in\\nfield data are escaped instead of doubled.\",\n              \"default\": true,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Double Quote\"\n              }\n            },\n            \"escape\": {\n              \"title\": \"The escape character to use when writing CSV.\",\n              \"description\": \"In some variants of CSV, quotes are escaped using a special escape character\\nlike \\\\ (instead of escaping quotes by doubling them).\\n\\nTo use this, `double_quotes` needs to be disabled as well otherwise it is ignored.\",\n              \"default\": 34,\n              \"type\": \"integer\",\n              \"maximum\": 255.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Escape\"\n              }\n            },\n            \"fields\": {\n              \"title\": \"Configures the fields that will be encoded, as well as the order in which they\\nappear in the output.\",\n              \"description\": \"If a field is not present in the event, the output will be an empty string.\\n\\nValues of type `Array`, `Object`, and `Regex` are not supported and the\\noutput will be an empty string.\",\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigTargetPath\"\n              },\n              \"_metadata\": {\n                \"docs::human_name\": \"Fields\"\n              }\n            },\n            \"quote\": {\n              \"description\": \"The quote character to use when writing CSV.\",\n              \"default\": 34,\n              \"type\": \"integer\",\n              \"maximum\": 255.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Quote\"\n              }\n            },\n            \"quote_style\": {\n              \"description\": \"The quoting style to use when writing CSV data.\",\n              \"default\": \"necessary\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Always puts quotes around every field.\",\n                  \"const\": \"always\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Always\",\n                    \"docs::human_name\": \"Always\"\n                  }\n                },\n                {\n                  \"description\": \"Puts quotes around fields only when necessary.\\nThey are necessary when fields contain a quote, delimiter, or record terminator.\\nQuotes are also necessary when writing an empty record\\n(which is indistinguishable from a record with one empty field).\",\n                  \"const\": \"necessary\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Necessary\",\n                    \"docs::human_name\": \"Necessary\"\n                  }\n                },\n                {\n                  \"description\": \"Puts quotes around all fields that are non-numeric.\\nNamely, when writing a field that does not parse as a valid float or integer,\\nthen quotes are used even if they aren't strictly necessary.\",\n                  \"const\": \"non_numeric\",\n                  \"_metadata\": {\n                    \"logical_name\": \"NonNumeric\",\n                    \"docs::human_name\": \"Non Numeric\"\n                  }\n                },\n                {\n                  \"description\": \"Never writes quotes, even if it produces invalid CSV data.\",\n                  \"const\": \"never\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Never\",\n                    \"docs::human_name\": \"Never\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Quote Style\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"CSV\"\n          }\n        }\n      }\n    },\n    \"codecs::encoding::format::json::JsonSerializerConfig\": {\n      \"description\": \"Config used to build a `JsonSerializer`.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"json\": {\n          \"description\": \"Options for the JsonSerializer.\",\n          \"default\": {\n            \"pretty\": false\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"pretty\": {\n              \"description\": \"Whether to use pretty JSON formatting.\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Pretty\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"JSON\"\n          }\n        },\n        \"metric_tag_values\": {\n          \"title\": \"Controls how metric tag values are encoded.\",\n          \"description\": \"When set to `single`, only the last non-bare value of tags are displayed with the\\nmetric.  When set to `full`, all metric tags are exposed as separate assignments.\",\n          \"default\": \"single\",\n          \"$ref\": \"#/definitions/codecs::MetricTagValues\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Metric Tag Values\"\n          }\n        }\n      }\n    },\n    \"core::option::Option<codecs::decoding::FramingConfig>\": {\n      \"title\": \"Framing configuration.\",\n      \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"title\": \"Framing configuration.\",\n          \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Byte frames are passed through as-is according to the underlying I/O boundaries (for example, split between messages or stream segments).\",\n              \"type\": \"object\",\n              \"required\": [\n                \"method\"\n              ],\n              \"properties\": {\n                \"method\": {\n                  \"description\": \"Byte frames are passed through as-is according to the underlying I/O boundaries (for example, split between messages or stream segments).\",\n                  \"const\": \"bytes\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Method\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Bytes\",\n                \"docs::human_name\": \"Bytes\"\n              }\n            },\n            {\n              \"description\": \"Byte frames which are delimited by a chosen character.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Config used to build a `CharacterDelimitedDecoder`.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"character_delimited\"\n                  ],\n                  \"properties\": {\n                    \"character_delimited\": {\n                      \"description\": \"Options for the character delimited decoder.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"delimiter\"\n                      ],\n                      \"properties\": {\n                        \"delimiter\": {\n                          \"description\": \"The character that delimits byte sequences.\",\n                          \"type\": \"integer\",\n                          \"maximum\": 255.0,\n                          \"minimum\": 0.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::human_name\": \"Delimiter\"\n                          }\n                        },\n                        \"max_length\": {\n                          \"title\": \"The maximum length of the byte buffer.\",\n                          \"description\": \"This length does *not* include the trailing delimiter.\\n\\nBy default, there is no maximum length enforced. If events are malformed, this can lead to\\nadditional resource usage as events continue to be buffered in memory, and can potentially\\nlead to memory exhaustion in extreme cases.\\n\\nIf there is a risk of processing malformed data, such as logs with user-controlled input,\\nconsider setting the maximum length to a reasonably large value as a safety net. This\\nensures that processing is not actually unbounded.\",\n                          \"type\": [\n                            \"integer\",\n                            \"null\"\n                          ],\n                          \"maximum\": 9007199254740991.0,\n                          \"minimum\": 0.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::optional\": true,\n                            \"docs::human_name\": \"Max Length\"\n                          }\n                        }\n                      },\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Character Delimited\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"method\"\n                  ],\n                  \"properties\": {\n                    \"method\": {\n                      \"description\": \"Byte frames which are delimited by a chosen character.\",\n                      \"const\": \"character_delimited\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Method\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"CharacterDelimited\",\n                \"docs::human_name\": \"Character Delimited\"\n              }\n            },\n            {\n              \"description\": \"Byte frames which are prefixed by an unsigned big-endian 32-bit integer indicating the length.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Config used to build a `LengthDelimitedDecoder`.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"length_delimited\"\n                  ],\n                  \"properties\": {\n                    \"length_delimited\": {\n                      \"description\": \"Options for the length delimited decoder.\",\n                      \"$ref\": \"#/definitions/codecs::common::length_delimited::LengthDelimitedCoderOptions\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Length Delimited\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"method\"\n                  ],\n                  \"properties\": {\n                    \"method\": {\n                      \"description\": \"Byte frames which are prefixed by an unsigned big-endian 32-bit integer indicating the length.\",\n                      \"const\": \"length_delimited\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Method\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"LengthDelimited\",\n                \"docs::human_name\": \"Length Delimited\"\n              }\n            },\n            {\n              \"description\": \"Byte frames which are delimited by a newline character.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Config used to build a `NewlineDelimitedDecoder`.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"newline_delimited\": {\n                      \"description\": \"Options for the newline delimited decoder.\",\n                      \"default\": {},\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"max_length\": {\n                          \"title\": \"The maximum length of the byte buffer.\",\n                          \"description\": \"This length does *not* include the trailing delimiter.\\n\\nBy default, there is no maximum length enforced. If events are malformed, this can lead to\\nadditional resource usage as events continue to be buffered in memory, and can potentially\\nlead to memory exhaustion in extreme cases.\\n\\nIf there is a risk of processing malformed data, such as logs with user-controlled input,\\nconsider setting the maximum length to a reasonably large value as a safety net. This\\nensures that processing is not actually unbounded.\",\n                          \"type\": [\n                            \"integer\",\n                            \"null\"\n                          ],\n                          \"maximum\": 9007199254740991.0,\n                          \"minimum\": 0.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::optional\": true,\n                            \"docs::human_name\": \"Max Length\"\n                          }\n                        }\n                      },\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Newline Delimited\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"method\"\n                  ],\n                  \"properties\": {\n                    \"method\": {\n                      \"description\": \"Byte frames which are delimited by a newline character.\",\n                      \"const\": \"newline_delimited\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Method\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"NewlineDelimited\",\n                \"docs::human_name\": \"Newline Delimited\"\n              }\n            },\n            {\n              \"title\": \"Byte frames according to the [octet counting][octet_counting] format.\",\n              \"description\": \"[octet_counting]: https://tools.ietf.org/html/rfc6587#section-3.4.1\",\n              \"allOf\": [\n                {\n                  \"description\": \"Config used to build a `OctetCountingDecoder`.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"octet_counting\": {\n                      \"description\": \"Options for the octet counting decoder.\",\n                      \"default\": {},\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"max_length\": {\n                          \"description\": \"The maximum length of the byte buffer.\",\n                          \"type\": [\n                            \"integer\",\n                            \"null\"\n                          ],\n                          \"maximum\": 9007199254740991.0,\n                          \"minimum\": 0.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::optional\": true,\n                            \"docs::human_name\": \"Max Length\"\n                          }\n                        }\n                      },\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Octet Counting\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"method\"\n                  ],\n                  \"properties\": {\n                    \"method\": {\n                      \"title\": \"Byte frames according to the [octet counting][octet_counting] format.\",\n                      \"description\": \"[octet_counting]: https://tools.ietf.org/html/rfc6587#section-3.4.1\",\n                      \"const\": \"octet_counting\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Method\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"OctetCounting\",\n                \"docs::human_name\": \"Octet Counting\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The framing method.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"method\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<std::path::PathBuf>\": {\n      \"description\": \"A file path.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/stdlib::PathBuf\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::aws::region::RegionOrEndpoint>\": {\n      \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::conditions::AnyCondition>\": {\n      \"title\": \"An event matching condition.\",\n      \"description\": \"Many methods exist for matching events, such as using a VRL expression, a Datadog Search query string,\\nor hard-coded matchers like \\\"must be a metric\\\" or \\\"fields A, B, and C must match these constraints\\\".\\n\\nAs VRL is the most common way to apply conditions to events, this type provides a shortcut to define VRL expressions\\ndirectly in the configuration by passing the VRL expression as a string:\\n\\n```toml\\ncondition = '.message == \\\"hooray\\\"'\\n```\\n\\nWhen other condition types are required, they can be specified with an enum-style notation:\\n\\n```toml\\ncondition.type = 'datadog_search'\\ncondition.source = 'NOT \\\"foo\\\"'\\n```\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"title\": \"An event matching condition.\",\n          \"description\": \"Many methods exist for matching events, such as using a VRL expression, a Datadog Search query string,\\nor hard-coded matchers like \\\"must be a metric\\\" or \\\"fields A, B, and C must match these constraints\\\".\\n\\nAs VRL is the most common way to apply conditions to events, this type provides a shortcut to define VRL expressions\\ndirectly in the configuration by passing the VRL expression as a string:\\n\\n```toml\\ncondition = '.message == \\\"hooray\\\"'\\n```\\n\\nWhen other condition types are required, they can be specified with an enum-style notation:\\n\\n```toml\\ncondition.type = 'datadog_search'\\ncondition.source = 'NOT \\\"foo\\\"'\\n```\",\n          \"oneOf\": [\n            {\n              \"description\": \"A [Vector Remap Language](https://vector.dev/docs/reference/vrl) (VRL) [boolean expression](https://vector.dev/docs/reference/vrl#boolean-expressions).\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"logical_name\": \"String\",\n                \"docs::human_name\": \"String\"\n              }\n            },\n            {\n              \"title\": \"An event matching condition.\",\n              \"description\": \"A fully-specified condition.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Matches an event if it is a log.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"type\"\n                  ],\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Matches an event if it is a log.\",\n                      \"const\": \"is_log\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Type\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"docs::hidden\": true,\n                    \"logical_name\": \"IsLog\",\n                    \"docs::human_name\": \"Is Log\"\n                  }\n                },\n                {\n                  \"description\": \"Matches an event if it is a metric.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"type\"\n                  ],\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Matches an event if it is a metric.\",\n                      \"const\": \"is_metric\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Type\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"docs::hidden\": true,\n                    \"logical_name\": \"IsMetric\",\n                    \"docs::human_name\": \"Is Metric\"\n                  }\n                },\n                {\n                  \"description\": \"Matches an event if it is a trace.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"type\"\n                  ],\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Matches an event if it is a trace.\",\n                      \"const\": \"is_trace\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Type\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"docs::hidden\": true,\n                    \"logical_name\": \"IsTrace\",\n                    \"docs::human_name\": \"Is Trace\"\n                  }\n                },\n                {\n                  \"description\": \"Matches an event with a [Vector Remap Language](https://vector.dev/docs/reference/vrl) (VRL) [boolean expression](https://vector.dev/docs/reference/vrl#boolean-expressions).\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"A condition that uses the [Vector Remap Language](https://vector.dev/docs/reference/vrl) (VRL) [boolean expression](https://vector.dev/docs/reference/vrl#boolean-expressions) against an event.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"source\"\n                      ],\n                      \"properties\": {\n                        \"runtime\": {\n                          \"description\": \"The runtime to use for executing VRL code.\",\n                          \"default\": \"ast\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::hidden\": true,\n                            \"docs::human_name\": \"Runtime\"\n                          }\n                        },\n                        \"source\": {\n                          \"description\": \"The VRL boolean expression.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Source\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"type\"\n                      ],\n                      \"properties\": {\n                        \"type\": {\n                          \"description\": \"Matches an event with a [Vector Remap Language](https://vector.dev/docs/reference/vrl) (VRL) [boolean expression](https://vector.dev/docs/reference/vrl#boolean-expressions).\",\n                          \"const\": \"vrl\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Type\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Vrl\",\n                    \"docs::human_name\": \"VRL\"\n                  }\n                },\n                {\n                  \"description\": \"Matches an event with a [Datadog Search](https://docs.datadoghq.com/logs/explorer/search_syntax/) query.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"A condition that uses the [Datadog Search](https://docs.datadoghq.com/logs/explorer/search_syntax/) query syntax against an event.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"source\"\n                      ],\n                      \"properties\": {\n                        \"source\": {\n                          \"description\": \"The query string.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Source\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"type\"\n                      ],\n                      \"properties\": {\n                        \"type\": {\n                          \"description\": \"Matches an event with a [Datadog Search](https://docs.datadoghq.com/logs/explorer/search_syntax/) query.\",\n                          \"const\": \"datadog_search\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Type\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"DatadogSearch\",\n                    \"docs::human_name\": \"Datadog Search\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Map\",\n                \"docs::enum_tagging\": \"internal\",\n                \"docs::enum_tag_field\": \"type\",\n                \"docs::human_name\": \"Map\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::type_override\": \"condition\",\n            \"docs::enum_tagging\": \"untagged\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::http::Auth>\": {\n      \"title\": \"Configuration of the authentication strategy for HTTP requests.\",\n      \"description\": \"HTTP authentication should be used with HTTPS only, as the authentication credentials are passed as an\\nHTTP header without any additional encryption beyond what is provided by the transport itself.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"title\": \"Configuration of the authentication strategy for HTTP requests.\",\n          \"description\": \"HTTP authentication should be used with HTTPS only, as the authentication credentials are passed as an\\nHTTP header without any additional encryption beyond what is provided by the transport itself.\",\n          \"oneOf\": [\n            {\n              \"title\": \"Basic authentication.\",\n              \"description\": \"The username and password are concatenated and encoded via [base64][base64].\\n\\n[base64]: https://en.wikipedia.org/wiki/Base64\",\n              \"type\": \"object\",\n              \"required\": [\n                \"password\",\n                \"strategy\",\n                \"user\"\n              ],\n              \"properties\": {\n                \"password\": {\n                  \"description\": \"The basic authentication password.\",\n                  \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                  \"_metadata\": {\n                    \"docs::examples\": [\n                      \"${PASSWORD}\",\n                      \"password\"\n                    ],\n                    \"docs::human_name\": \"Password\"\n                  }\n                },\n                \"strategy\": {\n                  \"title\": \"Basic authentication.\",\n                  \"description\": \"The username and password are concatenated and encoded via [base64][base64].\\n\\n[base64]: https://en.wikipedia.org/wiki/Base64\",\n                  \"const\": \"basic\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strategy\"\n                  }\n                },\n                \"user\": {\n                  \"description\": \"The basic authentication username.\",\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::examples\": [\n                      \"${USERNAME}\",\n                      \"username\"\n                    ],\n                    \"docs::human_name\": \"User\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Basic\",\n                \"docs::human_name\": \"Basic\"\n              }\n            },\n            {\n              \"title\": \"Bearer authentication.\",\n              \"description\": \"The bearer token value (OAuth2, JWT, etc.) is passed as-is.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"strategy\",\n                \"token\"\n              ],\n              \"properties\": {\n                \"strategy\": {\n                  \"title\": \"Bearer authentication.\",\n                  \"description\": \"The bearer token value (OAuth2, JWT, etc.) is passed as-is.\",\n                  \"const\": \"bearer\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strategy\"\n                  }\n                },\n                \"token\": {\n                  \"description\": \"The bearer authentication token.\",\n                  \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Token\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Bearer\",\n                \"docs::human_name\": \"Bearer\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The authentication strategy to use.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"strategy\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::nats::NatsAuthConfig>\": {\n      \"description\": \"Configuration of the authentication strategy when interacting with NATS.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"description\": \"Configuration of the authentication strategy when interacting with NATS.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Username/password authentication.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"strategy\",\n                \"user_password\"\n              ],\n              \"properties\": {\n                \"strategy\": {\n                  \"description\": \"Username/password authentication.\",\n                  \"const\": \"user_password\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strategy\"\n                  }\n                },\n                \"user_password\": {\n                  \"description\": \"Username and password configuration.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"password\",\n                    \"user\"\n                  ],\n                  \"properties\": {\n                    \"password\": {\n                      \"description\": \"Password.\",\n                      \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Password\"\n                      }\n                    },\n                    \"user\": {\n                      \"description\": \"Username.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"User\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"User Password\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"UserPassword\",\n                \"docs::human_name\": \"User Password\"\n              }\n            },\n            {\n              \"description\": \"Token authentication.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"strategy\",\n                \"token\"\n              ],\n              \"properties\": {\n                \"strategy\": {\n                  \"description\": \"Token authentication.\",\n                  \"const\": \"token\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strategy\"\n                  }\n                },\n                \"token\": {\n                  \"description\": \"Token configuration.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"value\"\n                  ],\n                  \"properties\": {\n                    \"value\": {\n                      \"description\": \"Token.\",\n                      \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Value\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Token\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Token\",\n                \"docs::human_name\": \"Token\"\n              }\n            },\n            {\n              \"description\": \"Credentials file authentication. (JWT-based)\",\n              \"type\": \"object\",\n              \"required\": [\n                \"credentials_file\",\n                \"strategy\"\n              ],\n              \"properties\": {\n                \"credentials_file\": {\n                  \"description\": \"Credentials file configuration.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"path\"\n                  ],\n                  \"properties\": {\n                    \"path\": {\n                      \"description\": \"Path to credentials file.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::examples\": \"/etc/nats/nats.creds\",\n                        \"docs::human_name\": \"Path\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Credentials File\"\n                  }\n                },\n                \"strategy\": {\n                  \"description\": \"Credentials file authentication. (JWT-based)\",\n                  \"const\": \"credentials_file\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strategy\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"CredentialsFile\",\n                \"docs::human_name\": \"Credentials File\"\n              }\n            },\n            {\n              \"description\": \"NKey authentication.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"nkey\",\n                \"strategy\"\n              ],\n              \"properties\": {\n                \"nkey\": {\n                  \"description\": \"NKeys configuration.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"nkey\",\n                    \"seed\"\n                  ],\n                  \"properties\": {\n                    \"nkey\": {\n                      \"title\": \"User.\",\n                      \"description\": \"Conceptually, this is equivalent to a public key.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Nkey\"\n                      }\n                    },\n                    \"seed\": {\n                      \"title\": \"Seed.\",\n                      \"description\": \"Conceptually, this is equivalent to a private key.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Seed\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Nkey\"\n                  }\n                },\n                \"strategy\": {\n                  \"description\": \"NKey authentication.\",\n                  \"const\": \"nkey\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strategy\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Nkey\",\n                \"docs::human_name\": \"Nkey\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The strategy used to authenticate with the NATS server.\\n\\nMore information on NATS authentication, and the various authentication strategies, can be found in the\\nNATS [documentation][nats_auth_docs]. For TLS client certificate authentication specifically, see the\\n`tls` settings.\\n\\n[nats_auth_docs]: https://docs.nats.io/running-a-nats-service/configuration/securing_nats/auth_intro\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"strategy\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::sinks::influxdb::InfluxDb1Settings>\": {\n      \"description\": \"Configuration settings for InfluxDB v0.x/v1.x.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"description\": \"Configuration settings for InfluxDB v0.x/v1.x.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"database\"\n          ],\n          \"properties\": {\n            \"consistency\": {\n              \"title\": \"The consistency level to use for writes.\",\n              \"description\": \"Only relevant when using InfluxDB v0.x/v1.x.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"any\",\n                  \"one\",\n                  \"quorum\",\n                  \"all\"\n                ],\n                \"docs::human_name\": \"Consistency\"\n              }\n            },\n            \"database\": {\n              \"title\": \"The name of the database to write into.\",\n              \"description\": \"Only relevant when using InfluxDB v0.x/v1.x.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"vector-database\",\n                  \"iot-store\"\n                ],\n                \"docs::human_name\": \"Database\"\n              }\n            },\n            \"password\": {\n              \"title\": \"The password to authenticate with.\",\n              \"description\": \"Only relevant when using InfluxDB v0.x/v1.x.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"${INFLUXDB_PASSWORD}\",\n                  \"influxdb4ever\"\n                ],\n                \"docs::human_name\": \"Password\"\n              }\n            },\n            \"retention_policy_name\": {\n              \"title\": \"The target retention policy for writes.\",\n              \"description\": \"Only relevant when using InfluxDB v0.x/v1.x.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"autogen\",\n                  \"one_day_only\"\n                ],\n                \"docs::human_name\": \"Retention Policy Name\"\n              }\n            },\n            \"username\": {\n              \"title\": \"The username to authenticate with.\",\n              \"description\": \"Only relevant when using InfluxDB v0.x/v1.x.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"todd\",\n                  \"vector-source\"\n                ],\n                \"docs::human_name\": \"Username\"\n              }\n            }\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::sinks::influxdb::InfluxDb2Settings>\": {\n      \"description\": \"Configuration settings for InfluxDB v2.x.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"description\": \"Configuration settings for InfluxDB v2.x.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"bucket\",\n            \"org\",\n            \"token\"\n          ],\n          \"properties\": {\n            \"bucket\": {\n              \"title\": \"The name of the bucket to write into.\",\n              \"description\": \"Only relevant when using InfluxDB v2.x and above.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"vector-bucket\",\n                  \"4d2225e4d3d49f75\"\n                ],\n                \"docs::human_name\": \"Bucket\"\n              }\n            },\n            \"org\": {\n              \"title\": \"The name of the organization to write into.\",\n              \"description\": \"Only relevant when using InfluxDB v2.x and above.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"my-org\",\n                  \"33f2cff0a28e5b63\"\n                ],\n                \"docs::human_name\": \"Org\"\n              }\n            },\n            \"token\": {\n              \"title\": \"The [token][token_docs] to authenticate with.\",\n              \"description\": \"Only relevant when using InfluxDB v2.x and above.\\n\\n[token_docs]: https://v2.docs.influxdata.com/v2.0/security/tokens/\",\n              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"${INFLUXDB_TOKEN}\",\n                  \"ef8d5de700e7989468166c40fc8a0ccd\"\n                ],\n                \"docs::human_name\": \"Token\"\n              }\n            }\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::sinks::util::buffer::compression::Compression>\": {\n      \"title\": \"Compression configuration.\",\n      \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Compression algorithm.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"No compression.\",\n                  \"const\": \"none\",\n                  \"_metadata\": {\n                    \"logical_name\": \"None\",\n                    \"docs::human_name\": \"None\"\n                  }\n                },\n                {\n                  \"title\": \"[Gzip][gzip] compression.\",\n                  \"description\": \"[gzip]: https://www.gzip.org/\",\n                  \"const\": \"gzip\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Gzip\",\n                    \"docs::human_name\": \"Gzip\"\n                  }\n                },\n                {\n                  \"title\": \"[Zlib][zlib] compression.\",\n                  \"description\": \"[zlib]: https://zlib.net/\",\n                  \"const\": \"zlib\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Zlib\",\n                    \"docs::human_name\": \"Zlib\"\n                  }\n                },\n                {\n                  \"title\": \"[Zstandard][zstd] compression.\",\n                  \"description\": \"[zstd]: https://facebook.github.io/zstd/\",\n                  \"const\": \"zstd\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Zstd\",\n                    \"docs::human_name\": \"Zstd\"\n                  }\n                },\n                {\n                  \"title\": \"[Snappy][snappy] compression.\",\n                  \"description\": \"[snappy]: https://github.com/google/snappy/blob/main/docs/README.md\",\n                  \"const\": \"snappy\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Snappy\",\n                    \"docs::human_name\": \"Snappy\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\"\n              }\n            },\n            {\n              \"description\": \"Compression algorithm and compression level.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"algorithm\"\n              ],\n              \"properties\": {\n                \"algorithm\": {\n                  \"description\": \"Compression algorithm.\",\n                  \"oneOf\": [\n                    {\n                      \"description\": \"No compression.\",\n                      \"const\": \"none\",\n                      \"_metadata\": {\n                        \"logical_name\": \"None\",\n                        \"docs::human_name\": \"None\"\n                      }\n                    },\n                    {\n                      \"title\": \"[Gzip][gzip] compression.\",\n                      \"description\": \"[gzip]: https://www.gzip.org/\",\n                      \"const\": \"gzip\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Gzip\",\n                        \"docs::human_name\": \"Gzip\"\n                      }\n                    },\n                    {\n                      \"title\": \"[Zlib][zlib] compression.\",\n                      \"description\": \"[zlib]: https://zlib.net/\",\n                      \"const\": \"zlib\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Zlib\",\n                        \"docs::human_name\": \"Zlib\"\n                      }\n                    },\n                    {\n                      \"title\": \"[Zstandard][zstd] compression.\",\n                      \"description\": \"[zstd]: https://facebook.github.io/zstd/\",\n                      \"const\": \"zstd\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Zstd\",\n                        \"docs::human_name\": \"Zstd\"\n                      }\n                    },\n                    {\n                      \"title\": \"[Snappy][snappy] compression.\",\n                      \"description\": \"[snappy]: https://github.com/google/snappy/blob/main/docs/README.md\",\n                      \"const\": \"snappy\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Snappy\",\n                        \"docs::human_name\": \"Snappy\"\n                      }\n                    }\n                  ],\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\",\n                    \"docs::human_name\": \"Algorithm\"\n                  }\n                },\n                \"level\": {\n                  \"description\": \"Compression level.\",\n                  \"enum\": [\n                    \"none\",\n                    \"fast\",\n                    \"best\",\n                    \"default\",\n                    0,\n                    1,\n                    2,\n                    3,\n                    4,\n                    5,\n                    6,\n                    7,\n                    8,\n                    9,\n                    10,\n                    11,\n                    12,\n                    13,\n                    14,\n                    15,\n                    16,\n                    17,\n                    18,\n                    19,\n                    20,\n                    21\n                  ],\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Level\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::hidden\": true\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::advanced\": true\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::sinks::util::uri::UriSerde>\": {\n      \"title\": \"The URI component of a request.\",\n      \"description\": \"\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector::sinks::util::uri::UriSerde\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::sources::util::http::auth::HttpSourceAuthConfig>\": {\n      \"description\": \"HTTP Basic authentication configuration.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"description\": \"HTTP Basic authentication configuration.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"password\",\n            \"username\"\n          ],\n          \"properties\": {\n            \"password\": {\n              \"description\": \"The password for basic authentication.\",\n              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"hunter2\",\n                  \"${PASSWORD}\"\n                ],\n                \"docs::human_name\": \"Password\"\n              }\n            },\n            \"username\": {\n              \"description\": \"The username for basic authentication.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"AzureDiamond\",\n                  \"admin\"\n                ],\n                \"docs::human_name\": \"Username\"\n              }\n            }\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::sources::util::multiline_config::MultilineConfig>\": {\n      \"description\": \"Configuration of multi-line aggregation.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"description\": \"Configuration of multi-line aggregation.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"condition_pattern\",\n            \"mode\",\n            \"start_pattern\",\n            \"timeout_ms\"\n          ],\n          \"properties\": {\n            \"condition_pattern\": {\n              \"title\": \"Regular expression pattern that is used to determine whether or not more lines should be read.\",\n              \"description\": \"This setting must be configured in conjunction with `mode`.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"^[\\\\s]+\",\n                  \"\\\\\\\\$\",\n                  \"^(INFO|ERROR) \",\n                  \";$\"\n                ],\n                \"docs::human_name\": \"Condition Pattern\"\n              }\n            },\n            \"mode\": {\n              \"title\": \"Aggregation mode.\",\n              \"description\": \"This setting must be configured in conjunction with `condition_pattern`.\",\n              \"oneOf\": [\n                {\n                  \"title\": \"All consecutive lines matching this pattern are included in the group.\",\n                  \"description\": \"The first line (the line that matched the start pattern) does not need to match the `ContinueThrough` pattern.\\n\\nThis is useful in cases such as a Java stack trace, where some indicator in the line (such as a leading\\nwhitespace) indicates that it is an extension of the proceeding line.\",\n                  \"const\": \"continue_through\",\n                  \"_metadata\": {\n                    \"logical_name\": \"ContinueThrough\",\n                    \"docs::human_name\": \"Continue Through\"\n                  }\n                },\n                {\n                  \"title\": \"All consecutive lines matching this pattern, plus one additional line, are included in the group.\",\n                  \"description\": \"This is useful in cases where a log message ends with a continuation marker, such as a backslash, indicating\\nthat the following line is part of the same message.\",\n                  \"const\": \"continue_past\",\n                  \"_metadata\": {\n                    \"logical_name\": \"ContinuePast\",\n                    \"docs::human_name\": \"Continue Past\"\n                  }\n                },\n                {\n                  \"title\": \"All consecutive lines not matching this pattern are included in the group.\",\n                  \"description\": \"This is useful where a log line contains a marker indicating that it begins a new message.\",\n                  \"const\": \"halt_before\",\n                  \"_metadata\": {\n                    \"logical_name\": \"HaltBefore\",\n                    \"docs::human_name\": \"Halt Before\"\n                  }\n                },\n                {\n                  \"title\": \"All consecutive lines, up to and including the first line matching this pattern, are included in the group.\",\n                  \"description\": \"This is useful where a log line ends with a termination marker, such as a semicolon.\",\n                  \"const\": \"halt_with\",\n                  \"_metadata\": {\n                    \"logical_name\": \"HaltWith\",\n                    \"docs::human_name\": \"Halt With\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Mode\"\n              }\n            },\n            \"start_pattern\": {\n              \"description\": \"Regular expression pattern that is used to match the start of a new message.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"^[\\\\s]+\",\n                  \"\\\\\\\\$\",\n                  \"^(INFO|ERROR) \",\n                  \";$\"\n                ],\n                \"docs::human_name\": \"Start Pattern\"\n              }\n            },\n            \"timeout_ms\": {\n              \"title\": \"The maximum amount of time to wait for the next additional line, in milliseconds.\",\n              \"description\": \"Once this timeout is reached, the buffered message is guaranteed to be flushed, even if incomplete.\",\n              \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  1000,\n                  600000\n                ],\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector::template::Template>\": {\n      \"title\": \"A templated field.\",\n      \"description\": \"In many cases, components can be configured so that part of the component's functionality can be\\ncustomized on a per-event basis. For example, you have a sink that writes events to a file and you want to\\nspecify which file an event should go to by using an event field as part of the\\ninput to the filename used.\\n\\nBy using `Template`, users can specify either fixed strings or templated strings. Templated strings use a common syntax to\\nrefer to fields in an event that is used as the input data when rendering the template. An example of a fixed string\\nis `my-file.log`. An example of a template string is `my-file-{{key}}.log`, where `{{key}}`\\nis the key's value when the template is rendered into a string.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector::template::Template\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_common::sensitive_string::SensitiveString>\": {\n      \"description\": \"Wrapper for sensitive strings containing credentials\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_core::ipallowlist::IpAllowlistConfig>\": {\n      \"description\": \"List of allowed origin IP networks. IP addresses must be in CIDR notation.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"description\": \"List of allowed origin IP networks. IP addresses must be in CIDR notation.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"IP network\",\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Allowed IP network origins\",\n            \"docs::examples\": [\n              \"192.168.0.0/16\",\n              \"127.0.0.1/32\",\n              \"::1/128\",\n              \"9876:9ca3:99ab::23/128\"\n            ]\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\": {\n      \"description\": \"TCP keepalive settings for socket-based components.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"description\": \"TCP keepalive settings for socket-based components.\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"time_secs\": {\n              \"description\": \"The time to wait before starting to send TCP keepalive probes on an idle connection.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Wait Time\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_core::tls::settings::TlsConfig>\": {\n      \"description\": \"TLS configuration.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector_core::tls::settings::TlsConfig\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\": {\n      \"description\": \"Configures the TLS options for incoming/outgoing connections.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector_core::tls::settings::TlsEnableableConfig\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_core::tls::settings::TlsSourceConfig>\": {\n      \"description\": \"TlsEnableableConfig for `sources`, adding metadata from the client certificate.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"description\": \"TlsEnableableConfig for `sources`, adding metadata from the client certificate.\",\n          \"allOf\": [\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"client_metadata_key\": {\n                  \"description\": \"Event field for client certificate metadata.\",\n                  \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Client Metadata Key\"\n                  }\n                }\n              }\n            },\n            {\n              \"description\": \"Configures the TLS options for incoming/outgoing connections.\",\n              \"$ref\": \"#/definitions/vector_core::tls::settings::TlsEnableableConfig\"\n            }\n          ]\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_lookup::lookup_v2::ConfigValuePath>\": {\n      \"description\": \"A wrapper around `OwnedValuePath` that allows it to be used in Vector config.\\nThis requires a valid path to be used. If you want to allow optional paths,\\nuse [optional_path::OptionalValuePath].\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalTargetPath>\": {\n      \"description\": \"An optional path that deserializes an empty string to `None`.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\": {\n      \"description\": \"An optional path that deserializes an empty string to `None`.\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\"\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"core::option::Option<vrl::compiler::datetime::TimeZone>\": {\n      \"title\": \"Timezone to use for any date specifiers in template strings.\",\n      \"description\": \"This can refer to any valid timezone as defined in the [TZ database][tzdb], or \\\"local\\\" which refers to the system local timezone. It will default to the [globally configured timezone](https://vector.dev/docs/reference/configuration/global-options/#timezone).\\n\\n[tzdb]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\",\n      \"oneOf\": [\n        {\n          \"type\": \"null\"\n        },\n        {\n          \"title\": \"Timezone to use for any date specifiers in template strings.\",\n          \"description\": \"This can refer to any valid timezone as defined in the [TZ database][tzdb], or \\\"local\\\" which refers to the system local timezone. It will default to the [globally configured timezone](https://vector.dev/docs/reference/configuration/global-options/#timezone).\\n\\n[tzdb]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\",\n          \"oneOf\": [\n            {\n              \"description\": \"System local timezone.\",\n              \"const\": \"local\",\n              \"_metadata\": {\n                \"logical_name\": \"Local\",\n                \"docs::human_name\": \"Local\"\n              }\n            },\n            {\n              \"title\": \"A named timezone.\",\n              \"description\": \"Must be a valid name in the [TZ database][tzdb].\\n\\n[tzdb]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"logical_name\": \"Named\",\n                \"docs::human_name\": \"Named\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"untagged\",\n            \"docs::examples\": [\n              \"local\",\n              \"America/New_York\",\n              \"EST5EDT\"\n            ]\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::optional\": true\n      }\n    },\n    \"file_source::ReadFromConfig\": {\n      \"description\": \"File position to use when reading a new file.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Read from the beginning of the file.\",\n          \"const\": \"beginning\",\n          \"_metadata\": {\n            \"logical_name\": \"Beginning\",\n            \"docs::human_name\": \"Beginning\"\n          }\n        },\n        {\n          \"description\": \"Start reading from the current end of the file.\",\n          \"const\": \"end\",\n          \"_metadata\": {\n            \"logical_name\": \"End\",\n            \"docs::human_name\": \"End\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"external\"\n      }\n    },\n    \"serde_with::DurationFractionalSeconds\": {\n      \"description\": \"A span of time, in fractional seconds.\",\n      \"type\": \"number\",\n      \"maximum\": 9007199254740991.0,\n      \"minimum\": -9007199254740991.0,\n      \"_metadata\": {\n        \"docs::numeric_type\": \"float\",\n        \"docs::type_unit\": \"seconds\"\n      }\n    },\n    \"serde_with::DurationMilliSeconds\": {\n      \"description\": \"A span of time, in whole milliseconds.\",\n      \"type\": \"integer\",\n      \"maximum\": 9007199254740991.0,\n      \"minimum\": 0.0,\n      \"_metadata\": {\n        \"docs::numeric_type\": \"uint\",\n        \"docs::type_unit\": \"milliseconds\"\n      }\n    },\n    \"serde_with::DurationSeconds\": {\n      \"description\": \"A span of time, in whole seconds.\",\n      \"type\": \"integer\",\n      \"maximum\": 9007199254740991.0,\n      \"minimum\": 0.0,\n      \"_metadata\": {\n        \"docs::numeric_type\": \"uint\",\n        \"docs::type_unit\": \"seconds\"\n      }\n    },\n    \"stdlib::PathBuf\": {\n      \"description\": \"A file path.\",\n      \"type\": \"string\",\n      \"pattern\": \"(\\\\/.*|[a-zA-Z]:\\\\\\\\(?:([^<>:\\\"\\\\/\\\\\\\\|?*]*[^<>:\\\"\\\\/\\\\\\\\|?*.]\\\\\\\\|..\\\\\\\\)*([^<>:\\\"\\\\/\\\\\\\\|?*]*[^<>:\\\"\\\\/\\\\\\\\|?*.]\\\\\\\\?|..\\\\\\\\))?)\"\n    },\n    \"stdlib::SocketAddr\": {\n      \"description\": \"An internet socket address, either IPv4 or IPv6.\",\n      \"type\": \"string\"\n    },\n    \"vector::amqp::AmqpConfig\": {\n      \"description\": \"AMQP connection options.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"connection_string\"\n      ],\n      \"properties\": {\n        \"connection_string\": {\n          \"title\": \"URI for the AMQP server.\",\n          \"description\": \"The URI has the format of\\n`amqp://<user>:<password>@<host>:<port>/<vhost>?timeout=<seconds>`.\\n\\nThe default vhost can be specified by using a value of `%2f`.\\n\\nTo connect over TLS, a scheme of `amqps` can be specified instead. For example,\\n`amqps://...`. Additional TLS settings, such as client certificate verification, can be\\nconfigured under the `tls` section.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"amqp://user:password@127.0.0.1:5672/%2f?timeout=10\",\n            \"docs::human_name\": \"Connection String\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      }\n    },\n    \"vector::aws::auth::AwsAuthentication\": {\n      \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n      \"anyOf\": [\n        {\n          \"description\": \"Authenticate using a fixed access key and secret pair.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"access_key_id\",\n            \"secret_access_key\"\n          ],\n          \"properties\": {\n            \"access_key_id\": {\n              \"description\": \"The AWS access key ID.\",\n              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n              \"_metadata\": {\n                \"docs::examples\": \"AKIAIOSFODNN7EXAMPLE\",\n                \"docs::human_name\": \"Access Key ID\"\n              }\n            },\n            \"assume_role\": {\n              \"title\": \"The ARN of an [IAM role][iam_role] to assume.\",\n              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"arn:aws:iam::123456789098:role/my_role\",\n                \"docs::human_name\": \"Assume Role\"\n              }\n            },\n            \"external_id\": {\n              \"title\": \"The optional unique external ID in conjunction with role to assume.\",\n              \"description\": \"[external_id]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"randomEXAMPLEidString\",\n                \"docs::human_name\": \"External ID\"\n              }\n            },\n            \"region\": {\n              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n              \"description\": \"If not set, this will default to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"us-west-2\",\n                \"docs::human_name\": \"Region\"\n              }\n            },\n            \"secret_access_key\": {\n              \"description\": \"The AWS secret access key.\",\n              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n              \"_metadata\": {\n                \"docs::examples\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n                \"docs::human_name\": \"Secret Access Key\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"logical_name\": \"AccessKey\",\n            \"docs::human_name\": \"Access Key\"\n          }\n        },\n        {\n          \"title\": \"Authenticate using credentials stored in a file.\",\n          \"description\": \"Additionally, the specific credential profile to use can be set.\\nThe file format must match the credentials file format outlined in\\n<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html>.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"credentials_file\"\n          ],\n          \"properties\": {\n            \"credentials_file\": {\n              \"description\": \"Path to the credentials file.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"/my/aws/credentials\",\n                \"docs::human_name\": \"Credentials File\"\n              }\n            },\n            \"profile\": {\n              \"title\": \"The credentials profile to use.\",\n              \"description\": \"Used to select AWS credentials from a provided credentials file.\",\n              \"default\": \"default\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"develop\",\n                \"docs::human_name\": \"Profile\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"logical_name\": \"File\",\n            \"docs::human_name\": \"File\"\n          }\n        },\n        {\n          \"description\": \"Assume the given role ARN.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"assume_role\"\n          ],\n          \"properties\": {\n            \"assume_role\": {\n              \"title\": \"The ARN of an [IAM role][iam_role] to assume.\",\n              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"arn:aws:iam::123456789098:role/my_role\",\n                \"docs::human_name\": \"Assume Role\"\n              }\n            },\n            \"external_id\": {\n              \"title\": \"The optional unique external ID in conjunction with role to assume.\",\n              \"description\": \"[external_id]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"randomEXAMPLEidString\",\n                \"docs::human_name\": \"External ID\"\n              }\n            },\n            \"imds\": {\n              \"description\": \"Configuration for authenticating with AWS through IMDS.\",\n              \"default\": {\n                \"max_attempts\": 4,\n                \"connect_timeout_seconds\": 1,\n                \"read_timeout_seconds\": 1\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"connect_timeout_seconds\": {\n                  \"description\": \"Connect timeout for IMDS.\",\n                  \"default\": 1,\n                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Connect Timeout Seconds\"\n                  }\n                },\n                \"max_attempts\": {\n                  \"description\": \"Number of IMDS retries for fetching tokens and metadata.\",\n                  \"default\": 4,\n                  \"type\": \"integer\",\n                  \"maximum\": 4294967295.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::human_name\": \"Max Attempts\"\n                  }\n                },\n                \"read_timeout_seconds\": {\n                  \"description\": \"Read timeout for IMDS.\",\n                  \"default\": 1,\n                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Read Timeout Seconds\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"IMDS\"\n              }\n            },\n            \"load_timeout_secs\": {\n              \"title\": \"Timeout for assuming the role, in seconds.\",\n              \"description\": \"Relevant when the default credentials chain or `assume_role` is used.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::examples\": 30,\n                \"docs::human_name\": \"Load Timeout\"\n              }\n            },\n            \"region\": {\n              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n              \"description\": \"If not set, this defaults to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"us-west-2\",\n                \"docs::human_name\": \"Region\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"logical_name\": \"Role\",\n            \"docs::human_name\": \"Role\"\n          }\n        },\n        {\n          \"description\": \"Default authentication strategy which tries a variety of substrategies in sequential order.\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"imds\": {\n              \"description\": \"Configuration for authenticating with AWS through IMDS.\",\n              \"default\": {\n                \"max_attempts\": 4,\n                \"connect_timeout_seconds\": 1,\n                \"read_timeout_seconds\": 1\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"connect_timeout_seconds\": {\n                  \"description\": \"Connect timeout for IMDS.\",\n                  \"default\": 1,\n                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Connect Timeout Seconds\"\n                  }\n                },\n                \"max_attempts\": {\n                  \"description\": \"Number of IMDS retries for fetching tokens and metadata.\",\n                  \"default\": 4,\n                  \"type\": \"integer\",\n                  \"maximum\": 4294967295.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::human_name\": \"Max Attempts\"\n                  }\n                },\n                \"read_timeout_seconds\": {\n                  \"description\": \"Read timeout for IMDS.\",\n                  \"default\": 1,\n                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Read Timeout Seconds\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"IMDS\"\n              }\n            },\n            \"load_timeout_secs\": {\n              \"title\": \"Timeout for successfully loading any credentials, in seconds.\",\n              \"description\": \"Relevant when the default credentials chain or `assume_role` is used.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::examples\": 30,\n                \"docs::human_name\": \"Load Timeout\"\n              }\n            },\n            \"region\": {\n              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n              \"description\": \"If not set, this defaults to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"us-west-2\",\n                \"docs::human_name\": \"Region\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"logical_name\": \"Default\",\n            \"docs::human_name\": \"Default\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"untagged\"\n      }\n    },\n    \"vector::aws::region::RegionOrEndpoint\": {\n      \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n      \"default\": {\n        \"region\": null,\n        \"endpoint\": null\n      },\n      \"type\": \"object\",\n      \"properties\": {\n        \"endpoint\": {\n          \"description\": \"Custom endpoint for use with AWS-compatible services.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"http://127.0.0.0:5000/path/to/service\",\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"region\": {\n          \"title\": \"The [AWS region][aws_region] of the target service.\",\n          \"description\": \"[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"us-east-1\",\n            \"docs::human_name\": \"Region\"\n          }\n        }\n      }\n    },\n    \"vector::codecs::encoding::config::EncodingConfig\": {\n      \"description\": \"Configures how events are encoded into raw bytes.\",\n      \"allOf\": [\n        {\n          \"description\": \"Serializer configuration.\",\n          \"oneOf\": [\n            {\n              \"title\": \"Encodes an event as an [Apache Avro][apache_avro] message.\",\n              \"description\": \"[apache_avro]: https://avro.apache.org/\",\n              \"type\": \"object\",\n              \"required\": [\n                \"avro\",\n                \"codec\"\n              ],\n              \"properties\": {\n                \"avro\": {\n                  \"description\": \"Apache Avro-specific encoder options.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"schema\"\n                  ],\n                  \"properties\": {\n                    \"schema\": {\n                      \"description\": \"The Avro schema.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::examples\": \"{ \\\"type\\\": \\\"record\\\", \\\"name\\\": \\\"log\\\", \\\"fields\\\": [{ \\\"name\\\": \\\"message\\\", \\\"type\\\": \\\"string\\\" }] }\",\n                        \"docs::human_name\": \"Schema JSON\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Avro\"\n                  }\n                },\n                \"codec\": {\n                  \"title\": \"Encodes an event as an [Apache Avro][apache_avro] message.\",\n                  \"description\": \"[apache_avro]: https://avro.apache.org/\",\n                  \"const\": \"avro\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Avro\",\n                \"docs::human_name\": \"Avro\"\n              }\n            },\n            {\n              \"title\": \"Encodes an event as a CSV message.\",\n              \"description\": \"This codec must be configured with fields to encode.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Config used to build a `CsvSerializer`.\",\n                  \"$ref\": \"#/definitions/codecs::encoding::format::csv::CsvSerializerConfig\"\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"codec\"\n                  ],\n                  \"properties\": {\n                    \"codec\": {\n                      \"title\": \"Encodes an event as a CSV message.\",\n                      \"description\": \"This codec must be configured with fields to encode.\",\n                      \"const\": \"csv\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Codec\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Csv\",\n                \"docs::human_name\": \"CSV\"\n              }\n            },\n            {\n              \"title\": \"Encodes an event as a [GELF][gelf] message.\",\n              \"description\": \"This codec is experimental for the following reason:\\n\\nThe GELF specification is more strict than the actual Graylog receiver.\\nVector's encoder currently adheres more strictly to the GELF spec, with\\nthe exception that some characters such as `@`  are allowed in field names.\\n\\nOther GELF codecs such as Loki's, use a [Go SDK][implementation] that is maintained\\nby Graylog, and is much more relaxed than the GELF spec.\\n\\nGoing forward, Vector will use that [Go SDK][implementation] as the reference implementation, which means\\nthe codec may continue to relax the enforcement of specification.\\n\\n[gelf]: https://docs.graylog.org/docs/gelf\\n[implementation]: https://github.com/Graylog2/go-gelf/blob/v2/gelf/reader.go\",\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Encodes an event as a [GELF][gelf] message.\",\n                  \"description\": \"This codec is experimental for the following reason:\\n\\nThe GELF specification is more strict than the actual Graylog receiver.\\nVector's encoder currently adheres more strictly to the GELF spec, with\\nthe exception that some characters such as `@`  are allowed in field names.\\n\\nOther GELF codecs such as Loki's, use a [Go SDK][implementation] that is maintained\\nby Graylog, and is much more relaxed than the GELF spec.\\n\\nGoing forward, Vector will use that [Go SDK][implementation] as the reference implementation, which means\\nthe codec may continue to relax the enforcement of specification.\\n\\n[gelf]: https://docs.graylog.org/docs/gelf\\n[implementation]: https://github.com/Graylog2/go-gelf/blob/v2/gelf/reader.go\",\n                  \"const\": \"gelf\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Gelf\",\n                \"docs::human_name\": \"GELF\"\n              }\n            },\n            {\n              \"title\": \"Encodes an event as [JSON][json].\",\n              \"description\": \"[json]: https://www.json.org/\",\n              \"allOf\": [\n                {\n                  \"description\": \"Config used to build a `JsonSerializer`.\",\n                  \"$ref\": \"#/definitions/codecs::encoding::format::json::JsonSerializerConfig\"\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"codec\"\n                  ],\n                  \"properties\": {\n                    \"codec\": {\n                      \"title\": \"Encodes an event as [JSON][json].\",\n                      \"description\": \"[json]: https://www.json.org/\",\n                      \"const\": \"json\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Codec\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Json\",\n                \"docs::human_name\": \"JSON\"\n              }\n            },\n            {\n              \"title\": \"Encodes an event as a [logfmt][logfmt] message.\",\n              \"description\": \"[logfmt]: https://brandur.org/logfmt\",\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Encodes an event as a [logfmt][logfmt] message.\",\n                  \"description\": \"[logfmt]: https://brandur.org/logfmt\",\n                  \"const\": \"logfmt\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Logfmt\",\n                \"docs::human_name\": \"Logfmt\"\n              }\n            },\n            {\n              \"title\": \"Encodes an event in the [native Protocol Buffers format][vector_native_protobuf].\",\n              \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_protobuf]: https://github.com/vectordotdev/vector/blob/master/lib/vector-core/proto/event.proto\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Encodes an event in the [native Protocol Buffers format][vector_native_protobuf].\",\n                  \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_protobuf]: https://github.com/vectordotdev/vector/blob/master/lib/vector-core/proto/event.proto\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n                  \"const\": \"native\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Native\",\n                \"docs::human_name\": \"Native\"\n              }\n            },\n            {\n              \"title\": \"Encodes an event in the [native JSON format][vector_native_json].\",\n              \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_json]: https://github.com/vectordotdev/vector/blob/master/lib/codecs/tests/data/native_encoding/schema.cue\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"Encodes an event in the [native JSON format][vector_native_json].\",\n                  \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_json]: https://github.com/vectordotdev/vector/blob/master/lib/codecs/tests/data/native_encoding/schema.cue\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n                  \"const\": \"native_json\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"NativeJson\",\n                \"docs::human_name\": \"Native JSON\"\n              }\n            },\n            {\n              \"title\": \"Encodes an event as a [Protobuf][protobuf] message.\",\n              \"description\": \"[protobuf]: https://protobuf.dev/\",\n              \"allOf\": [\n                {\n                  \"description\": \"Config used to build a `ProtobufSerializer`.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"protobuf\"\n                  ],\n                  \"properties\": {\n                    \"protobuf\": {\n                      \"description\": \"Options for the Protobuf serializer.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"desc_file\",\n                        \"message_type\"\n                      ],\n                      \"properties\": {\n                        \"desc_file\": {\n                          \"title\": \"The path to the protobuf descriptor set file.\",\n                          \"description\": \"This file is the output of `protoc -o <path> ...`\",\n                          \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                          \"_metadata\": {\n                            \"docs::examples\": \"/etc/vector/protobuf_descriptor_set.desc\",\n                            \"docs::human_name\": \"Desc File\"\n                          }\n                        },\n                        \"message_type\": {\n                          \"description\": \"The name of the message type to use for serializing.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::examples\": \"package.Message\",\n                            \"docs::human_name\": \"Message Type\"\n                          }\n                        }\n                      },\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Protobuf\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"codec\"\n                  ],\n                  \"properties\": {\n                    \"codec\": {\n                      \"title\": \"Encodes an event as a [Protobuf][protobuf] message.\",\n                      \"description\": \"[protobuf]: https://protobuf.dev/\",\n                      \"const\": \"protobuf\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Codec\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Protobuf\",\n                \"docs::human_name\": \"Protobuf\"\n              }\n            },\n            {\n              \"title\": \"No encoding.\",\n              \"description\": \"This encoding uses the `message` field of a log event.\\n\\nBe careful if you are modifying your log events (for example, by using a `remap`\\ntransform) and removing the message field while doing additional parsing on it, as this\\ncould lead to the encoding emitting empty strings for the given event.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"codec\"\n              ],\n              \"properties\": {\n                \"codec\": {\n                  \"title\": \"No encoding.\",\n                  \"description\": \"This encoding uses the `message` field of a log event.\\n\\nBe careful if you are modifying your log events (for example, by using a `remap`\\ntransform) and removing the message field while doing additional parsing on it, as this\\ncould lead to the encoding emitting empty strings for the given event.\",\n                  \"const\": \"raw_message\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Codec\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"RawMessage\",\n                \"docs::human_name\": \"Raw Message\"\n              }\n            },\n            {\n              \"title\": \"Plain text encoding.\",\n              \"description\": \"This encoding uses the `message` field of a log event. For metrics, it uses an\\nencoding that resembles the Prometheus export format.\\n\\nBe careful if you are modifying your log events (for example, by using a `remap`\\ntransform) and removing the message field while doing additional parsing on it, as this\\ncould lead to the encoding emitting empty strings for the given event.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Config used to build a `TextSerializer`.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"metric_tag_values\": {\n                      \"title\": \"Controls how metric tag values are encoded.\",\n                      \"description\": \"When set to `single`, only the last non-bare value of tags are displayed with the\\nmetric.  When set to `full`, all metric tags are exposed as separate assignments.\",\n                      \"default\": \"single\",\n                      \"$ref\": \"#/definitions/codecs::MetricTagValues\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Metric Tag Values\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"codec\"\n                  ],\n                  \"properties\": {\n                    \"codec\": {\n                      \"title\": \"Plain text encoding.\",\n                      \"description\": \"This encoding uses the `message` field of a log event. For metrics, it uses an\\nencoding that resembles the Prometheus export format.\\n\\nBe careful if you are modifying your log events (for example, by using a `remap`\\ntransform) and removing the message field while doing additional parsing on it, as this\\ncould lead to the encoding emitting empty strings for the given event.\",\n                      \"const\": \"text\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Codec\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Text\",\n                \"docs::human_name\": \"Text\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The codec to use for encoding events.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"codec\"\n          }\n        },\n        {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"except_fields\": {\n              \"description\": \"List of fields that are excluded from the encoded event.\",\n              \"default\": null,\n              \"type\": [\n                \"array\",\n                \"null\"\n              ],\n              \"items\": {\n                \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n              },\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Except Fields\"\n              }\n            },\n            \"only_fields\": {\n              \"description\": \"List of fields that are included in the encoded event.\",\n              \"default\": null,\n              \"type\": [\n                \"array\",\n                \"null\"\n              ],\n              \"items\": {\n                \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n              },\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Only Fields\"\n              }\n            },\n            \"timestamp_format\": {\n              \"description\": \"Format used for timestamp fields.\",\n              \"default\": null,\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"description\": \"The format in which a timestamp should be represented.\",\n                  \"oneOf\": [\n                    {\n                      \"description\": \"Represent the timestamp as a Unix timestamp.\",\n                      \"const\": \"unix\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Unix\",\n                        \"docs::human_name\": \"Unix\"\n                      }\n                    },\n                    {\n                      \"description\": \"Represent the timestamp as a RFC 3339 timestamp.\",\n                      \"const\": \"rfc3339\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Rfc3339\",\n                        \"docs::human_name\": \"RFC3339\"\n                      }\n                    },\n                    {\n                      \"description\": \"Represent the timestamp as a Unix timestamp in milliseconds.\",\n                      \"const\": \"unix_ms\",\n                      \"_metadata\": {\n                        \"logical_name\": \"UnixMs\",\n                        \"docs::human_name\": \"Unix Ms\"\n                      }\n                    },\n                    {\n                      \"description\": \"Represent the timestamp as a Unix timestamp in microseconds\",\n                      \"const\": \"unix_us\",\n                      \"_metadata\": {\n                        \"logical_name\": \"UnixUs\",\n                        \"docs::human_name\": \"Unix US\"\n                      }\n                    },\n                    {\n                      \"description\": \"Represent the timestamp as a Unix timestamp in nanoseconds.\",\n                      \"const\": \"unix_ns\",\n                      \"_metadata\": {\n                        \"logical_name\": \"UnixNs\",\n                        \"docs::human_name\": \"Unix Ns\"\n                      }\n                    },\n                    {\n                      \"description\": \"Represent the timestamp as a Unix timestamp in floating point.\",\n                      \"const\": \"unix_float\",\n                      \"_metadata\": {\n                        \"logical_name\": \"UnixFloat\",\n                        \"docs::human_name\": \"Unix Float\"\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Timestamp Format\"\n              }\n            }\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false\n    },\n    \"vector::codecs::encoding::config::EncodingConfigWithFraming\": {\n      \"description\": \"Encoding configuration.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\"\n      ],\n      \"properties\": {\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"framing\": {\n          \"description\": \"Framing configuration.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Framing configuration.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Event data is not delimited at all.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"method\"\n                  ],\n                  \"properties\": {\n                    \"method\": {\n                      \"description\": \"Event data is not delimited at all.\",\n                      \"const\": \"bytes\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Method\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Bytes\",\n                    \"docs::human_name\": \"Bytes\"\n                  }\n                },\n                {\n                  \"description\": \"Event data is delimited by a single ASCII (7-bit) character.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Config used to build a `CharacterDelimitedEncoder`.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"character_delimited\"\n                      ],\n                      \"properties\": {\n                        \"character_delimited\": {\n                          \"description\": \"Options for the character delimited encoder.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"delimiter\"\n                          ],\n                          \"properties\": {\n                            \"delimiter\": {\n                              \"description\": \"The ASCII (7-bit) character that delimits byte sequences.\",\n                              \"type\": \"integer\",\n                              \"maximum\": 255.0,\n                              \"minimum\": 0.0,\n                              \"_metadata\": {\n                                \"docs::numeric_type\": \"uint\",\n                                \"docs::human_name\": \"Delimiter\"\n                              }\n                            }\n                          },\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Character Delimited\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"method\"\n                      ],\n                      \"properties\": {\n                        \"method\": {\n                          \"description\": \"Event data is delimited by a single ASCII (7-bit) character.\",\n                          \"const\": \"character_delimited\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Method\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"CharacterDelimited\",\n                    \"docs::human_name\": \"Character Delimited\"\n                  }\n                },\n                {\n                  \"title\": \"Event data is prefixed with its length in bytes.\",\n                  \"description\": \"The prefix is a 32-bit unsigned integer, little endian.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Config used to build a `LengthDelimitedEncoder`.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"length_delimited\"\n                      ],\n                      \"properties\": {\n                        \"length_delimited\": {\n                          \"description\": \"Options for the length delimited decoder.\",\n                          \"$ref\": \"#/definitions/codecs::common::length_delimited::LengthDelimitedCoderOptions\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Length Delimited\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"method\"\n                      ],\n                      \"properties\": {\n                        \"method\": {\n                          \"title\": \"Event data is prefixed with its length in bytes.\",\n                          \"description\": \"The prefix is a 32-bit unsigned integer, little endian.\",\n                          \"const\": \"length_delimited\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Method\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"LengthDelimited\",\n                    \"docs::human_name\": \"Length Delimited\"\n                  }\n                },\n                {\n                  \"description\": \"Event data is delimited by a newline (LF) character.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"method\"\n                  ],\n                  \"properties\": {\n                    \"method\": {\n                      \"description\": \"Event data is delimited by a newline (LF) character.\",\n                      \"const\": \"newline_delimited\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Method\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"NewlineDelimited\",\n                    \"docs::human_name\": \"Newline Delimited\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tag_description\": \"The framing method.\",\n                \"docs::enum_tagging\": \"internal\",\n                \"docs::enum_tag_field\": \"method\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Framing\"\n          }\n        }\n      }\n    },\n    \"vector::codecs::encoding::transformer::Transformer\": {\n      \"description\": \"Transformations to prepare an event for serialization.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"except_fields\": {\n          \"description\": \"List of fields that are excluded from the encoded event.\",\n          \"default\": null,\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Except Fields\"\n          }\n        },\n        \"only_fields\": {\n          \"description\": \"List of fields that are included in the encoded event.\",\n          \"default\": null,\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Only Fields\"\n          }\n        },\n        \"timestamp_format\": {\n          \"description\": \"Format used for timestamp fields.\",\n          \"default\": null,\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"The format in which a timestamp should be represented.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Represent the timestamp as a Unix timestamp.\",\n                  \"const\": \"unix\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Unix\",\n                    \"docs::human_name\": \"Unix\"\n                  }\n                },\n                {\n                  \"description\": \"Represent the timestamp as a RFC 3339 timestamp.\",\n                  \"const\": \"rfc3339\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Rfc3339\",\n                    \"docs::human_name\": \"RFC3339\"\n                  }\n                },\n                {\n                  \"description\": \"Represent the timestamp as a Unix timestamp in milliseconds.\",\n                  \"const\": \"unix_ms\",\n                  \"_metadata\": {\n                    \"logical_name\": \"UnixMs\",\n                    \"docs::human_name\": \"Unix Ms\"\n                  }\n                },\n                {\n                  \"description\": \"Represent the timestamp as a Unix timestamp in microseconds\",\n                  \"const\": \"unix_us\",\n                  \"_metadata\": {\n                    \"logical_name\": \"UnixUs\",\n                    \"docs::human_name\": \"Unix US\"\n                  }\n                },\n                {\n                  \"description\": \"Represent the timestamp as a Unix timestamp in nanoseconds.\",\n                  \"const\": \"unix_ns\",\n                  \"_metadata\": {\n                    \"logical_name\": \"UnixNs\",\n                    \"docs::human_name\": \"Unix Ns\"\n                  }\n                },\n                {\n                  \"description\": \"Represent the timestamp as a Unix timestamp in floating point.\",\n                  \"const\": \"unix_float\",\n                  \"_metadata\": {\n                    \"logical_name\": \"UnixFloat\",\n                    \"docs::human_name\": \"Unix Float\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Timestamp Format\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"vector::conditions::AnyCondition\": {\n      \"title\": \"An event matching condition.\",\n      \"description\": \"Many methods exist for matching events, such as using a VRL expression, a Datadog Search query string,\\nor hard-coded matchers like \\\"must be a metric\\\" or \\\"fields A, B, and C must match these constraints\\\".\\n\\nAs VRL is the most common way to apply conditions to events, this type provides a shortcut to define VRL expressions\\ndirectly in the configuration by passing the VRL expression as a string:\\n\\n```toml\\ncondition = '.message == \\\"hooray\\\"'\\n```\\n\\nWhen other condition types are required, they can be specified with an enum-style notation:\\n\\n```toml\\ncondition.type = 'datadog_search'\\ncondition.source = 'NOT \\\"foo\\\"'\\n```\",\n      \"oneOf\": [\n        {\n          \"description\": \"A [Vector Remap Language](https://vector.dev/docs/reference/vrl) (VRL) [boolean expression](https://vector.dev/docs/reference/vrl#boolean-expressions).\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"logical_name\": \"String\",\n            \"docs::human_name\": \"String\"\n          }\n        },\n        {\n          \"title\": \"An event matching condition.\",\n          \"description\": \"A fully-specified condition.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Matches an event if it is a log.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Matches an event if it is a log.\",\n                  \"const\": \"is_log\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::hidden\": true,\n                \"logical_name\": \"IsLog\",\n                \"docs::human_name\": \"Is Log\"\n              }\n            },\n            {\n              \"description\": \"Matches an event if it is a metric.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Matches an event if it is a metric.\",\n                  \"const\": \"is_metric\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::hidden\": true,\n                \"logical_name\": \"IsMetric\",\n                \"docs::human_name\": \"Is Metric\"\n              }\n            },\n            {\n              \"description\": \"Matches an event if it is a trace.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Matches an event if it is a trace.\",\n                  \"const\": \"is_trace\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::hidden\": true,\n                \"logical_name\": \"IsTrace\",\n                \"docs::human_name\": \"Is Trace\"\n              }\n            },\n            {\n              \"description\": \"Matches an event with a [Vector Remap Language](https://vector.dev/docs/reference/vrl) (VRL) [boolean expression](https://vector.dev/docs/reference/vrl#boolean-expressions).\",\n              \"allOf\": [\n                {\n                  \"description\": \"A condition that uses the [Vector Remap Language](https://vector.dev/docs/reference/vrl) (VRL) [boolean expression](https://vector.dev/docs/reference/vrl#boolean-expressions) against an event.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"source\"\n                  ],\n                  \"properties\": {\n                    \"runtime\": {\n                      \"description\": \"The runtime to use for executing VRL code.\",\n                      \"default\": \"ast\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::hidden\": true,\n                        \"docs::human_name\": \"Runtime\"\n                      }\n                    },\n                    \"source\": {\n                      \"description\": \"The VRL boolean expression.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Source\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"type\"\n                  ],\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Matches an event with a [Vector Remap Language](https://vector.dev/docs/reference/vrl) (VRL) [boolean expression](https://vector.dev/docs/reference/vrl#boolean-expressions).\",\n                      \"const\": \"vrl\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Type\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Vrl\",\n                \"docs::human_name\": \"VRL\"\n              }\n            },\n            {\n              \"description\": \"Matches an event with a [Datadog Search](https://docs.datadoghq.com/logs/explorer/search_syntax/) query.\",\n              \"allOf\": [\n                {\n                  \"description\": \"A condition that uses the [Datadog Search](https://docs.datadoghq.com/logs/explorer/search_syntax/) query syntax against an event.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"source\"\n                  ],\n                  \"properties\": {\n                    \"source\": {\n                      \"description\": \"The query string.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Source\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"type\"\n                  ],\n                  \"properties\": {\n                    \"type\": {\n                      \"description\": \"Matches an event with a [Datadog Search](https://docs.datadoghq.com/logs/explorer/search_syntax/) query.\",\n                      \"const\": \"datadog_search\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Type\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"DatadogSearch\",\n                \"docs::human_name\": \"Datadog Search\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Map\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"type\",\n            \"docs::human_name\": \"Map\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::type_override\": \"condition\",\n        \"docs::enum_tagging\": \"untagged\"\n      }\n    },\n    \"vector::config::TestInput\": {\n      \"title\": \"A unit test input.\",\n      \"description\": \"An input describes not only the type of event to insert, but also which transform within the\\nconfiguration to insert it to.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"insert_at\"\n      ],\n      \"properties\": {\n        \"insert_at\": {\n          \"description\": \"The name of the transform to insert the input event to.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Insert At\"\n          }\n        },\n        \"log_fields\": {\n          \"title\": \"The set of log fields to use when creating a log input event.\",\n          \"description\": \"Only relevant when `type` is `log`.\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"description\": \"Value for a log field.\",\n            \"oneOf\": [\n              {\n                \"description\": \"A string.\",\n                \"type\": \"string\",\n                \"_metadata\": {\n                  \"logical_name\": \"String\",\n                  \"docs::human_name\": \"String\"\n                }\n              },\n              {\n                \"description\": \"An integer.\",\n                \"type\": \"integer\",\n                \"maximum\": 9007199254740991.0,\n                \"minimum\": -9007199254740991.0,\n                \"_metadata\": {\n                  \"docs::numeric_type\": \"int\",\n                  \"logical_name\": \"Integer\",\n                  \"docs::human_name\": \"Integer\"\n                }\n              },\n              {\n                \"description\": \"A floating-point number.\",\n                \"type\": \"number\",\n                \"maximum\": 9007199254740991.0,\n                \"minimum\": -9007199254740991.0,\n                \"_metadata\": {\n                  \"docs::numeric_type\": \"float\",\n                  \"logical_name\": \"Float\",\n                  \"docs::human_name\": \"Float\"\n                }\n              },\n              {\n                \"description\": \"A boolean.\",\n                \"type\": \"boolean\",\n                \"_metadata\": {\n                  \"logical_name\": \"Boolean\",\n                  \"docs::human_name\": \"Boolean\"\n                }\n              }\n            ],\n            \"unevaluatedProperties\": false,\n            \"_metadata\": {\n              \"docs::enum_tagging\": \"untagged\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Log Fields\"\n          }\n        },\n        \"metric\": {\n          \"title\": \"The metric to use as an input event.\",\n          \"description\": \"Only relevant when `type` is `metric`.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"A metric.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Metrics series.\",\n                  \"allOf\": [\n                    {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"tags\": {\n                          \"description\": \"Tags for a metric series.\",\n                          \"oneOf\": [\n                            {\n                              \"type\": \"null\"\n                            },\n                            {\n                              \"description\": \"Tags for a metric series.\",\n                              \"type\": \"object\",\n                              \"additionalProperties\": {\n                                \"description\": \"Tag values for a metric series.  This may be empty, a single value, or a set of values. This is\\nused to provide the storage for `TagValueSet`.\",\n                                \"oneOf\": [\n                                  {\n                                    \"description\": \"This represents a set containing no value.\",\n                                    \"const\": \"Empty\",\n                                    \"_metadata\": {\n                                      \"logical_name\": \"Empty\",\n                                      \"docs::human_name\": \"Empty\"\n                                    }\n                                  },\n                                  {\n                                    \"description\": \"This represents a set containing a single value. This is stored separately to avoid the\\noverhead of allocating a hash table for the common case of a single value for a tag.\",\n                                    \"type\": \"object\",\n                                    \"required\": [\n                                      \"Single\"\n                                    ],\n                                    \"properties\": {\n                                      \"Single\": {\n                                        \"description\": \"A single tag value, either a bare tag or a value.\",\n                                        \"oneOf\": [\n                                          {\n                                            \"description\": \"Bare tag value.\",\n                                            \"type\": \"null\",\n                                            \"_metadata\": {\n                                              \"logical_name\": \"Bare\",\n                                              \"docs::human_name\": \"Bare\"\n                                            }\n                                          },\n                                          {\n                                            \"description\": \"Tag value containing a string.\",\n                                            \"type\": \"string\",\n                                            \"_metadata\": {\n                                              \"logical_name\": \"Value\",\n                                              \"docs::human_name\": \"Value\"\n                                            }\n                                          }\n                                        ],\n                                        \"unevaluatedProperties\": false,\n                                        \"_metadata\": {\n                                          \"docs::enum_tagging\": \"untagged\",\n                                          \"docs::human_name\": \"Single\"\n                                        }\n                                      }\n                                    },\n                                    \"_metadata\": {\n                                      \"logical_name\": \"Single\",\n                                      \"docs::human_name\": \"Single\"\n                                    }\n                                  },\n                                  {\n                                    \"description\": \"This holds an actual set of values. This variant will be automatically created when a single\\nvalue is added to, and reduced down to a single value when the length is reduced to 1.  An\\nindex set is used for this set, as it preserves the insertion order of the contained\\nelements. This allows us to retrieve the last element inserted which in turn allows us to\\nemulate the set having a single value.\",\n                                    \"type\": \"object\",\n                                    \"required\": [\n                                      \"Set\"\n                                    ],\n                                    \"properties\": {\n                                      \"Set\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                          \"description\": \"A single tag value, either a bare tag or a value.\",\n                                          \"oneOf\": [\n                                            {\n                                              \"description\": \"Bare tag value.\",\n                                              \"type\": \"null\",\n                                              \"_metadata\": {\n                                                \"logical_name\": \"Bare\",\n                                                \"docs::human_name\": \"Bare\"\n                                              }\n                                            },\n                                            {\n                                              \"description\": \"Tag value containing a string.\",\n                                              \"type\": \"string\",\n                                              \"_metadata\": {\n                                                \"logical_name\": \"Value\",\n                                                \"docs::human_name\": \"Value\"\n                                              }\n                                            }\n                                          ],\n                                          \"unevaluatedProperties\": false,\n                                          \"_metadata\": {\n                                            \"docs::enum_tagging\": \"untagged\"\n                                          }\n                                        },\n                                        \"uniqueItems\": true,\n                                        \"_metadata\": {\n                                          \"docs::human_name\": \"Set\"\n                                        }\n                                      }\n                                    },\n                                    \"_metadata\": {\n                                      \"logical_name\": \"Set\",\n                                      \"docs::human_name\": \"Set\"\n                                    }\n                                  }\n                                ],\n                                \"unevaluatedProperties\": false,\n                                \"_metadata\": {\n                                  \"docs::enum_tagging\": \"external\"\n                                }\n                              }\n                            }\n                          ],\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::optional\": true,\n                            \"docs::human_name\": \"Tags\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"description\": \"Metric name.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"name\"\n                      ],\n                      \"properties\": {\n                        \"name\": {\n                          \"title\": \"The name of the metric.\",\n                          \"description\": \"This would typically be a name for the metric itself, unrelated to where the metric\\noriginates from. For example, if the metric represented the amount of used system memory, it\\nmay be called `memory.used`.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Name\"\n                          }\n                        },\n                        \"namespace\": {\n                          \"title\": \"The namespace of the metric.\",\n                          \"description\": \"Namespace represents a grouping for a metric where the name itself may otherwise be too\\ngeneric. For example, while the name of a metric may be `memory.used` for the amount of used\\nsystem memory, the namespace could differentiate that by being `system` for the total amount\\nof used memory across the system, or `vector` for the amount of used system memory specific\\nto Vector, and so on.\",\n                          \"type\": [\n                            \"string\",\n                            \"null\"\n                          ],\n                          \"_metadata\": {\n                            \"docs::optional\": true,\n                            \"docs::human_name\": \"Namespace\"\n                          }\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  \"description\": \"Metric data.\",\n                  \"allOf\": [\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"kind\"\n                      ],\n                      \"properties\": {\n                        \"kind\": {\n                          \"title\": \"Metric kind.\",\n                          \"description\": \"Metrics can be either absolute of incremental. Absolute metrics represent a sort of \\\"last write wins\\\" scenario,\\nwhere the latest absolute value seen is meant to be the actual metric value.  In contrast, and perhaps intuitively,\\nincremental metrics are meant to be additive, such that we don't know what total value of the metric is, but we know\\nthat we'll be adding or subtracting the given value from it.\\n\\nGenerally speaking, most metrics storage systems deal with incremental updates. A notable exception is Prometheus,\\nwhich deals with, and expects, absolute values from clients.\",\n                          \"$ref\": \"#/definitions/vector_core::event::metric::MetricKind\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Kind\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"description\": \"Metric time.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"interval_ms\": {\n                          \"title\": \"The interval, in milliseconds, of this metric.\",\n                          \"description\": \"Intervals represent the time window over which this metric applies, and is generally only\\nused for tracking rates (change over time) on counters.\",\n                          \"type\": [\n                            \"integer\",\n                            \"null\"\n                          ],\n                          \"maximum\": 4294967295.0,\n                          \"minimum\": 1.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::optional\": true,\n                            \"docs::human_name\": \"Interval Ms\"\n                          }\n                        },\n                        \"timestamp\": {\n                          \"title\": \"The timestamp of when the metric was created.\",\n                          \"description\": \"Metrics may sometimes have no timestamp, or have no meaningful value if the metric is an\\naggregation or transformed heavily enough from its original form such that the original\\ntimestamp would not represent a meaningful value.\",\n                          \"type\": [\n                            \"string\",\n                            \"null\"\n                          ],\n                          \"_metadata\": {\n                            \"docs::optional\": true,\n                            \"docs::human_name\": \"Timestamp\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"description\": \"Metric value.\\nContainer for the actual value of a metric.\",\n                      \"oneOf\": [\n                        {\n                          \"description\": \"A cumulative numerical value that can only increase or be reset to zero.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"counter\"\n                          ],\n                          \"properties\": {\n                            \"counter\": {\n                              \"type\": \"object\",\n                              \"required\": [\n                                \"value\"\n                              ],\n                              \"properties\": {\n                                \"value\": {\n                                  \"description\": \"The value of the counter.\",\n                                  \"type\": \"number\",\n                                  \"maximum\": 9007199254740991.0,\n                                  \"minimum\": -9007199254740991.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"float\",\n                                    \"docs::human_name\": \"Value\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Counter\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Counter\",\n                            \"docs::human_name\": \"Counter\"\n                          }\n                        },\n                        {\n                          \"description\": \"A single numerical value that can arbitrarily go up and down.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"gauge\"\n                          ],\n                          \"properties\": {\n                            \"gauge\": {\n                              \"type\": \"object\",\n                              \"required\": [\n                                \"value\"\n                              ],\n                              \"properties\": {\n                                \"value\": {\n                                  \"description\": \"The value of the gauge.\",\n                                  \"type\": \"number\",\n                                  \"maximum\": 9007199254740991.0,\n                                  \"minimum\": -9007199254740991.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"float\",\n                                    \"docs::human_name\": \"Value\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Gauge\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Gauge\",\n                            \"docs::human_name\": \"Gauge\"\n                          }\n                        },\n                        {\n                          \"description\": \"A set of (unordered) unique values for a key.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"set\"\n                          ],\n                          \"properties\": {\n                            \"set\": {\n                              \"type\": \"object\",\n                              \"required\": [\n                                \"values\"\n                              ],\n                              \"properties\": {\n                                \"values\": {\n                                  \"description\": \"The values in the set.\",\n                                  \"type\": \"array\",\n                                  \"items\": {\n                                    \"type\": \"string\"\n                                  },\n                                  \"uniqueItems\": true,\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Values\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Set\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Set\",\n                            \"docs::human_name\": \"Set\"\n                          }\n                        },\n                        {\n                          \"description\": \"A set of observations without any aggregation or sampling.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"distribution\"\n                          ],\n                          \"properties\": {\n                            \"distribution\": {\n                              \"type\": \"object\",\n                              \"required\": [\n                                \"samples\",\n                                \"statistic\"\n                              ],\n                              \"properties\": {\n                                \"samples\": {\n                                  \"description\": \"The observed values within this distribution.\",\n                                  \"type\": \"array\",\n                                  \"items\": {\n                                    \"description\": \"A single observation.\",\n                                    \"type\": \"object\",\n                                    \"required\": [\n                                      \"rate\",\n                                      \"value\"\n                                    ],\n                                    \"properties\": {\n                                      \"rate\": {\n                                        \"description\": \"The rate at which the value was observed.\",\n                                        \"type\": \"integer\",\n                                        \"maximum\": 4294967295.0,\n                                        \"minimum\": 0.0,\n                                        \"_metadata\": {\n                                          \"docs::numeric_type\": \"uint\",\n                                          \"docs::human_name\": \"Rate\"\n                                        }\n                                      },\n                                      \"value\": {\n                                        \"description\": \"The value of the observation.\",\n                                        \"type\": \"number\",\n                                        \"maximum\": 9007199254740991.0,\n                                        \"minimum\": -9007199254740991.0,\n                                        \"_metadata\": {\n                                          \"docs::numeric_type\": \"float\",\n                                          \"docs::human_name\": \"Value\"\n                                        }\n                                      }\n                                    },\n                                    \"unevaluatedProperties\": false\n                                  },\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Samples\"\n                                  }\n                                },\n                                \"statistic\": {\n                                  \"description\": \"The type of statistics to derive for this distribution.\",\n                                  \"oneOf\": [\n                                    {\n                                      \"description\": \"A histogram representation.\",\n                                      \"const\": \"histogram\",\n                                      \"_metadata\": {\n                                        \"logical_name\": \"Histogram\",\n                                        \"docs::human_name\": \"Histogram\"\n                                      }\n                                    },\n                                    {\n                                      \"description\": \"Corresponds to Datadog's Distribution Metric\\n<https://docs.datadoghq.com/developers/metrics/types/?tab=distribution#definition>\",\n                                      \"const\": \"summary\",\n                                      \"_metadata\": {\n                                        \"logical_name\": \"Summary\",\n                                        \"docs::human_name\": \"Summary\"\n                                      }\n                                    }\n                                  ],\n                                  \"unevaluatedProperties\": false,\n                                  \"_metadata\": {\n                                    \"docs::enum_tagging\": \"external\",\n                                    \"docs::human_name\": \"Statistic\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Distribution\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Distribution\",\n                            \"docs::human_name\": \"Distribution\"\n                          }\n                        },\n                        {\n                          \"title\": \"A set of observations which are counted into buckets.\",\n                          \"description\": \"It also contains the total count of all observations and their sum to allow calculating the mean.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"aggregated_histogram\"\n                          ],\n                          \"properties\": {\n                            \"aggregated_histogram\": {\n                              \"type\": \"object\",\n                              \"required\": [\n                                \"buckets\",\n                                \"count\",\n                                \"sum\"\n                              ],\n                              \"properties\": {\n                                \"buckets\": {\n                                  \"title\": \"A histogram bucket.\",\n                                  \"description\": \"The buckets within this histogram.\",\n                                  \"type\": \"array\",\n                                  \"items\": {\n                                    \"title\": \"A histogram bucket.\",\n                                    \"description\": \"Histogram buckets represent the `count` of observations where the value of the observations does\\nnot exceed the specified `upper_limit`.\",\n                                    \"type\": \"object\",\n                                    \"required\": [\n                                      \"count\",\n                                      \"upper_limit\"\n                                    ],\n                                    \"properties\": {\n                                      \"count\": {\n                                        \"description\": \"The number of values tracked in this bucket.\",\n                                        \"type\": \"integer\",\n                                        \"maximum\": 9007199254740991.0,\n                                        \"minimum\": 0.0,\n                                        \"_metadata\": {\n                                          \"docs::numeric_type\": \"uint\",\n                                          \"docs::human_name\": \"Count\"\n                                        }\n                                      },\n                                      \"upper_limit\": {\n                                        \"description\": \"The upper limit of values in the bucket.\",\n                                        \"type\": \"number\",\n                                        \"maximum\": 9007199254740991.0,\n                                        \"minimum\": -9007199254740991.0,\n                                        \"_metadata\": {\n                                          \"docs::numeric_type\": \"float\",\n                                          \"docs::human_name\": \"Upper Limit\"\n                                        }\n                                      }\n                                    },\n                                    \"unevaluatedProperties\": false\n                                  },\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Buckets\"\n                                  }\n                                },\n                                \"count\": {\n                                  \"description\": \"The total number of observations contained within this histogram.\",\n                                  \"type\": \"integer\",\n                                  \"maximum\": 9007199254740991.0,\n                                  \"minimum\": 0.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"uint\",\n                                    \"docs::human_name\": \"Count\"\n                                  }\n                                },\n                                \"sum\": {\n                                  \"description\": \"The sum of all observations contained within this histogram.\",\n                                  \"type\": \"number\",\n                                  \"maximum\": 9007199254740991.0,\n                                  \"minimum\": -9007199254740991.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"float\",\n                                    \"docs::human_name\": \"Sum\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Aggregated Histogram\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"AggregatedHistogram\",\n                            \"docs::human_name\": \"Aggregated Histogram\"\n                          }\n                        },\n                        {\n                          \"title\": \"A set of observations which are represented by quantiles.\",\n                          \"description\": \"Each quantile contains the upper value of the quantile (0 <= φ <= 1). It also contains the total count of all\\nobservations and their sum to allow calculating the mean.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"aggregated_summary\"\n                          ],\n                          \"properties\": {\n                            \"aggregated_summary\": {\n                              \"type\": \"object\",\n                              \"required\": [\n                                \"count\",\n                                \"quantiles\",\n                                \"sum\"\n                              ],\n                              \"properties\": {\n                                \"count\": {\n                                  \"description\": \"The total number of observations contained within this summary.\",\n                                  \"type\": \"integer\",\n                                  \"maximum\": 9007199254740991.0,\n                                  \"minimum\": 0.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"uint\",\n                                    \"docs::human_name\": \"Count\"\n                                  }\n                                },\n                                \"quantiles\": {\n                                  \"title\": \"A single quantile observation.\",\n                                  \"description\": \"The quantiles measured from this summary.\",\n                                  \"type\": \"array\",\n                                  \"items\": {\n                                    \"title\": \"A single quantile observation.\",\n                                    \"description\": \"Quantiles themselves are \\\"cut points dividing the range of a probability distribution into\\ncontinuous intervals with equal probabilities\\\". [[1][quantiles_wikipedia]].\\n\\nWe use quantiles to measure the value along these probability distributions for representing\\nclient-side aggregations of distributions, which represent a collection of observations over a\\nspecific time window.\\n\\nIn general, we typically use the term \\\"quantile\\\" to represent the concept of _percentiles_,\\nwhich deal with whole integers -- 0, 1, 2, .., 99, 100 -- even though quantiles are\\nfloating-point numbers and can represent higher-precision cut points, such as 0.9999, or the\\n99.99th percentile.\\n\\n[quantiles_wikipedia]: https://en.wikipedia.org/wiki/Quantile\",\n                                    \"type\": \"object\",\n                                    \"required\": [\n                                      \"quantile\",\n                                      \"value\"\n                                    ],\n                                    \"properties\": {\n                                      \"quantile\": {\n                                        \"title\": \"The value of the quantile.\",\n                                        \"description\": \"This value must be between 0.0 and 1.0, inclusive.\",\n                                        \"type\": \"number\",\n                                        \"maximum\": 9007199254740991.0,\n                                        \"minimum\": -9007199254740991.0,\n                                        \"_metadata\": {\n                                          \"docs::numeric_type\": \"float\",\n                                          \"docs::human_name\": \"Quantile\"\n                                        }\n                                      },\n                                      \"value\": {\n                                        \"description\": \"The estimated value of the given quantile within the probability distribution.\",\n                                        \"type\": \"number\",\n                                        \"maximum\": 9007199254740991.0,\n                                        \"minimum\": -9007199254740991.0,\n                                        \"_metadata\": {\n                                          \"docs::numeric_type\": \"float\",\n                                          \"docs::human_name\": \"Value\"\n                                        }\n                                      }\n                                    },\n                                    \"unevaluatedProperties\": false\n                                  },\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Quantiles\"\n                                  }\n                                },\n                                \"sum\": {\n                                  \"description\": \"The sum of all observations contained within this histogram.\",\n                                  \"type\": \"number\",\n                                  \"maximum\": 9007199254740991.0,\n                                  \"minimum\": -9007199254740991.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"float\",\n                                    \"docs::human_name\": \"Sum\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Aggregated Summary\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"AggregatedSummary\",\n                            \"docs::human_name\": \"Aggregated Summary\"\n                          }\n                        },\n                        {\n                          \"title\": \"A data structure that can answer questions about the cumulative distribution of the contained samples in\\nspace-efficient way.\",\n                          \"description\": \"Sketches represent the data in a way that queries over it have bounded error guarantees without needing to hold\\nevery single sample in memory. They are also, typically, able to be merged with other sketches of the same type\\nsuch that client-side _and_ server-side aggregation can be accomplished without loss of accuracy in the queries.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"sketch\"\n                          ],\n                          \"properties\": {\n                            \"sketch\": {\n                              \"type\": \"object\",\n                              \"required\": [\n                                \"sketch\"\n                              ],\n                              \"properties\": {\n                                \"sketch\": {\n                                  \"description\": \"A generalized metrics sketch.\",\n                                  \"oneOf\": [\n                                    {\n                                      \"title\": \"[DDSketch][ddsketch] implementation based on the [Datadog Agent][ddagent].\",\n                                      \"description\": \"While DDSketch has open-source implementations based on the white paper, the version used in\\nthe Datadog Agent itself is subtly different. This version is suitable for sending directly\\nto Datadog's sketch ingest endpoint.\\n\\n[ddsketch]: https://www.vldb.org/pvldb/vol12/p2195-masson.pdf\\n[ddagent]: https://github.com/DataDog/datadog-agent\",\n                                      \"type\": \"object\",\n                                      \"required\": [\n                                        \"AgentDDSketch\"\n                                      ],\n                                      \"properties\": {\n                                        \"AgentDDSketch\": {\n                                          \"title\": \"[DDSketch][ddsketch] implementation based on the [Datadog Agent][ddagent].\",\n                                          \"description\": \"This implementation is subtly different from the open-source implementations of `DDSketch`, as\\nDatadog made some slight tweaks to configuration values and in-memory layout to optimize it for\\ninsertion performance within the agent.\\n\\nWe've mimicked the agent version of `DDSketch` here in order to support a future where we can\\ntake sketches shipped by the agent, handle them internally, merge them, and so on, without any\\nloss of accuracy, eventually forwarding them to Datadog ourselves.\\n\\nAs such, this implementation is constrained in the same ways: the configuration parameters\\ncannot be changed, the collapsing strategy is fixed, and we support a limited number of methods\\nfor inserting into the sketch.\\n\\nImportantly, we have a special function, again taken from the agent version, to allow us to\\ninterpolate histograms, specifically our own aggregated histograms, into a sketch so that we can\\nemit useful default quantiles, rather than having to ship the buckets -- upper bound and count\\n-- to a downstream system that might have no native way to do the same thing, basically\\nproviding no value as they have no way to render useful data from them.\\n\\n[ddsketch]: https://www.vldb.org/pvldb/vol12/p2195-masson.pdf\\n[ddagent]: https://github.com/DataDog/datadog-agent\",\n                                          \"type\": \"object\",\n                                          \"required\": [\n                                            \"avg\",\n                                            \"bins\",\n                                            \"count\",\n                                            \"max\",\n                                            \"min\",\n                                            \"sum\"\n                                          ],\n                                          \"properties\": {\n                                            \"avg\": {\n                                              \"description\": \"The average value of all observations within the sketch.\",\n                                              \"type\": \"number\",\n                                              \"maximum\": 9007199254740991.0,\n                                              \"minimum\": -9007199254740991.0,\n                                              \"_metadata\": {\n                                                \"docs::numeric_type\": \"float\",\n                                                \"docs::human_name\": \"Avg\"\n                                              }\n                                            },\n                                            \"bins\": {\n                                              \"title\": \"A split representation of sketch bins.\",\n                                              \"description\": \"The bins within the sketch.\",\n                                              \"type\": \"object\",\n                                              \"required\": [\n                                                \"k\",\n                                                \"n\"\n                                              ],\n                                              \"properties\": {\n                                                \"k\": {\n                                                  \"description\": \"The bin keys.\",\n                                                  \"type\": \"array\",\n                                                  \"items\": {\n                                                    \"type\": \"integer\",\n                                                    \"maximum\": 32767.0,\n                                                    \"minimum\": -32768.0,\n                                                    \"_metadata\": {\n                                                      \"docs::numeric_type\": \"int\"\n                                                    }\n                                                  },\n                                                  \"_metadata\": {\n                                                    \"docs::numeric_type\": \"int\",\n                                                    \"docs::human_name\": \"K\"\n                                                  }\n                                                },\n                                                \"n\": {\n                                                  \"description\": \"The bin counts.\",\n                                                  \"type\": \"array\",\n                                                  \"items\": {\n                                                    \"type\": \"integer\",\n                                                    \"maximum\": 65535.0,\n                                                    \"minimum\": 0.0,\n                                                    \"_metadata\": {\n                                                      \"docs::numeric_type\": \"uint\"\n                                                    }\n                                                  },\n                                                  \"_metadata\": {\n                                                    \"docs::numeric_type\": \"uint\",\n                                                    \"docs::human_name\": \"N\"\n                                                  }\n                                                }\n                                              },\n                                              \"unevaluatedProperties\": false,\n                                              \"_metadata\": {\n                                                \"docs::human_name\": \"Bins\"\n                                              }\n                                            },\n                                            \"count\": {\n                                              \"description\": \"The number of observations within the sketch.\",\n                                              \"type\": \"integer\",\n                                              \"maximum\": 4294967295.0,\n                                              \"minimum\": 0.0,\n                                              \"_metadata\": {\n                                                \"docs::numeric_type\": \"uint\",\n                                                \"docs::human_name\": \"Count\"\n                                              }\n                                            },\n                                            \"max\": {\n                                              \"description\": \"The maximum value of all observations within the sketch.\",\n                                              \"type\": \"number\",\n                                              \"maximum\": 9007199254740991.0,\n                                              \"minimum\": -9007199254740991.0,\n                                              \"_metadata\": {\n                                                \"docs::numeric_type\": \"float\",\n                                                \"docs::human_name\": \"Max\"\n                                              }\n                                            },\n                                            \"min\": {\n                                              \"description\": \"The minimum value of all observations within the sketch.\",\n                                              \"type\": \"number\",\n                                              \"maximum\": 9007199254740991.0,\n                                              \"minimum\": -9007199254740991.0,\n                                              \"_metadata\": {\n                                                \"docs::numeric_type\": \"float\",\n                                                \"docs::human_name\": \"Min\"\n                                              }\n                                            },\n                                            \"sum\": {\n                                              \"description\": \"The sum of all observations within the sketch.\",\n                                              \"type\": \"number\",\n                                              \"maximum\": 9007199254740991.0,\n                                              \"minimum\": -9007199254740991.0,\n                                              \"_metadata\": {\n                                                \"docs::numeric_type\": \"float\",\n                                                \"docs::human_name\": \"Sum\"\n                                              }\n                                            }\n                                          },\n                                          \"unevaluatedProperties\": false,\n                                          \"_metadata\": {\n                                            \"docs::human_name\": \"Agent Dd Sketch\"\n                                          }\n                                        }\n                                      },\n                                      \"_metadata\": {\n                                        \"logical_name\": \"AgentDDSketch\",\n                                        \"docs::human_name\": \"Agent Dd Sketch\"\n                                      }\n                                    }\n                                  ],\n                                  \"unevaluatedProperties\": false,\n                                  \"_metadata\": {\n                                    \"docs::enum_tagging\": \"external\",\n                                    \"docs::human_name\": \"Sketch\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Sketch\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Sketch\",\n                            \"docs::human_name\": \"Sketch\"\n                          }\n                        }\n                      ],\n                      \"_metadata\": {\n                        \"docs::enum_tagging\": \"external\"\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Metric\"\n          }\n        },\n        \"source\": {\n          \"title\": \"The vrl expression to generate the input event.\",\n          \"description\": \"Only relevant when `type` is `vrl`.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Source\"\n          }\n        },\n        \"type\": {\n          \"title\": \"The type of the input event.\",\n          \"description\": \"Can be either `raw`, `vrl`, `log`, or `metric.\",\n          \"default\": \"raw\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Type\"\n          }\n        },\n        \"value\": {\n          \"title\": \"The raw string value to use as the input event.\",\n          \"description\": \"Use this only when the input event should be a raw event (i.e. unprocessed/undecoded log\\nevent) and when the input type is set to `raw`.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Value\"\n          }\n        }\n      }\n    },\n    \"vector::config::id::Inputs<alloc::string::String>\": {\n      \"title\": \"A list of upstream [source][sources] or [transform][transforms] IDs.\",\n      \"description\": \"Wildcards (`*`) are supported.\\n\\nSee [configuration][configuration] for more info.\\n\\n[sources]: https://vector.dev/docs/reference/configuration/sources/\\n[transforms]: https://vector.dev/docs/reference/configuration/transforms/\\n[configuration]: https://vector.dev/docs/reference/configuration/\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"_metadata\": {\n        \"docs::examples\": [\n          \"my-source-or-transform-id\",\n          \"prefix-*\"\n        ]\n      }\n    },\n    \"vector::config::sink::SinkOuter<alloc::string::String>\": {\n      \"description\": \"Fully resolved sink component.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"inputs\"\n          ],\n          \"properties\": {\n            \"buffer\": {\n              \"title\": \"Configures the buffering behavior for this sink.\",\n              \"description\": \"More information about the individual buffer types, and buffer behavior, can be found in the\\n[Buffering Model][buffering_model] section.\\n\\n[buffering_model]: /docs/about/under-the-hood/architecture/buffering-model/\",\n              \"default\": {\n                \"type\": \"memory\",\n                \"max_events\": 500,\n                \"when_full\": \"block\"\n              },\n              \"oneOf\": [\n                {\n                  \"description\": \"A single stage buffer topology.\",\n                  \"oneOf\": [\n                    {\n                      \"title\": \"Events are buffered in memory.\",\n                      \"description\": \"This is more performant, but less durable. Data will be lost if Vector is restarted\\nforcefully or crashes.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"type\"\n                      ],\n                      \"properties\": {\n                        \"max_events\": {\n                          \"description\": \"The maximum number of events allowed in the buffer.\",\n                          \"default\": 500,\n                          \"type\": \"integer\",\n                          \"maximum\": 9007199254740991.0,\n                          \"minimum\": 1.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::human_name\": \"Max Events\"\n                          }\n                        },\n                        \"type\": {\n                          \"title\": \"Events are buffered in memory.\",\n                          \"description\": \"This is more performant, but less durable. Data will be lost if Vector is restarted\\nforcefully or crashes.\",\n                          \"const\": \"memory\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Type\"\n                          }\n                        },\n                        \"when_full\": {\n                          \"description\": \"Event handling behavior when a buffer is full.\",\n                          \"default\": \"block\",\n                          \"oneOf\": [\n                            {\n                              \"title\": \"Wait for free space in the buffer.\",\n                              \"description\": \"This applies backpressure up the topology, signalling that sources should slow down\\nthe acceptance/consumption of events. This means that while no data is lost, data will pile\\nup at the edge.\",\n                              \"const\": \"block\",\n                              \"_metadata\": {\n                                \"logical_name\": \"Block\",\n                                \"docs::human_name\": \"Block\"\n                              }\n                            },\n                            {\n                              \"title\": \"Drops the event instead of waiting for free space in buffer.\",\n                              \"description\": \"The event will be intentionally dropped. This mode is typically used when performance is the\\nhighest priority, and it is preferable to temporarily lose events rather than cause a\\nslowdown in the acceptance/consumption of events.\",\n                              \"const\": \"drop_newest\",\n                              \"_metadata\": {\n                                \"logical_name\": \"DropNewest\",\n                                \"docs::human_name\": \"Drop Newest\"\n                              }\n                            },\n                            {\n                              \"title\": \"Overflows to the next stage in the buffer topology.\",\n                              \"description\": \"If the current buffer stage is full, attempt to send this event to the next buffer stage.\\nThat stage may also be configured overflow, and so on, but ultimately the last stage in a\\nbuffer topology must use one of the other handling behaviors. This means that next stage may\\npotentially be able to buffer the event, but it may also block or drop the event.\\n\\nThis mode can only be used when two or more buffer stages are configured.\",\n                              \"const\": \"overflow\",\n                              \"_metadata\": {\n                                \"docs::hidden\": true,\n                                \"logical_name\": \"Overflow\",\n                                \"docs::human_name\": \"Overflow\"\n                              }\n                            }\n                          ],\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::enum_tagging\": \"external\",\n                            \"docs::human_name\": \"When Full\"\n                          }\n                        }\n                      },\n                      \"_metadata\": {\n                        \"logical_name\": \"Memory\",\n                        \"docs::human_name\": \"Memory\"\n                      }\n                    },\n                    {\n                      \"title\": \"Events are buffered on disk.\",\n                      \"description\": \"This is less performant, but more durable. Data that has been synchronized to disk will not\\nbe lost if Vector is restarted forcefully or crashes.\\n\\nData is synchronized to disk every 500ms.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"max_size\",\n                        \"type\"\n                      ],\n                      \"properties\": {\n                        \"max_size\": {\n                          \"title\": \"The maximum size of the buffer on disk.\",\n                          \"description\": \"Must be at least ~256 megabytes (268435488 bytes).\",\n                          \"type\": \"integer\",\n                          \"maximum\": 9007199254740991.0,\n                          \"minimum\": 268435488.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::type_unit\": \"bytes\",\n                            \"docs::human_name\": \"Max Size\"\n                          }\n                        },\n                        \"type\": {\n                          \"title\": \"Events are buffered on disk.\",\n                          \"description\": \"This is less performant, but more durable. Data that has been synchronized to disk will not\\nbe lost if Vector is restarted forcefully or crashes.\\n\\nData is synchronized to disk every 500ms.\",\n                          \"const\": \"disk\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Type\"\n                          }\n                        },\n                        \"when_full\": {\n                          \"description\": \"Event handling behavior when a buffer is full.\",\n                          \"default\": \"block\",\n                          \"oneOf\": [\n                            {\n                              \"title\": \"Wait for free space in the buffer.\",\n                              \"description\": \"This applies backpressure up the topology, signalling that sources should slow down\\nthe acceptance/consumption of events. This means that while no data is lost, data will pile\\nup at the edge.\",\n                              \"const\": \"block\",\n                              \"_metadata\": {\n                                \"logical_name\": \"Block\",\n                                \"docs::human_name\": \"Block\"\n                              }\n                            },\n                            {\n                              \"title\": \"Drops the event instead of waiting for free space in buffer.\",\n                              \"description\": \"The event will be intentionally dropped. This mode is typically used when performance is the\\nhighest priority, and it is preferable to temporarily lose events rather than cause a\\nslowdown in the acceptance/consumption of events.\",\n                              \"const\": \"drop_newest\",\n                              \"_metadata\": {\n                                \"logical_name\": \"DropNewest\",\n                                \"docs::human_name\": \"Drop Newest\"\n                              }\n                            },\n                            {\n                              \"title\": \"Overflows to the next stage in the buffer topology.\",\n                              \"description\": \"If the current buffer stage is full, attempt to send this event to the next buffer stage.\\nThat stage may also be configured overflow, and so on, but ultimately the last stage in a\\nbuffer topology must use one of the other handling behaviors. This means that next stage may\\npotentially be able to buffer the event, but it may also block or drop the event.\\n\\nThis mode can only be used when two or more buffer stages are configured.\",\n                              \"const\": \"overflow\",\n                              \"_metadata\": {\n                                \"docs::hidden\": true,\n                                \"logical_name\": \"Overflow\",\n                                \"docs::human_name\": \"Overflow\"\n                              }\n                            }\n                          ],\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::enum_tagging\": \"external\",\n                            \"docs::human_name\": \"When Full\"\n                          }\n                        }\n                      },\n                      \"_metadata\": {\n                        \"logical_name\": \"DiskV2\",\n                        \"docs::human_name\": \"Disk V2\"\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Single\",\n                    \"docs::enum_tag_description\": \"The type of buffer to use.\",\n                    \"docs::enum_tagging\": \"internal\",\n                    \"docs::enum_tag_field\": \"type\",\n                    \"docs::human_name\": \"Single\"\n                  }\n                },\n                {\n                  \"description\": \"A chained buffer topology.\",\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"description\": \"A specific type of buffer stage.\",\n                    \"oneOf\": [\n                      {\n                        \"title\": \"Events are buffered in memory.\",\n                        \"description\": \"This is more performant, but less durable. Data will be lost if Vector is restarted\\nforcefully or crashes.\",\n                        \"type\": \"object\",\n                        \"required\": [\n                          \"type\"\n                        ],\n                        \"properties\": {\n                          \"max_events\": {\n                            \"description\": \"The maximum number of events allowed in the buffer.\",\n                            \"default\": 500,\n                            \"type\": \"integer\",\n                            \"maximum\": 9007199254740991.0,\n                            \"minimum\": 1.0,\n                            \"_metadata\": {\n                              \"docs::numeric_type\": \"uint\",\n                              \"docs::human_name\": \"Max Events\"\n                            }\n                          },\n                          \"type\": {\n                            \"title\": \"Events are buffered in memory.\",\n                            \"description\": \"This is more performant, but less durable. Data will be lost if Vector is restarted\\nforcefully or crashes.\",\n                            \"const\": \"memory\",\n                            \"_metadata\": {\n                              \"docs::human_name\": \"Type\"\n                            }\n                          },\n                          \"when_full\": {\n                            \"description\": \"Event handling behavior when a buffer is full.\",\n                            \"default\": \"block\",\n                            \"oneOf\": [\n                              {\n                                \"title\": \"Wait for free space in the buffer.\",\n                                \"description\": \"This applies backpressure up the topology, signalling that sources should slow down\\nthe acceptance/consumption of events. This means that while no data is lost, data will pile\\nup at the edge.\",\n                                \"const\": \"block\",\n                                \"_metadata\": {\n                                  \"logical_name\": \"Block\",\n                                  \"docs::human_name\": \"Block\"\n                                }\n                              },\n                              {\n                                \"title\": \"Drops the event instead of waiting for free space in buffer.\",\n                                \"description\": \"The event will be intentionally dropped. This mode is typically used when performance is the\\nhighest priority, and it is preferable to temporarily lose events rather than cause a\\nslowdown in the acceptance/consumption of events.\",\n                                \"const\": \"drop_newest\",\n                                \"_metadata\": {\n                                  \"logical_name\": \"DropNewest\",\n                                  \"docs::human_name\": \"Drop Newest\"\n                                }\n                              },\n                              {\n                                \"title\": \"Overflows to the next stage in the buffer topology.\",\n                                \"description\": \"If the current buffer stage is full, attempt to send this event to the next buffer stage.\\nThat stage may also be configured overflow, and so on, but ultimately the last stage in a\\nbuffer topology must use one of the other handling behaviors. This means that next stage may\\npotentially be able to buffer the event, but it may also block or drop the event.\\n\\nThis mode can only be used when two or more buffer stages are configured.\",\n                                \"const\": \"overflow\",\n                                \"_metadata\": {\n                                  \"docs::hidden\": true,\n                                  \"logical_name\": \"Overflow\",\n                                  \"docs::human_name\": \"Overflow\"\n                                }\n                              }\n                            ],\n                            \"unevaluatedProperties\": false,\n                            \"_metadata\": {\n                              \"docs::enum_tagging\": \"external\",\n                              \"docs::human_name\": \"When Full\"\n                            }\n                          }\n                        },\n                        \"_metadata\": {\n                          \"logical_name\": \"Memory\",\n                          \"docs::human_name\": \"Memory\"\n                        }\n                      },\n                      {\n                        \"title\": \"Events are buffered on disk.\",\n                        \"description\": \"This is less performant, but more durable. Data that has been synchronized to disk will not\\nbe lost if Vector is restarted forcefully or crashes.\\n\\nData is synchronized to disk every 500ms.\",\n                        \"type\": \"object\",\n                        \"required\": [\n                          \"max_size\",\n                          \"type\"\n                        ],\n                        \"properties\": {\n                          \"max_size\": {\n                            \"title\": \"The maximum size of the buffer on disk.\",\n                            \"description\": \"Must be at least ~256 megabytes (268435488 bytes).\",\n                            \"type\": \"integer\",\n                            \"maximum\": 9007199254740991.0,\n                            \"minimum\": 268435488.0,\n                            \"_metadata\": {\n                              \"docs::numeric_type\": \"uint\",\n                              \"docs::type_unit\": \"bytes\",\n                              \"docs::human_name\": \"Max Size\"\n                            }\n                          },\n                          \"type\": {\n                            \"title\": \"Events are buffered on disk.\",\n                            \"description\": \"This is less performant, but more durable. Data that has been synchronized to disk will not\\nbe lost if Vector is restarted forcefully or crashes.\\n\\nData is synchronized to disk every 500ms.\",\n                            \"const\": \"disk\",\n                            \"_metadata\": {\n                              \"docs::human_name\": \"Type\"\n                            }\n                          },\n                          \"when_full\": {\n                            \"description\": \"Event handling behavior when a buffer is full.\",\n                            \"default\": \"block\",\n                            \"oneOf\": [\n                              {\n                                \"title\": \"Wait for free space in the buffer.\",\n                                \"description\": \"This applies backpressure up the topology, signalling that sources should slow down\\nthe acceptance/consumption of events. This means that while no data is lost, data will pile\\nup at the edge.\",\n                                \"const\": \"block\",\n                                \"_metadata\": {\n                                  \"logical_name\": \"Block\",\n                                  \"docs::human_name\": \"Block\"\n                                }\n                              },\n                              {\n                                \"title\": \"Drops the event instead of waiting for free space in buffer.\",\n                                \"description\": \"The event will be intentionally dropped. This mode is typically used when performance is the\\nhighest priority, and it is preferable to temporarily lose events rather than cause a\\nslowdown in the acceptance/consumption of events.\",\n                                \"const\": \"drop_newest\",\n                                \"_metadata\": {\n                                  \"logical_name\": \"DropNewest\",\n                                  \"docs::human_name\": \"Drop Newest\"\n                                }\n                              },\n                              {\n                                \"title\": \"Overflows to the next stage in the buffer topology.\",\n                                \"description\": \"If the current buffer stage is full, attempt to send this event to the next buffer stage.\\nThat stage may also be configured overflow, and so on, but ultimately the last stage in a\\nbuffer topology must use one of the other handling behaviors. This means that next stage may\\npotentially be able to buffer the event, but it may also block or drop the event.\\n\\nThis mode can only be used when two or more buffer stages are configured.\",\n                                \"const\": \"overflow\",\n                                \"_metadata\": {\n                                  \"docs::hidden\": true,\n                                  \"logical_name\": \"Overflow\",\n                                  \"docs::human_name\": \"Overflow\"\n                                }\n                              }\n                            ],\n                            \"unevaluatedProperties\": false,\n                            \"_metadata\": {\n                              \"docs::enum_tagging\": \"external\",\n                              \"docs::human_name\": \"When Full\"\n                            }\n                          }\n                        },\n                        \"_metadata\": {\n                          \"logical_name\": \"DiskV2\",\n                          \"docs::human_name\": \"Disk V2\"\n                        }\n                      }\n                    ],\n                    \"unevaluatedProperties\": false,\n                    \"_metadata\": {\n                      \"docs::enum_tag_description\": \"The type of buffer to use.\",\n                      \"docs::enum_tagging\": \"internal\",\n                      \"docs::enum_tag_field\": \"type\"\n                    }\n                  },\n                  \"_metadata\": {\n                    \"docs::enum_tag_description\": \"The type of buffer to use.\",\n                    \"docs::enum_tagging\": \"internal\",\n                    \"docs::enum_tag_field\": \"type\",\n                    \"logical_name\": \"Chained\",\n                    \"docs::human_name\": \"Chained\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"untagged\",\n                \"docs::human_name\": \"Buffer\"\n              }\n            },\n            \"healthcheck\": {\n              \"description\": \"Healthcheck configuration.\",\n              \"default\": {\n                \"enabled\": true,\n                \"uri\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"enabled\": {\n                  \"description\": \"Whether or not to check the health of the sink when Vector starts up.\",\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Enabled\"\n                  }\n                },\n                \"uri\": {\n                  \"title\": \"The full URI to make HTTP healthcheck requests to.\",\n                  \"description\": \"This must be a valid URI, which requires at least the scheme and host. All other\\ncomponents -- port, path, etc -- are allowed as well.\",\n                  \"format\": \"uri\",\n                  \"$ref\": \"#/definitions/core::option::Option<vector::sinks::util::uri::UriSerde>\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"URI\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Healthcheck\"\n              }\n            },\n            \"healthcheck_uri\": {\n              \"title\": \"The full URI to make HTTP healthcheck requests to.\",\n              \"description\": \"This must be a valid URI, which requires at least the scheme and host. All other\\ncomponents -- port, path, etc -- are allowed as well.\",\n              \"deprecated\": true,\n              \"format\": \"uri\",\n              \"$ref\": \"#/definitions/core::option::Option<vector::sinks::util::uri::UriSerde>\",\n              \"_metadata\": {\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Healthcheck URI\"\n              }\n            },\n            \"inputs\": {\n              \"title\": \"A list of upstream [source][sources] or [transform][transforms] IDs.\",\n              \"description\": \"Wildcards (`*`) are supported.\\n\\nSee [configuration][configuration] for more info.\\n\\n[sources]: https://vector.dev/docs/reference/configuration/sources/\\n[transforms]: https://vector.dev/docs/reference/configuration/transforms/\\n[configuration]: https://vector.dev/docs/reference/configuration/\",\n              \"$ref\": \"#/definitions/vector::config::id::Inputs<alloc::string::String>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Inputs\"\n              }\n            },\n            \"proxy\": {\n              \"title\": \"Proxy configuration.\",\n              \"description\": \"Configure to proxy traffic through an HTTP(S) proxy when making external requests.\\n\\nSimilar to common proxy configuration convention, you can set different proxies\\nto use based on the type of traffic being proxied, as well as set specific hosts that\\nshould not be proxied.\",\n              \"default\": {},\n              \"$ref\": \"#/definitions/vector_core::config::proxy::ProxyConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Proxy\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configurable sinks in Vector.\",\n          \"$ref\": \"#/definitions/vector::sinks::Sinks\",\n          \"_metadata\": {\n            \"docs::hidden\": true\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::component_base_type\": \"sink\"\n      }\n    },\n    \"vector::config::source::SourceOuter\": {\n      \"description\": \"Fully resolved source component.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"proxy\": {\n              \"title\": \"Proxy configuration.\",\n              \"description\": \"Configure to proxy traffic through an HTTP(S) proxy when making external requests.\\n\\nSimilar to common proxy configuration convention, you can set different proxies\\nto use based on the type of traffic being proxied, as well as set specific hosts that\\nshould not be proxied.\",\n              \"default\": {},\n              \"$ref\": \"#/definitions/vector_core::config::proxy::ProxyConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Proxy\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configurable sources in Vector.\",\n          \"$ref\": \"#/definitions/vector::sources::Sources\",\n          \"_metadata\": {\n            \"docs::hidden\": true\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::component_base_type\": \"source\"\n      }\n    },\n    \"vector::config::transform::TransformOuter<alloc::string::String>\": {\n      \"description\": \"Fully resolved transform component.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"inputs\"\n          ],\n          \"properties\": {\n            \"inputs\": {\n              \"title\": \"A list of upstream [source][sources] or [transform][transforms] IDs.\",\n              \"description\": \"Wildcards (`*`) are supported.\\n\\nSee [configuration][configuration] for more info.\\n\\n[sources]: https://vector.dev/docs/reference/configuration/sources/\\n[transforms]: https://vector.dev/docs/reference/configuration/transforms/\\n[configuration]: https://vector.dev/docs/reference/configuration/\",\n              \"$ref\": \"#/definitions/vector::config::id::Inputs<alloc::string::String>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Inputs\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configurable transforms in Vector.\",\n          \"$ref\": \"#/definitions/vector::transforms::Transforms\",\n          \"_metadata\": {\n            \"docs::hidden\": true\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::component_base_type\": \"transform\"\n      }\n    },\n    \"vector::config::unit_test::unit_test_components::UnitTestSinkConfig\": {\n      \"description\": \"Configuration for the `unit_test` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"test_name\",\n        \"transform_ids\"\n      ],\n      \"properties\": {\n        \"test_name\": {\n          \"description\": \"Name of the test that this sink is being used for.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Test Name\"\n          }\n        },\n        \"transform_ids\": {\n          \"description\": \"List of names of the transform/branch associated with this sink.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Transform IDs\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"unit_test\"\n      }\n    },\n    \"vector::config::unit_test::unit_test_components::UnitTestSourceConfig\": {\n      \"description\": \"Configuration for the `unit_test` source.\",\n      \"type\": \"object\",\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"unit_test\"\n      }\n    },\n    \"vector::config::unit_test::unit_test_components::UnitTestStreamSinkConfig\": {\n      \"description\": \"Configuration for the `unit_test_stream` sink.\",\n      \"type\": \"object\",\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"unit_test_stream\"\n      }\n    },\n    \"vector::config::unit_test::unit_test_components::UnitTestStreamSourceConfig\": {\n      \"description\": \"Configuration for the `unit_test_stream` source.\",\n      \"type\": \"object\",\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"unit_test_stream\"\n      }\n    },\n    \"vector::enrichment_tables::file::FileConfig\": {\n      \"description\": \"Configuration for the `file` enrichment table.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"file\"\n      ],\n      \"properties\": {\n        \"file\": {\n          \"description\": \"File-specific settings.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"encoding\",\n            \"path\"\n          ],\n          \"properties\": {\n            \"encoding\": {\n              \"description\": \"File encoding configuration.\",\n              \"oneOf\": [\n                {\n                  \"title\": \"Decodes the file as a [CSV][csv] (comma-separated values) file.\",\n                  \"description\": \"[csv]: https://wikipedia.org/wiki/Comma-separated_values\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"type\"\n                  ],\n                  \"properties\": {\n                    \"delimiter\": {\n                      \"description\": \"The delimiter used to separate fields in each row of the CSV file.\",\n                      \"default\": \",\",\n                      \"type\": \"string\",\n                      \"maxLength\": 1,\n                      \"minLength\": 1,\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Delimiter\"\n                      }\n                    },\n                    \"include_headers\": {\n                      \"title\": \"Whether or not the file contains column headers.\",\n                      \"description\": \"When set to `true`, the first row of the CSV file will be read as the header row, and\\nthe values will be used for the names of each column. This is the default behavior.\\n\\nWhen set to `false`, columns are referred to by their numerical index.\",\n                      \"default\": true,\n                      \"type\": \"boolean\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Include Headers\"\n                      }\n                    },\n                    \"type\": {\n                      \"title\": \"Decodes the file as a [CSV][csv] (comma-separated values) file.\",\n                      \"description\": \"[csv]: https://wikipedia.org/wiki/Comma-separated_values\",\n                      \"const\": \"csv\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Type\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Csv\",\n                    \"docs::human_name\": \"CSV\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"internal\",\n                \"docs::enum_tag_field\": \"type\",\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"path\": {\n              \"title\": \"The path of the enrichment table file.\",\n              \"description\": \"Currently, only [CSV][csv] files are supported.\\n\\n[csv]: https://en.wikipedia.org/wiki/Comma-separated_values\",\n              \"$ref\": \"#/definitions/stdlib::PathBuf\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Path\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"File\"\n          }\n        },\n        \"schema\": {\n          \"title\": \"Key/value pairs representing mapped log field names and types.\",\n          \"description\": \"This is used to coerce log fields from strings into their proper types. The available types are listed in the `Types` list below.\\n\\nTimestamp coercions need to be prefaced with `timestamp|`, for example `\\\"timestamp|%F\\\"`. Timestamp specifiers can use either of the following:\\n\\n1. One of the built-in-formats listed in the `Timestamp Formats` table below.\\n2. The [time format specifiers][chrono_fmt] from Rust’s `chrono` library.\\n\\n### Types\\n\\n- **`bool`**\\n- **`string`**\\n- **`float`**\\n- **`integer`**\\n- **`date`**\\n- **`timestamp`** (see the table below for formats)\\n\\n### Timestamp Formats\\n\\n| Format               | Description                                                                      | Example                          |\\n|----------------------|----------------------------------------------------------------------------------|----------------------------------|\\n| `%F %T`              | `YYYY-MM-DD HH:MM:SS`                                                            | `2020-12-01 02:37:54`            |\\n| `%v %T`              | `DD-Mmm-YYYY HH:MM:SS`                                                           | `01-Dec-2020 02:37:54`           |\\n| `%FT%T`              | [ISO 8601][iso8601]/[RFC 3339][rfc3339], without time zone                       | `2020-12-01T02:37:54`            |\\n| `%FT%TZ`             | [ISO 8601][iso8601]/[RFC 3339][rfc3339], UTC                                     | `2020-12-01T09:37:54Z`           |\\n| `%+`                 | [ISO 8601][iso8601]/[RFC 3339][rfc3339], UTC, with time zone                     | `2020-12-01T02:37:54-07:00`      |\\n| `%a, %d %b %Y %T`    | [RFC 822][rfc822]/[RFC 2822][rfc2822], without time zone                         | `Tue, 01 Dec 2020 02:37:54`      |\\n| `%a %b %e %T %Y`     | [ctime][ctime] format                                                            | `Tue Dec 1 02:37:54 2020`        |\\n| `%s`                 | [UNIX timestamp][unix_ts]                                                        | `1606790274`                     |\\n| `%a %d %b %T %Y`     | [date][date] command, without time zone                                          | `Tue 01 Dec 02:37:54 2020`       |\\n| `%a %d %b %T %Z %Y`  | [date][date] command, with time zone                                             | `Tue 01 Dec 02:37:54 PST 2020`   |\\n| `%a %d %b %T %z %Y`  | [date][date] command, with numeric time zone                                     | `Tue 01 Dec 02:37:54 -0700 2020` |\\n| `%a %d %b %T %#z %Y` | [date][date] command, with numeric time zone (minutes can be missing or present) | `Tue 01 Dec 02:37:54 -07 2020`   |\\n\\n[date]: https://man7.org/linux/man-pages/man1/date.1.html\\n[ctime]: https://www.cplusplus.com/reference/ctime\\n[unix_ts]: https://en.wikipedia.org/wiki/Unix_time\\n[rfc822]: https://tools.ietf.org/html/rfc822#section-5\\n[rfc2822]: https://tools.ietf.org/html/rfc2822#section-3.3\\n[iso8601]: https://en.wikipedia.org/wiki/ISO_8601\\n[rfc3339]: https://tools.ietf.org/html/rfc3339\\n[chrono_fmt]: https://docs.rs/chrono/latest/chrono/format/strftime/index.html#specifiers\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Schema\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"enrichment_table\",\n        \"docs::component_name\": \"file\"\n      }\n    },\n    \"vector::enrichment_tables::geoip::GeoipConfig\": {\n      \"description\": \"Configuration for the `geoip` enrichment table.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"path\"\n      ],\n      \"properties\": {\n        \"locale\": {\n          \"title\": \"The locale to use when querying the database.\",\n          \"description\": \"MaxMind includes localized versions of some of the fields within their database, such as\\ncountry name. This setting can control which of those localized versions are returned by the\\ntransform.\\n\\nMore information on which portions of the geolocation data are localized, and what languages\\nare available, can be found [here][locale_docs].\\n\\n[locale_docs]: https://support.maxmind.com/hc/en-us/articles/4414877149467-IP-Geolocation-Data#h_01FRRGRYTGZB29ERDBZCX3MR8Q\",\n          \"default\": \"en\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Locale\"\n          }\n        },\n        \"path\": {\n          \"title\": \"Path to the [MaxMind GeoIP2][geoip2] or [GeoLite2 binary city database file][geolite2]\\n(**GeoLite2-City.mmdb**).\",\n          \"description\": \"Other databases, such as the country database, are not supported.\\n`mmdb` enrichment table can be used for other databases.\\n\\n[geoip2]: https://dev.maxmind.com/geoip/geoip2/downloadable\\n[geolite2]: https://dev.maxmind.com/geoip/geoip2/geolite2/#Download_Access\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Path\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"enrichment_table\",\n        \"docs::component_name\": \"geoip\"\n      }\n    },\n    \"vector::enrichment_tables::mmdb::MmdbConfig\": {\n      \"description\": \"Configuration for the `mmdb` enrichment table.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"path\"\n      ],\n      \"properties\": {\n        \"path\": {\n          \"title\": \"Path to the [MaxMind][maxmind] database\",\n          \"description\": \"[maxmind]: https://maxmind.com\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Path\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"enrichment_table\",\n        \"docs::component_name\": \"mmdb\"\n      }\n    },\n    \"vector::gcp::GcpAuthConfig\": {\n      \"description\": \"Configuration of the authentication strategy for interacting with GCP services.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"api_key\": {\n          \"title\": \"An [API key][gcp_api_key].\",\n          \"description\": \"Either an API key or a path to a service account credentials JSON file can be specified.\\n\\nIf both are unset, the `GOOGLE_APPLICATION_CREDENTIALS` environment variable is checked for a filename. If no\\nfilename is named, an attempt is made to fetch an instance service account for the compute instance the program is\\nrunning on. If this is not on a GCE instance, then you must define it with an API key or service account\\ncredentials JSON file.\\n\\n[gcp_api_key]: https://cloud.google.com/docs/authentication/api-keys\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"API Key\"\n          }\n        },\n        \"credentials_path\": {\n          \"title\": \"Path to a [service account][gcp_service_account_credentials] credentials JSON file.\",\n          \"description\": \"Either an API key or a path to a service account credentials JSON file can be specified.\\n\\nIf both are unset, the `GOOGLE_APPLICATION_CREDENTIALS` environment variable is checked for a filename. If no\\nfilename is named, an attempt is made to fetch an instance service account for the compute instance the program is\\nrunning on. If this is not on a GCE instance, then you must define it with an API key or service account\\ncredentials JSON file.\\n\\n[gcp_service_account_credentials]: https://cloud.google.com/docs/authentication/production#manually\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Credentials Path\"\n          }\n        },\n        \"skip_authentication\": {\n          \"description\": \"Skip all authentication handling. For use with integration tests only.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Skip Authentication\"\n          }\n        }\n      }\n    },\n    \"vector::http::KeepaliveConfig\": {\n      \"description\": \"Configuration of HTTP server keepalive parameters.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"max_connection_age_jitter_factor\": {\n          \"title\": \"The factor by which to jitter the `max_connection_age_secs` value.\",\n          \"description\": \"A value of 0.1 means that the actual duration will be between 90% and 110% of the\\nspecified maximum duration.\",\n          \"default\": 0.1,\n          \"type\": \"number\",\n          \"maximum\": 1.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::human_name\": \"Max Connection Age Jitter Factor\"\n          }\n        },\n        \"max_connection_age_secs\": {\n          \"title\": \"The maximum amount of time a connection may exist before it is closed by sending\\na `Connection: close` header on the HTTP response. Set this to a large value like\\n`100000000` to \\\"disable\\\" this feature\",\n          \"description\": \"Only applies to HTTP/0.9, HTTP/1.0, and HTTP/1.1 requests.\\n\\nA random jitter configured by `max_connection_age_jitter_factor` is added\\nto the specified duration to spread out connection storms.\",\n          \"default\": 300,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::examples\": 600,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Maximum Connection Age\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"vector::internal_events::file::FileInternalMetricsConfig\": {\n      \"description\": \"Configuration of internal metrics for file-based components.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"include_file_tag\": {\n          \"title\": \"Whether or not to include the \\\"file\\\" tag on the component's corresponding internal metrics.\",\n          \"description\": \"This is useful for distinguishing between different files while monitoring. However, the tag's\\ncardinality is unbounded.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Include File Tag\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"vector::kafka::KafkaAuthConfig\": {\n      \"description\": \"Kafka authentication configuration.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"sasl\": {\n          \"description\": \"Configuration for SASL authentication when interacting with Kafka.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Configuration for SASL authentication when interacting with Kafka.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"enabled\": {\n                  \"title\": \"Enables SASL authentication.\",\n                  \"description\": \"Only `PLAIN`- and `SCRAM`-based mechanisms are supported when configuring SASL authentication using `sasl.*`. For\\nother mechanisms, `librdkafka_options.*` must be used directly to configure other `librdkafka`-specific values.\\nIf using `sasl.kerberos.*` as an example, where `*` is `service.name`, `principal`, `kinit.md`, etc., then\\n`librdkafka_options.*` as a result becomes `librdkafka_options.sasl.kerberos.service.name`,\\n`librdkafka_options.sasl.kerberos.principal`, etc.\\n\\nSee the [librdkafka documentation](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md) for details.\\n\\nSASL authentication is not supported on Windows.\",\n                  \"type\": [\n                    \"boolean\",\n                    \"null\"\n                  ],\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"Enabled\"\n                  }\n                },\n                \"mechanism\": {\n                  \"description\": \"The SASL mechanism to use.\",\n                  \"type\": [\n                    \"string\",\n                    \"null\"\n                  ],\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::examples\": [\n                      \"SCRAM-SHA-256\",\n                      \"SCRAM-SHA-512\"\n                    ],\n                    \"docs::human_name\": \"Mechanism\"\n                  }\n                },\n                \"password\": {\n                  \"description\": \"The SASL password.\",\n                  \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n                  \"_metadata\": {\n                    \"docs::examples\": \"password\",\n                    \"docs::human_name\": \"Password\"\n                  }\n                },\n                \"username\": {\n                  \"description\": \"The SASL username.\",\n                  \"type\": [\n                    \"string\",\n                    \"null\"\n                  ],\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::examples\": \"username\",\n                    \"docs::human_name\": \"Username\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"SASL\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      }\n    },\n    \"vector::providers::http::HttpConfig\": {\n      \"description\": \"Configuration for the `http` provider.\",\n      \"default\": {\n        \"url\": null,\n        \"request\": {\n          \"headers\": {}\n        },\n        \"poll_interval_secs\": 30\n      },\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"poll_interval_secs\": {\n              \"description\": \"How often to poll the provider, in seconds.\",\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Poll Interval Secs\"\n              }\n            },\n            \"proxy\": {\n              \"title\": \"Proxy configuration.\",\n              \"description\": \"Configure to proxy traffic through an HTTP(S) proxy when making external requests.\\n\\nSimilar to common proxy configuration convention, you can set different proxies\\nto use based on the type of traffic being proxied, as well as set specific hosts that\\nshould not be proxied.\",\n              \"default\": {},\n              \"$ref\": \"#/definitions/vector_core::config::proxy::ProxyConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Proxy\"\n              }\n            },\n            \"request\": {\n              \"description\": \"Request settings.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"headers\": {\n                  \"description\": \"HTTP headers to add to the request.\",\n                  \"default\": {},\n                  \"type\": \"object\",\n                  \"additionalProperties\": {\n                    \"type\": \"string\"\n                  },\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Headers\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"url\": {\n              \"description\": \"URL for the HTTP provider.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"format\": \"uri\",\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"URL\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"TLS configuration.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"$ref\": \"#/definitions/vector_core::tls::settings::TlsConfig\"\n            }\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"provider\",\n        \"docs::component_name\": \"http\"\n      }\n    },\n    \"vector::secrets::aws_secrets_manager::AwsSecretsManagerBackend\": {\n      \"description\": \"Configuration for the `aws_secrets_manager` secrets backend.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"secret_id\"\n          ],\n          \"properties\": {\n            \"auth\": {\n              \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n              \"default\": {\n                \"load_timeout_secs\": null,\n                \"imds\": {\n                  \"max_attempts\": 4,\n                  \"connect_timeout_seconds\": 1,\n                  \"read_timeout_seconds\": 1\n                },\n                \"region\": null\n              },\n              \"$ref\": \"#/definitions/vector::aws::auth::AwsAuthentication\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Auth\"\n              }\n            },\n            \"secret_id\": {\n              \"description\": \"ID of the secret to resolve.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Secret ID\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"secrets\",\n        \"docs::component_name\": \"aws_secrets_manager\"\n      }\n    },\n    \"vector::secrets::exec::ExecBackend\": {\n      \"description\": \"Configuration for the `exec` secrets backend.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"command\"\n      ],\n      \"properties\": {\n        \"command\": {\n          \"title\": \"Command arguments to execute.\",\n          \"description\": \"The path to the script or binary must be the first argument.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Command\"\n          }\n        },\n        \"timeout\": {\n          \"description\": \"The timeout, in seconds, to wait for the command to complete.\",\n          \"default\": 5,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Timeout\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"secrets\",\n        \"docs::component_name\": \"exec\"\n      }\n    },\n    \"vector::secrets::test::TestBackend\": {\n      \"description\": \"Configuration for the `test` secrets backend.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"replacement\"\n      ],\n      \"properties\": {\n        \"replacement\": {\n          \"description\": \"Fixed value to replace all secrets with.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Replacement\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"secrets\",\n        \"docs::component_name\": \"test\"\n      }\n    },\n    \"vector::sinks::Sinks\": {\n      \"description\": \"Configurable sinks in Vector.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Send events to AMQP 0.9.1 compatible brokers like RabbitMQ.\",\n          \"allOf\": [\n            {\n              \"title\": \"Configuration for the `amqp` sink.\",\n              \"description\": \"Supports AMQP version 0.9.1\",\n              \"$ref\": \"#/definitions/vector::sinks::amqp::config::AmqpSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Send events to AMQP 0.9.1 compatible brokers like RabbitMQ.\",\n                  \"const\": \"amqp\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AMQP\",\n            \"logical_name\": \"AmqpSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver log and metric event data to AppSignal.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `appsignal` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::appsignal::config::AppsignalConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log and metric event data to AppSignal.\",\n                  \"const\": \"appsignal\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AppSignal\",\n            \"logical_name\": \"Appsignal\"\n          }\n        },\n        {\n          \"description\": \"Publish log events to AWS CloudWatch Logs.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_cloudwatch_logs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::aws_cloudwatch_logs::config::CloudwatchLogsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish log events to AWS CloudWatch Logs.\",\n                  \"const\": \"aws_cloudwatch_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS CloudWatch Logs\",\n            \"logical_name\": \"CloudwatchLogsSink\"\n          }\n        },\n        {\n          \"description\": \"Publish metric events to AWS CloudWatch Metrics.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_cloudwatch_metrics` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::aws_cloudwatch_metrics::CloudWatchMetricsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish metric events to AWS CloudWatch Metrics.\",\n                  \"const\": \"aws_cloudwatch_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS CloudWatch Metrics\",\n            \"logical_name\": \"CloudWatchMetricsSink\"\n          }\n        },\n        {\n          \"description\": \"Publish logs to AWS Kinesis Data Firehose topics.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_kinesis_firehose` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::aws_kinesis::firehose::config::KinesisFirehoseSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish logs to AWS Kinesis Data Firehose topics.\",\n                  \"const\": \"aws_kinesis_firehose\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS Kinesis Firehose\",\n            \"logical_name\": \"KinesisFirehoseSink\"\n          }\n        },\n        {\n          \"description\": \"Publish logs to AWS Kinesis Streams topics.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_kinesis_streams` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::aws_kinesis::streams::config::KinesisStreamsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish logs to AWS Kinesis Streams topics.\",\n                  \"const\": \"aws_kinesis_streams\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS Kinesis Streams\",\n            \"logical_name\": \"KinesisStreamsSink\"\n          }\n        },\n        {\n          \"description\": \"Store observability events in the AWS S3 object storage system.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_s3` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::aws_s3::config::S3SinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Store observability events in the AWS S3 object storage system.\",\n                  \"const\": \"aws_s3\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS S3\",\n            \"logical_name\": \"S3Sink\"\n          }\n        },\n        {\n          \"description\": \"Publish observability events to AWS Simple Notification Service topics.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_sns` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::aws_s_s::sns::config::SnsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish observability events to AWS Simple Notification Service topics.\",\n                  \"const\": \"aws_sns\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS Sns\",\n            \"logical_name\": \"SnsSink\"\n          }\n        },\n        {\n          \"description\": \"Publish observability events to AWS Simple Queue Service topics.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_sqs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::aws_s_s::sqs::config::SqsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish observability events to AWS Simple Queue Service topics.\",\n                  \"const\": \"aws_sqs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS SQS\",\n            \"logical_name\": \"SqsSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver log events to Axiom.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `axiom` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::axiom::AxiomConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log events to Axiom.\",\n                  \"const\": \"axiom\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Axiom\",\n            \"logical_name\": \"Axiom\"\n          }\n        },\n        {\n          \"description\": \"Store your observability data in Azure Blob Storage.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `azure_blob` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::azure_blob::config::AzureBlobSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Store your observability data in Azure Blob Storage.\",\n                  \"const\": \"azure_blob\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Azure Blob\",\n            \"logical_name\": \"AzureBlobSink\"\n          }\n        },\n        {\n          \"description\": \"Publish log events to the Azure Monitor Logs service.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `azure_monitor_logs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::azure_monitor_logs::config::AzureMonitorLogsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish log events to the Azure Monitor Logs service.\",\n                  \"const\": \"azure_monitor_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Azure Monitor Logs\",\n            \"logical_name\": \"AzureMonitorLogs\"\n          }\n        },\n        {\n          \"description\": \"Send observability events nowhere, which can be useful for debugging purposes.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `blackhole` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::blackhole::config::BlackholeConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Send observability events nowhere, which can be useful for debugging purposes.\",\n                  \"const\": \"blackhole\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Blackhole\",\n            \"logical_name\": \"Blackhole\"\n          }\n        },\n        {\n          \"description\": \"Deliver log data to a ClickHouse database.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `clickhouse` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::clickhouse::config::ClickhouseConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log data to a ClickHouse database.\",\n                  \"const\": \"clickhouse\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"ClickHouse\",\n            \"logical_name\": \"Clickhouse\"\n          }\n        },\n        {\n          \"description\": \"Display observability events in the console, which can be useful for debugging purposes.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `console` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::console::config::ConsoleSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Display observability events in the console, which can be useful for debugging purposes.\",\n                  \"const\": \"console\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Console\",\n            \"logical_name\": \"ConsoleSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver log data to a Databend database.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `databend` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::databend::config::DatabendConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log data to a Databend database.\",\n                  \"const\": \"databend\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Databend\",\n            \"logical_name\": \"Databend\"\n          }\n        },\n        {\n          \"description\": \"Publish observability events to the Datadog Events API.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `datadog_events` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::datadog::events::config::DatadogEventsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish observability events to the Datadog Events API.\",\n                  \"const\": \"datadog_events\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Datadog Events\",\n            \"logical_name\": \"DatadogEvents\"\n          }\n        },\n        {\n          \"description\": \"Publish log events to Datadog.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `datadog_logs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::datadog::logs::config::DatadogLogsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish log events to Datadog.\",\n                  \"const\": \"datadog_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Datadog Logs\",\n            \"logical_name\": \"DatadogLogs\"\n          }\n        },\n        {\n          \"description\": \"Publish metric events to Datadog.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `datadog_metrics` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::datadog::metrics::config::DatadogMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish metric events to Datadog.\",\n                  \"const\": \"datadog_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Datadog Metrics\",\n            \"logical_name\": \"DatadogMetrics\"\n          }\n        },\n        {\n          \"description\": \"Publish trace events to Datadog.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `datadog_traces` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::datadog::traces::config::DatadogTracesConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish trace events to Datadog.\",\n                  \"const\": \"datadog_traces\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Datadog Traces\",\n            \"logical_name\": \"DatadogTraces\"\n          }\n        },\n        {\n          \"description\": \"Index observability events in Elasticsearch.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `elasticsearch` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::elasticsearch::config::ElasticsearchConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Index observability events in Elasticsearch.\",\n                  \"const\": \"elasticsearch\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Elasticsearch\",\n            \"logical_name\": \"Elasticsearch\"\n          }\n        },\n        {\n          \"description\": \"Output observability events into files.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `file` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::file::FileSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Output observability events into files.\",\n                  \"const\": \"file\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"File\",\n            \"logical_name\": \"FileSink\"\n          }\n        },\n        {\n          \"description\": \"Store unstructured log events in Google Chronicle.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `gcp_chronicle_unstructured` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::gcp_chronicle::chronicle_unstructured::ChronicleUnstructuredConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Store unstructured log events in Google Chronicle.\",\n                  \"const\": \"gcp_chronicle_unstructured\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"GCP Chronicle Unstructured\",\n            \"logical_name\": \"ChronicleUnstructured\"\n          }\n        },\n        {\n          \"description\": \"Store observability events in GCP Cloud Storage.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `gcp_cloud_storage` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::gcp::cloud_storage::GcsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Store observability events in GCP Cloud Storage.\",\n                  \"const\": \"gcp_cloud_storage\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"GCP Cloud Storage\",\n            \"logical_name\": \"GcsSink\"\n          }\n        },\n        {\n          \"description\": \"Publish observability events to GCP's Pub/Sub messaging system.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `gcp_pubsub` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::gcp::pubsub::PubsubConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish observability events to GCP's Pub/Sub messaging system.\",\n                  \"const\": \"gcp_pubsub\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"GCP Pub/Sub\",\n            \"logical_name\": \"Pubsub\"\n          }\n        },\n        {\n          \"description\": \"Deliver logs to GCP's Cloud Operations suite.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `gcp_stackdriver_logs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::gcp::stackdriver::logs::config::StackdriverConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver logs to GCP's Cloud Operations suite.\",\n                  \"const\": \"gcp_stackdriver_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"GCP Stackdriver Logs\",\n            \"logical_name\": \"Stackdriver\"\n          }\n        },\n        {\n          \"description\": \"Deliver metrics to GCP's Cloud Monitoring system.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `gcp_stackdriver_metrics` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::gcp::stackdriver::metrics::config::StackdriverConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver metrics to GCP's Cloud Monitoring system.\",\n                  \"const\": \"gcp_stackdriver_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"GCP Stackdriver Metrics\",\n            \"logical_name\": \"Stackdriver\"\n          }\n        },\n        {\n          \"description\": \"Ingest metrics data into GreptimeDB.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration items for GreptimeDB\",\n              \"$ref\": \"#/definitions/vector::sinks::greptimedb::GreptimeDBConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Ingest metrics data into GreptimeDB.\",\n                  \"const\": \"greptimedb\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Greptimedb\",\n            \"logical_name\": \"GreptimeDB\"\n          }\n        },\n        {\n          \"description\": \"Deliver log events to Honeycomb.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `honeycomb` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::honeycomb::config::HoneycombConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log events to Honeycomb.\",\n                  \"const\": \"honeycomb\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Honeycomb\",\n            \"logical_name\": \"Honeycomb\"\n          }\n        },\n        {\n          \"description\": \"Deliver observability event data to an HTTP server.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `http` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::http::config::HttpSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver observability event data to an HTTP server.\",\n                  \"const\": \"http\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"HTTP\",\n            \"logical_name\": \"HttpSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver log event data to Humio.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `humio_logs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::humio::logs::HumioLogsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log event data to Humio.\",\n                  \"const\": \"humio_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Humio Logs\",\n            \"logical_name\": \"HumioLogs\"\n          }\n        },\n        {\n          \"description\": \"Deliver metric event data to Humio.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `humio_metrics` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::humio::metrics::HumioMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver metric event data to Humio.\",\n                  \"const\": \"humio_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Humio Metrics\",\n            \"logical_name\": \"HumioMetrics\"\n          }\n        },\n        {\n          \"description\": \"Deliver log event data to InfluxDB.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `influxdb_logs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::influxdb::logs::InfluxDbLogsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log event data to InfluxDB.\",\n                  \"const\": \"influxdb_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"InfluxDB Logs\",\n            \"logical_name\": \"InfluxDbLogs\"\n          }\n        },\n        {\n          \"description\": \"Deliver metric event data to InfluxDB.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `influxdb_metrics` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::influxdb::metrics::InfluxDbConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver metric event data to InfluxDB.\",\n                  \"const\": \"influxdb_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"InfluxDB Metrics\",\n            \"logical_name\": \"InfluxDb\"\n          }\n        },\n        {\n          \"description\": \"Publish observability event data to Apache Kafka topics.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `kafka` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::kafka::config::KafkaSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish observability event data to Apache Kafka topics.\",\n                  \"const\": \"kafka\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Kafka\",\n            \"logical_name\": \"KafkaSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver log event data to LogDNA.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `logdna` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::mezmo::LogdnaConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log event data to LogDNA.\",\n                  \"const\": \"logdna\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"LogDNA\",\n            \"logical_name\": \"Logdna\"\n          }\n        },\n        {\n          \"description\": \"Deliver log event data to the Loki aggregation system.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `loki` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::loki::config::LokiConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log event data to the Loki aggregation system.\",\n                  \"const\": \"loki\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Loki\",\n            \"logical_name\": \"Loki\"\n          }\n        },\n        {\n          \"description\": \"Deliver log event data to Mezmo.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `mezmo` (formerly `logdna`) sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::mezmo::MezmoConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log event data to Mezmo.\",\n                  \"const\": \"mezmo\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Mezmo\",\n            \"logical_name\": \"Mezmo\"\n          }\n        },\n        {\n          \"description\": \"This component is missing a description.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `mqtt` sink\",\n              \"$ref\": \"#/definitions/vector::sinks::mqtt::config::MqttSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"This component is missing a description.\",\n                  \"const\": \"mqtt\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Mqtt\",\n            \"logical_name\": \"MqttSink\"\n          }\n        },\n        {\n          \"description\": \"Publish observability data to subjects on the NATS messaging system.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `nats` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::nats::config::NatsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish observability data to subjects on the NATS messaging system.\",\n                  \"const\": \"nats\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"NATS\",\n            \"logical_name\": \"NatsSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver events to New Relic.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `new_relic` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::new_relic::config::NewRelicConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver events to New Relic.\",\n                  \"const\": \"new_relic\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"New Relic\",\n            \"logical_name\": \"NewRelic\"\n          }\n        },\n        {\n          \"description\": \"Deliver log events to Papertrail from SolarWinds.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `papertrail` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::papertrail::PapertrailConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log events to Papertrail from SolarWinds.\",\n                  \"const\": \"papertrail\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Papertrail\",\n            \"logical_name\": \"Papertrail\"\n          }\n        },\n        {\n          \"description\": \"Expose metric events on a Prometheus compatible endpoint.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `prometheus_exporter` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::prometheus::exporter::PrometheusExporterConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Expose metric events on a Prometheus compatible endpoint.\",\n                  \"const\": \"prometheus_exporter\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Prometheus Exporter\",\n            \"logical_name\": \"PrometheusExporter\"\n          }\n        },\n        {\n          \"description\": \"Deliver metric data to a Prometheus remote write endpoint.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `prometheus_remote_write` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::prometheus::remote_write::config::RemoteWriteConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver metric data to a Prometheus remote write endpoint.\",\n                  \"const\": \"prometheus_remote_write\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Prometheus Remote Write\",\n            \"logical_name\": \"RemoteWrite\"\n          }\n        },\n        {\n          \"description\": \"Publish observability events to Apache Pulsar topics.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `pulsar` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::pulsar::config::PulsarSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish observability events to Apache Pulsar topics.\",\n                  \"const\": \"pulsar\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Pulsar\",\n            \"logical_name\": \"PulsarSink\"\n          }\n        },\n        {\n          \"description\": \"Publish observability data to Redis.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `redis` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::redis::config::RedisSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish observability data to Redis.\",\n                  \"const\": \"redis\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Redis\",\n            \"logical_name\": \"RedisSink\"\n          }\n        },\n        {\n          \"description\": \"Publish log events to Sematext.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `sematext_logs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::sematext::logs::SematextLogsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish log events to Sematext.\",\n                  \"const\": \"sematext_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Sematext Logs\",\n            \"logical_name\": \"SematextLogs\"\n          }\n        },\n        {\n          \"description\": \"Publish metric events to Sematext.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `sematext_metrics` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::sematext::metrics::SematextMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Publish metric events to Sematext.\",\n                  \"const\": \"sematext_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Sematext Metrics\",\n            \"logical_name\": \"SematextMetrics\"\n          }\n        },\n        {\n          \"description\": \"Deliver logs to a remote socket endpoint.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `socket` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::socket::SocketSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver logs to a remote socket endpoint.\",\n                  \"const\": \"socket\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Socket\",\n            \"logical_name\": \"SocketSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver log data to Splunk's HTTP Event Collector.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `splunk_hec_logs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::splunk_hec::logs::config::HecLogsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver log data to Splunk's HTTP Event Collector.\",\n                  \"const\": \"splunk_hec_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Splunk HEC Logs\",\n            \"logical_name\": \"HecLogsSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver metric data to Splunk's HTTP Event Collector.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration of the `splunk_hec_metrics` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::splunk_hec::metrics::config::HecMetricsSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver metric data to Splunk's HTTP Event Collector.\",\n                  \"const\": \"splunk_hec_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Splunk HEC Metrics\",\n            \"logical_name\": \"HecMetricsSink\"\n          }\n        },\n        {\n          \"description\": \"Deliver metric data to a StatsD aggregator.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `statsd` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::statsd::config::StatsdSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver metric data to a StatsD aggregator.\",\n                  \"const\": \"statsd\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"StatsD\",\n            \"logical_name\": \"StatsdSink\"\n          }\n        },\n        {\n          \"description\": \"Unit test.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `unit_test` sink.\",\n              \"$ref\": \"#/definitions/vector::config::unit_test::unit_test_components::UnitTestSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Unit test.\",\n                  \"const\": \"unit_test\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Unit Test\",\n            \"logical_name\": \"UnitTestSink\"\n          }\n        },\n        {\n          \"description\": \"Unit test stream.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `unit_test_stream` sink.\",\n              \"$ref\": \"#/definitions/vector::config::unit_test::unit_test_components::UnitTestStreamSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Unit test stream.\",\n                  \"const\": \"unit_test_stream\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Unit Test Stream\",\n            \"logical_name\": \"UnitTestStreamSink\"\n          }\n        },\n        {\n          \"description\": \"Relay observability data to a Vector instance.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `vector` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::vector::config::VectorConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Relay observability data to a Vector instance.\",\n                  \"const\": \"vector\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Vector\",\n            \"logical_name\": \"Vector\"\n          }\n        },\n        {\n          \"description\": \"WebHDFS.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `webhdfs` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::webhdfs::config::WebHdfsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"WebHDFS.\",\n                  \"const\": \"webhdfs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"WebHDFS\",\n            \"logical_name\": \"WebHdfs\"\n          }\n        },\n        {\n          \"description\": \"Deliver observability event data to a websocket listener.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `websocket` sink.\",\n              \"$ref\": \"#/definitions/vector::sinks::websocket::config::WebSocketSinkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deliver observability event data to a websocket listener.\",\n                  \"const\": \"websocket\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Websocket\",\n            \"logical_name\": \"WebSocketSink\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"internal\",\n        \"docs::enum_tag_field\": \"type\"\n      }\n    },\n    \"vector::sinks::amqp::config::AmqpSinkConfig\": {\n      \"title\": \"Configuration for the `amqp` sink.\",\n      \"description\": \"Supports AMQP version 0.9.1\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"encoding\",\n            \"exchange\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Configures how events are encoded into raw bytes.\",\n              \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"exchange\": {\n              \"description\": \"The exchange to publish messages to.\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Exchange\"\n              }\n            },\n            \"properties\": {\n              \"title\": \"Configure the AMQP message properties.\",\n              \"description\": \"AMQP message properties.\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"title\": \"Configure the AMQP message properties.\",\n                  \"description\": \"AMQP properties configuration.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"content_encoding\": {\n                      \"description\": \"Content-Encoding for the AMQP messages.\",\n                      \"type\": [\n                        \"string\",\n                        \"null\"\n                      ],\n                      \"_metadata\": {\n                        \"docs::optional\": true,\n                        \"docs::human_name\": \"Content Encoding\"\n                      }\n                    },\n                    \"content_type\": {\n                      \"description\": \"Content-Type for the AMQP messages.\",\n                      \"type\": [\n                        \"string\",\n                        \"null\"\n                      ],\n                      \"_metadata\": {\n                        \"docs::optional\": true,\n                        \"docs::human_name\": \"Content Type\"\n                      }\n                    },\n                    \"expiration_ms\": {\n                      \"description\": \"Expiration for AMQP messages (in milliseconds)\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::human_name\": \"Expiration Ms\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Properties\"\n              }\n            },\n            \"routing_key\": {\n              \"description\": \"Template used to generate a routing key which corresponds to a queue binding.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Routing Key\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"AMQP connection options.\",\n          \"$ref\": \"#/definitions/vector::amqp::AmqpConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"amqp\"\n      }\n    },\n    \"vector::sinks::appsignal::config::AppsignalConfig\": {\n      \"description\": \"Configuration for the `appsignal` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"push_api_key\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"title\": \"The maximum size of a batch that is processed by a sink.\",\n              \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n              \"default\": 450000,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"default\": 100,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::human_name\": \"Max Events\"\n              }\n            },\n            \"timeout_secs\": {\n              \"description\": \"The maximum age of a batch before it is flushed.\",\n              \"default\": 1.0,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"gzip\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"description\": \"The URI for the AppSignal API to send data to.\",\n          \"default\": \"https://appsignal-endpoint.net\",\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"_metadata\": {\n            \"docs::examples\": \"https://appsignal-endpoint.net\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"push_api_key\": {\n          \"description\": \"A valid app-level AppSignal Push API key.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"00000000-0000-0000-0000-000000000000\",\n              \"${APPSIGNAL_PUSH_API_KEY}\"\n            ],\n            \"docs::human_name\": \"Push API Key\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"appsignal\"\n      }\n    },\n    \"vector::sinks::aws_cloudwatch_logs::config::CloudwatchLogsSinkConfig\": {\n      \"description\": \"Configuration for the `aws_cloudwatch_logs` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"encoding\",\n            \"group_name\",\n            \"stream_name\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"assume_role\": {\n              \"title\": \"The ARN of an [IAM role][iam_role] to assume at startup.\",\n              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n              \"deprecated\": true,\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Assume Role\"\n              }\n            },\n            \"auth\": {\n              \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n              \"default\": {\n                \"load_timeout_secs\": null,\n                \"imds\": {\n                  \"max_attempts\": 4,\n                  \"connect_timeout_seconds\": 1,\n                  \"read_timeout_seconds\": 1\n                },\n                \"region\": null\n              },\n              \"$ref\": \"#/definitions/vector::aws::auth::AwsAuthentication\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Auth\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 1048576,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 10000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n              \"default\": \"none\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"create_missing_group\": {\n              \"title\": \"Dynamically create a [log group][log_group] if it does not already exist.\",\n              \"description\": \"This ignores `create_missing_stream` directly after creating the group and creates\\nthe first stream.\\n\\n[log_group]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html\",\n              \"default\": true,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Create Missing Group\"\n              }\n            },\n            \"create_missing_stream\": {\n              \"title\": \"Dynamically create a [log stream][log_stream] if it does not already exist.\",\n              \"description\": \"[log_stream]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html\",\n              \"default\": true,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Create Missing Stream\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Configures how events are encoded into raw bytes.\",\n              \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"group_name\": {\n              \"title\": \"The [group name][group_name] of the target CloudWatch Logs stream.\",\n              \"description\": \"[group_name]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"group-name\",\n                  \"{{ file }}\"\n                ],\n                \"docs::human_name\": \"Group Name\"\n              }\n            },\n            \"request\": {\n              \"description\": \"Outbound HTTP request settings.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                },\n                \"headers\": {}\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::http::RequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"retention\": {\n              \"description\": \"Retention policy configuration for AWS CloudWatch Log Group\",\n              \"default\": {\n                \"enabled\": false\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"days\": {\n                  \"description\": \"If retention is enabled, the number of days to retain logs for.\",\n                  \"default\": 0,\n                  \"type\": \"integer\",\n                  \"maximum\": 4294967295.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::human_name\": \"Days\"\n                  }\n                },\n                \"enabled\": {\n                  \"description\": \"Whether or not to set a retention policy when creating a new Log Group.\",\n                  \"default\": false,\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Enabled\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"Retention\"\n              }\n            },\n            \"stream_name\": {\n              \"title\": \"The [stream name][stream_name] of the target CloudWatch Logs stream.\",\n              \"description\": \"There can only be one writer to a log stream at a time. If multiple instances are writing to\\nthe same log group, the stream name must include an identifier that is guaranteed to be\\nunique per instance.\\n\\n[stream_name]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"{{ host }}\",\n                  \"%Y-%m-%d\",\n                  \"stream-name\"\n                ],\n                \"docs::human_name\": \"Stream Name\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"title\": \"The [AWS region][aws_region] of the target service.\",\n          \"description\": \"[aws_region]: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"aws_cloudwatch_logs\"\n      }\n    },\n    \"vector::sinks::aws_cloudwatch_metrics::CloudWatchMetricsSinkConfig\": {\n      \"description\": \"Configuration for the `aws_cloudwatch_metrics` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"default_namespace\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"assume_role\": {\n              \"title\": \"The ARN of an [IAM role][iam_role] to assume at startup.\",\n              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n              \"deprecated\": true,\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Assume Role\"\n              }\n            },\n            \"auth\": {\n              \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n              \"default\": {\n                \"load_timeout_secs\": null,\n                \"imds\": {\n                  \"max_attempts\": 4,\n                  \"connect_timeout_seconds\": 1,\n                  \"read_timeout_seconds\": 1\n                },\n                \"region\": null\n              },\n              \"$ref\": \"#/definitions/vector::aws::auth::AwsAuthentication\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Auth\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 20,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n              \"default\": \"none\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"default_namespace\": {\n              \"title\": \"The default [namespace][namespace] to use for metrics that do not have one.\",\n              \"description\": \"Metrics with the same name can only be differentiated by their namespace, and not all\\nmetrics have their own namespace.\\n\\n[namespace]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"service\",\n                \"docs::human_name\": \"Default Namespace\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 150,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"adaptive_concurrency\": {\n                  \"title\": \"Configuration of adaptive concurrency parameters.\",\n                  \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n                  \"default\": {\n                    \"initial_concurrency\": 1,\n                    \"decrease_ratio\": 0.9,\n                    \"ewma_alpha\": 0.4,\n                    \"rtt_deviation_scale\": 2.5,\n                    \"max_concurrency_limit\": 200\n                  },\n                  \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Adaptive Concurrency\"\n                  }\n                },\n                \"concurrency\": {\n                  \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n                  \"default\": \"adaptive\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Concurrency\"\n                  }\n                },\n                \"rate_limit_duration_secs\": {\n                  \"description\": \"The time window used for the `rate_limit_num` option.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Rate Limit Duration\"\n                  }\n                },\n                \"rate_limit_num\": {\n                  \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n                  \"default\": 150,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"requests\",\n                    \"docs::human_name\": \"Rate Limit Number\"\n                  }\n                },\n                \"retry_attempts\": {\n                  \"description\": \"The maximum number of retries to make for failed requests.\",\n                  \"default\": 9223372036854775807,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"retries\",\n                    \"docs::human_name\": \"Retry Attempts\"\n                  }\n                },\n                \"retry_initial_backoff_secs\": {\n                  \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n                  \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Retry Initial Backoff\"\n                  }\n                },\n                \"retry_jitter_mode\": {\n                  \"description\": \"The jitter mode to use for retry backoff behavior.\",\n                  \"default\": \"Full\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Retry Jitter Mode\"\n                  }\n                },\n                \"retry_max_duration_secs\": {\n                  \"description\": \"The maximum amount of time to wait between retries.\",\n                  \"default\": 30,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Max Retry Duration\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"title\": \"The time a request can take before being aborted.\",\n                  \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n                  \"default\": 60,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"title\": \"The [AWS region][aws_region] of the target service.\",\n          \"description\": \"[aws_region]: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"aws_cloudwatch_metrics\"\n      }\n    },\n    \"vector::sinks::aws_kinesis::config::KinesisSinkBaseConfig\": {\n      \"description\": \"Base configuration for the `aws_kinesis_` sinks.\\nThe actual specific sink configuration types should either wrap this in a newtype wrapper,\\nor should extend it in a new struct with `serde(flatten)`.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"encoding\",\n            \"stream_name\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"auth\": {\n              \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n              \"default\": {\n                \"load_timeout_secs\": null,\n                \"imds\": {\n                  \"max_attempts\": 4,\n                  \"connect_timeout_seconds\": 1,\n                  \"read_timeout_seconds\": 1\n                },\n                \"region\": null\n              },\n              \"$ref\": \"#/definitions/vector::aws::auth::AwsAuthentication\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Auth\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n              \"default\": \"none\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Configures how events are encoded into raw bytes.\",\n              \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"partition_key_field\": {\n              \"title\": \"The log field used as the Kinesis record’s partition key value.\",\n              \"description\": \"If not specified, a unique partition key is generated for each Kinesis record.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::ConfigValuePath>\",\n              \"_metadata\": {\n                \"docs::examples\": \"user_id\",\n                \"docs::human_name\": \"Partition Key Field\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"request_retry_partial\": {\n              \"description\": \"Whether or not to retry successful requests containing partial failures.\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Request Retry Partial\"\n              }\n            },\n            \"stream_name\": {\n              \"title\": \"The [stream name][stream_name] of the target Kinesis Firehose delivery stream.\",\n              \"description\": \"[stream_name]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"my-stream\",\n                \"docs::human_name\": \"Stream Name\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        }\n      ]\n    },\n    \"vector::sinks::aws_kinesis::firehose::config::KinesisFirehoseSinkConfig\": {\n      \"description\": \"Configuration for the `aws_kinesis_firehose` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 4194304,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 500,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Base configuration for the `aws_kinesis_` sinks.\\nThe actual specific sink configuration types should either wrap this in a newtype wrapper,\\nor should extend it in a new struct with `serde(flatten)`.\",\n          \"$ref\": \"#/definitions/vector::sinks::aws_kinesis::config::KinesisSinkBaseConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"aws_kinesis_firehose\"\n      }\n    },\n    \"vector::sinks::aws_kinesis::streams::config::KinesisStreamsSinkConfig\": {\n      \"description\": \"Configuration for the `aws_kinesis_streams` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 5000000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 500,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Base configuration for the `aws_kinesis_` sinks.\\nThe actual specific sink configuration types should either wrap this in a newtype wrapper,\\nor should extend it in a new struct with `serde(flatten)`.\",\n          \"$ref\": \"#/definitions/vector::sinks::aws_kinesis::config::KinesisSinkBaseConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"aws_kinesis_streams\"\n      }\n    },\n    \"vector::sinks::aws_s3::config::S3SinkConfig\": {\n      \"description\": \"Configuration for the `aws_s3` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"bucket\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"auth\": {\n              \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n              \"default\": {\n                \"load_timeout_secs\": null,\n                \"imds\": {\n                  \"max_attempts\": 4,\n                  \"connect_timeout_seconds\": 1,\n                  \"read_timeout_seconds\": 1\n                },\n                \"region\": null\n              },\n              \"$ref\": \"#/definitions/vector::aws::auth::AwsAuthentication\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Auth\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::BulkSizeBasedDefaultBatchSettings>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"bucket\": {\n              \"title\": \"The S3 bucket name.\",\n              \"description\": \"This must not include a leading `s3://` or a trailing `/`.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"my-bucket\",\n                \"docs::human_name\": \"Bucket\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\\n\\nSome cloud storage API clients and browsers handle decompression transparently, so\\ndepending on how they are accessed, files may not always appear to be compressed.\",\n              \"default\": \"gzip\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"filename_append_uuid\": {\n              \"title\": \"Whether or not to append a UUID v4 token to the end of the object key.\",\n              \"description\": \"The UUID is appended to the timestamp portion of the object key, such that if the object key\\ngenerated is `date=2022-07-18/1658176486`, setting this field to `true` results\\nin an object key that looks like `date=2022-07-18/1658176486-30f6652c-71da-4f9f-800d-a1189c47c547`.\\n\\nThis ensures there are no name collisions, and can be useful in high-volume workloads where\\nobject keys must be unique.\",\n              \"default\": true,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Append UUID to Filename\"\n              }\n            },\n            \"filename_extension\": {\n              \"title\": \"The filename extension to use in the object key.\",\n              \"description\": \"This overrides setting the extension based on the configured `compression`.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"json\",\n                \"docs::human_name\": \"Filename Extension\"\n              }\n            },\n            \"filename_time_format\": {\n              \"title\": \"The timestamp format for the time component of the object key.\",\n              \"description\": \"By default, object keys are appended with a timestamp that reflects when the objects are\\nsent to S3, such that the resulting object key is functionally equivalent to joining the key\\nprefix with the formatted timestamp, such as `date=2022-07-18/1658176486`.\\n\\nThis would represent a `key_prefix` set to `date=%F/` and the timestamp of Mon Jul 18 2022\\n20:34:44 GMT+0000, with the `filename_time_format` being set to `%s`, which renders\\ntimestamps in seconds since the Unix epoch.\\n\\nSupports the common [`strftime`][chrono_strftime_specifiers] specifiers found in most\\nlanguages.\\n\\nWhen set to an empty string, no timestamp is appended to the key prefix.\\n\\n[chrono_strftime_specifiers]: https://docs.rs/chrono/latest/chrono/format/strftime/index.html#specifiers\",\n              \"default\": \"%s\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Filename Time Format\"\n              }\n            },\n            \"key_prefix\": {\n              \"title\": \"A prefix to apply to all object keys.\",\n              \"description\": \"Prefixes are useful for partitioning objects, such as by creating an object key that\\nstores objects under a particular directory. If using a prefix for this purpose, it must end\\nin `/` to act as a directory path. A trailing `/` is **not** automatically added.\",\n              \"default\": \"date=%F\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::templateable\": true,\n                \"docs::examples\": [\n                  \"date=%F/hour=%H\",\n                  \"year=%Y/month=%m/day=%d\",\n                  \"application_id={{ application_id }}/date=%F\"\n                ],\n                \"docs::human_name\": \"Key Prefix\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"timezone\": {\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Timezone\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Per-operation configuration when writing objects to S3.\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"acl\": {\n              \"title\": \"Canned ACL to apply to the created objects.\",\n              \"description\": \"For more information, see [Canned ACL][canned_acl].\\n\\n[canned_acl]: https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"title\": \"S3 Canned ACLs.\",\n                  \"description\": \"For more information, see [Canned ACL][canned_acl].\\n\\n[canned_acl]: https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\",\n                  \"oneOf\": [\n                    {\n                      \"title\": \"Bucket/object are private.\",\n                      \"description\": \"The bucket/object owner is granted the `FULL_CONTROL` permission, and no one else has\\naccess.\\n\\nThis is the default.\",\n                      \"const\": \"private\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Private\",\n                        \"docs::human_name\": \"Private\"\n                      }\n                    },\n                    {\n                      \"title\": \"Bucket/object can be read publicly.\",\n                      \"description\": \"The bucket/object owner is granted the `FULL_CONTROL` permission, and anyone in the\\n`AllUsers` grantee group is granted the `READ` permission.\",\n                      \"const\": \"public-read\",\n                      \"_metadata\": {\n                        \"logical_name\": \"PublicRead\",\n                        \"docs::human_name\": \"Public Read\"\n                      }\n                    },\n                    {\n                      \"title\": \"Bucket/object can be read and written publicly.\",\n                      \"description\": \"The bucket/object owner is granted the `FULL_CONTROL` permission, and anyone in the\\n`AllUsers` grantee group is granted the `READ` and `WRITE` permissions.\\n\\nThis is generally not recommended.\",\n                      \"const\": \"public-read-write\",\n                      \"_metadata\": {\n                        \"logical_name\": \"PublicReadWrite\",\n                        \"docs::human_name\": \"Public Read Write\"\n                      }\n                    },\n                    {\n                      \"title\": \"Bucket/object are private, and readable by EC2.\",\n                      \"description\": \"The bucket/object owner is granted the `FULL_CONTROL` permission, and the AWS EC2 service is\\ngranted the `READ` permission for the purpose of reading Amazon Machine Image (AMI) bundles\\nfrom the given bucket.\",\n                      \"const\": \"aws-exec-read\",\n                      \"_metadata\": {\n                        \"logical_name\": \"AwsExecRead\",\n                        \"docs::human_name\": \"AWS Exec Read\"\n                      }\n                    },\n                    {\n                      \"title\": \"Bucket/object can be read by authenticated users.\",\n                      \"description\": \"The bucket/object owner is granted the `FULL_CONTROL` permission, and anyone in the\\n`AuthenticatedUsers` grantee group is granted the `READ` permission.\",\n                      \"const\": \"authenticated-read\",\n                      \"_metadata\": {\n                        \"logical_name\": \"AuthenticatedRead\",\n                        \"docs::human_name\": \"Authenticated Read\"\n                      }\n                    },\n                    {\n                      \"title\": \"Object is private, except to the bucket owner.\",\n                      \"description\": \"The object owner is granted the `FULL_CONTROL` permission, and the bucket owner is granted the `READ` permission.\\n\\nOnly relevant when specified for an object: this canned ACL is otherwise ignored when\\nspecified for a bucket.\",\n                      \"const\": \"bucket-owner-read\",\n                      \"_metadata\": {\n                        \"logical_name\": \"BucketOwnerRead\",\n                        \"docs::human_name\": \"Bucket Owner Read\"\n                      }\n                    },\n                    {\n                      \"title\": \"Object is semi-private.\",\n                      \"description\": \"Both the object owner and bucket owner are granted the `FULL_CONTROL` permission.\\n\\nOnly relevant when specified for an object: this canned ACL is otherwise ignored when\\nspecified for a bucket.\",\n                      \"const\": \"bucket-owner-full-control\",\n                      \"_metadata\": {\n                        \"logical_name\": \"BucketOwnerFullControl\",\n                        \"docs::human_name\": \"Bucket Owner Full Control\"\n                      }\n                    },\n                    {\n                      \"title\": \"Bucket can have logs written.\",\n                      \"description\": \"The `LogDelivery` grantee group is granted `WRITE` and `READ_ACP` permissions.\\n\\nOnly relevant when specified for a bucket: this canned ACL is otherwise ignored when\\nspecified for an object.\\n\\nFor more information about logs, see [Amazon S3 Server Access Logging][serverlogs].\\n\\n[serverlogs]: https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerLogs.html\",\n                      \"const\": \"log-delivery-write\",\n                      \"_metadata\": {\n                        \"logical_name\": \"LogDeliveryWrite\",\n                        \"docs::human_name\": \"Log Delivery Write\"\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"ACL\"\n              }\n            },\n            \"content_encoding\": {\n              \"title\": \"Overrides what content encoding has been applied to the object.\",\n              \"description\": \"Directly comparable to the `Content-Encoding` HTTP header.\\n\\nIf not specified, the compression scheme used dictates this value.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"gzip\",\n                \"docs::human_name\": \"Content Encoding\"\n              }\n            },\n            \"content_type\": {\n              \"title\": \"Overrides the MIME type of the object.\",\n              \"description\": \"Directly comparable to the `Content-Type` HTTP header.\\n\\nIf not specified, the compression scheme used dictates this value.\\nWhen `compression` is set to `none`, the value `text/x-log` is used.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"application/gzip\",\n                \"docs::human_name\": \"Content Type\"\n              }\n            },\n            \"grant_full_control\": {\n              \"title\": \"Grants `READ`, `READ_ACP`, and `WRITE_ACP` permissions on the created objects to the named [grantee].\",\n              \"description\": \"This allows the grantee to read the created objects and their metadata, as well as read and\\nmodify the ACL on the created objects.\\n\\n[grantee]: https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#specifying-grantee\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be\",\n                  \"person@email.com\",\n                  \"http://acs.amazonaws.com/groups/global/AllUsers\"\n                ],\n                \"docs::human_name\": \"Grant Full Control\"\n              }\n            },\n            \"grant_read\": {\n              \"title\": \"Grants `READ` permissions on the created objects to the named [grantee].\",\n              \"description\": \"This allows the grantee to read the created objects and their metadata.\\n\\n[grantee]: https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#specifying-grantee\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be\",\n                  \"person@email.com\",\n                  \"http://acs.amazonaws.com/groups/global/AllUsers\"\n                ],\n                \"docs::human_name\": \"Grant Read\"\n              }\n            },\n            \"grant_read_acp\": {\n              \"title\": \"Grants `READ_ACP` permissions on the created objects to the named [grantee].\",\n              \"description\": \"This allows the grantee to read the ACL on the created objects.\\n\\n[grantee]: https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#specifying-grantee\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be\",\n                  \"person@email.com\",\n                  \"http://acs.amazonaws.com/groups/global/AllUsers\"\n                ],\n                \"docs::human_name\": \"Grant Read ACP\"\n              }\n            },\n            \"grant_write_acp\": {\n              \"title\": \"Grants `WRITE_ACP` permissions on the created objects to the named [grantee].\",\n              \"description\": \"This allows the grantee to modify the ACL on the created objects.\\n\\n[grantee]: https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#specifying-grantee\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be\",\n                  \"person@email.com\",\n                  \"http://acs.amazonaws.com/groups/global/AllUsers\"\n                ],\n                \"docs::human_name\": \"Grant Write ACP\"\n              }\n            },\n            \"server_side_encryption\": {\n              \"title\": \"AWS S3 Server-Side Encryption algorithms.\",\n              \"description\": \"The Server-side Encryption algorithm used when storing these objects.\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"title\": \"AWS S3 Server-Side Encryption algorithms.\",\n                  \"description\": \"More information on each algorithm can be found in the [AWS documentation][aws_docs].\\n\\n[aws_docs]: https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html\",\n                  \"oneOf\": [\n                    {\n                      \"title\": \"Each object is encrypted with AES-256 using a unique key.\",\n                      \"description\": \"This corresponds to the `SSE-S3` option.\",\n                      \"const\": \"AES256\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Aes256\",\n                        \"docs::human_name\": \"AES-256\"\n                      }\n                    },\n                    {\n                      \"title\": \"Each object is encrypted with AES-256 using keys managed by AWS KMS.\",\n                      \"description\": \"Depending on whether or not a KMS key ID is specified, this corresponds either to the\\n`SSE-KMS` option (keys generated/managed by KMS) or the `SSE-C` option (keys generated by\\nthe customer, managed by KMS).\",\n                      \"const\": \"aws:kms\",\n                      \"_metadata\": {\n                        \"logical_name\": \"AwsKms\",\n                        \"docs::human_name\": \"AWS KMS\"\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Server Side Encryption\"\n              }\n            },\n            \"ssekms_key_id\": {\n              \"title\": \"Specifies the ID of the AWS Key Management Service (AWS KMS) symmetrical customer managed\\ncustomer master key (CMK) that is used for the created objects.\",\n              \"description\": \"Only applies when `server_side_encryption` is configured to use KMS.\\n\\nIf not specified, Amazon S3 uses the AWS managed CMK in AWS to protect the data.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"abcd1234\",\n                \"docs::templateable\": true,\n                \"docs::human_name\": \"SSE-KMS Key ID\"\n              }\n            },\n            \"storage_class\": {\n              \"title\": \"The storage class for the created objects.\",\n              \"description\": \"See the [S3 Storage Classes][s3_storage_classes] for more details.\\n\\n[s3_storage_classes]: https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\",\n              \"default\": \"STANDARD\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Standard Redundancy.\",\n                  \"const\": \"STANDARD\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Standard\",\n                    \"docs::human_name\": \"Standard\"\n                  }\n                },\n                {\n                  \"description\": \"Reduced Redundancy.\",\n                  \"const\": \"REDUCED_REDUNDANCY\",\n                  \"_metadata\": {\n                    \"logical_name\": \"ReducedRedundancy\",\n                    \"docs::human_name\": \"Reduced Redundancy\"\n                  }\n                },\n                {\n                  \"description\": \"Intelligent Tiering.\",\n                  \"const\": \"INTELLIGENT_TIERING\",\n                  \"_metadata\": {\n                    \"logical_name\": \"IntelligentTiering\",\n                    \"docs::human_name\": \"Intelligent Tiering\"\n                  }\n                },\n                {\n                  \"description\": \"Infrequently Accessed.\",\n                  \"const\": \"STANDARD_IA\",\n                  \"_metadata\": {\n                    \"logical_name\": \"StandardIa\",\n                    \"docs::human_name\": \"Standard Ia\"\n                  }\n                },\n                {\n                  \"description\": \"High Performance (single Availability zone).\",\n                  \"const\": \"EXPRESS_ONEZONE\",\n                  \"_metadata\": {\n                    \"logical_name\": \"ExpressOnezone\",\n                    \"docs::human_name\": \"Express Onezone\"\n                  }\n                },\n                {\n                  \"description\": \"Infrequently Accessed (single Availability zone).\",\n                  \"const\": \"ONEZONE_IA\",\n                  \"_metadata\": {\n                    \"logical_name\": \"OnezoneIa\",\n                    \"docs::human_name\": \"Onezone Ia\"\n                  }\n                },\n                {\n                  \"description\": \"Glacier Flexible Retrieval.\",\n                  \"const\": \"GLACIER\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Glacier\",\n                    \"docs::human_name\": \"Glacier\"\n                  }\n                },\n                {\n                  \"description\": \"Glacier Deep Archive.\",\n                  \"const\": \"DEEP_ARCHIVE\",\n                  \"_metadata\": {\n                    \"logical_name\": \"DeepArchive\",\n                    \"docs::human_name\": \"Deep Archive\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Storage Class\"\n              }\n            },\n            \"tags\": {\n              \"description\": \"The tag-set for the object.\",\n              \"type\": [\n                \"object\",\n                \"null\"\n              ],\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::additional_props_description\": \"A single tag.\",\n                \"docs::examples\": {\n                  \"PHI\": \"True\",\n                  \"Project\": \"Blue\",\n                  \"Classification\": \"confidential\"\n                },\n                \"docs::human_name\": \"Tags\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        },\n        {\n          \"description\": \"Encoding configuration.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"aws_s3\"\n      }\n    },\n    \"vector::sinks::aws_s_s::config::BaseSSSinkConfig\": {\n      \"description\": \"Base Configuration `aws_s_s` for sns and sqs sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"assume_role\": {\n          \"title\": \"The ARN of an [IAM role][iam_role] to assume at startup.\",\n          \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n          \"deprecated\": true,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Assume Role\"\n          }\n        },\n        \"auth\": {\n          \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n          \"default\": {\n            \"load_timeout_secs\": null,\n            \"imds\": {\n              \"max_attempts\": 4,\n              \"connect_timeout_seconds\": 1,\n              \"read_timeout_seconds\": 1\n            },\n            \"region\": null\n          },\n          \"$ref\": \"#/definitions/vector::aws::auth::AwsAuthentication\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"message_deduplication_id\": {\n          \"title\": \"The message deduplication ID value to allow AWS to identify duplicate messages.\",\n          \"description\": \"This value is a template which should result in a unique string for each event. See the [AWS\\ndocumentation][deduplication_id_docs] for more about how AWS does message deduplication.\\n\\n[deduplication_id_docs]: https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"{{ transaction_id }}\",\n            \"docs::human_name\": \"Message Deduplication ID\"\n          }\n        },\n        \"message_group_id\": {\n          \"title\": \"The tag that specifies that a message belongs to a specific message group.\",\n          \"description\": \"Can be applied only to FIFO queues.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"vector\",\n              \"vector-%Y-%m-%d\"\n            ],\n            \"docs::human_name\": \"Message Group ID\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      }\n    },\n    \"vector::sinks::aws_s_s::sns::config::SnsSinkConfig\": {\n      \"description\": \"Configuration for the `aws_sns` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"topic_arn\"\n          ],\n          \"properties\": {\n            \"topic_arn\": {\n              \"description\": \"The ARN of the Amazon SNS topic to which messages are sent.\",\n              \"type\": \"string\",\n              \"format\": \"uri\",\n              \"_metadata\": {\n                \"docs::examples\": \"arn:aws:sns:us-east-2:123456789012:MyTopic\",\n                \"docs::human_name\": \"Topic Arn\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        },\n        {\n          \"description\": \"Base Configuration `aws_s_s` for sns and sqs sink.\",\n          \"$ref\": \"#/definitions/vector::sinks::aws_s_s::config::BaseSSSinkConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"aws_sns\"\n      }\n    },\n    \"vector::sinks::aws_s_s::sqs::config::SqsSinkConfig\": {\n      \"description\": \"Configuration for the `aws_sqs` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"queue_url\"\n          ],\n          \"properties\": {\n            \"queue_url\": {\n              \"description\": \"The URL of the Amazon SQS queue to which messages are sent.\",\n              \"type\": \"string\",\n              \"format\": \"uri\",\n              \"_metadata\": {\n                \"docs::examples\": \"https://sqs.us-east-2.amazonaws.com/123456789012/MyQueue\",\n                \"docs::human_name\": \"Queue URL\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        },\n        {\n          \"description\": \"Base Configuration `aws_s_s` for sns and sqs sink.\",\n          \"$ref\": \"#/definitions/vector::sinks::aws_s_s::config::BaseSSSinkConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"aws_sqs\"\n      }\n    },\n    \"vector::sinks::axiom::AxiomConfig\": {\n      \"description\": \"Configuration for the `axiom` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"dataset\",\n        \"token\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"none\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"dataset\": {\n          \"description\": \"The Axiom dataset to write to.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${AXIOM_DATASET}\",\n              \"vector.dev\"\n            ],\n            \"docs::human_name\": \"Dataset\"\n          }\n        },\n        \"org_id\": {\n          \"title\": \"The Axiom organization ID.\",\n          \"description\": \"Only required when using personal tokens.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"${AXIOM_ORG_ID}\",\n              \"123abc\"\n            ],\n            \"docs::human_name\": \"Org ID\"\n          }\n        },\n        \"request\": {\n          \"description\": \"Outbound HTTP request settings.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            },\n            \"headers\": {}\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::http::RequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"token\": {\n          \"description\": \"The Axiom API token.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${AXIOM_TOKEN}\",\n              \"123abc\"\n            ],\n            \"docs::human_name\": \"Token\"\n          }\n        },\n        \"url\": {\n          \"title\": \"URI of the Axiom endpoint to send data to.\",\n          \"description\": \"Only required if not using Axiom Cloud.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"format\": \"uri\",\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"https://axiom.my-domain.com\",\n              \"${AXIOM_URL}\"\n            ],\n            \"docs::human_name\": \"URL\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"axiom\"\n      }\n    },\n    \"vector::sinks::azure_blob::config::AzureBlobSinkConfig\": {\n      \"description\": \"Configuration for the `azure_blob` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"container_name\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::BulkSizeBasedDefaultBatchSettings>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"blob_append_uuid\": {\n              \"title\": \"Whether or not to append a UUID v4 token to the end of the blob key.\",\n              \"description\": \"The UUID is appended to the timestamp portion of the object key, such that if the blob key\\ngenerated is `date=2022-07-18/1658176486`, setting this field to `true` results\\nin an blob key that looks like\\n`date=2022-07-18/1658176486-30f6652c-71da-4f9f-800d-a1189c47c547`.\\n\\nThis ensures there are no name collisions, and can be useful in high-volume workloads where\\nblob keys must be unique.\",\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Blob Append UUID\"\n              }\n            },\n            \"blob_prefix\": {\n              \"title\": \"A prefix to apply to all blob keys.\",\n              \"description\": \"Prefixes are useful for partitioning objects, such as by creating a blob key that\\nstores blobs under a particular directory. If using a prefix for this purpose, it must end\\nin `/` to act as a directory path. A trailing `/` is **not** automatically added.\",\n              \"default\": \"blob/%F/\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"date/%F/hour/%H/\",\n                  \"year=%Y/month=%m/day=%d/\",\n                  \"kubernetes/{{ metadata.cluster }}/{{ metadata.application_name }}/\"\n                ],\n                \"docs::human_name\": \"Blob Prefix\"\n              }\n            },\n            \"blob_time_format\": {\n              \"title\": \"The timestamp format for the time component of the blob key.\",\n              \"description\": \"By default, blob keys are appended with a timestamp that reflects when the blob are sent to\\nAzure Blob Storage, such that the resulting blob key is functionally equivalent to joining\\nthe blob prefix with the formatted timestamp, such as `date=2022-07-18/1658176486`.\\n\\nThis would represent a `blob_prefix` set to `date=%F/` and the timestamp of Mon Jul 18 2022\\n20:34:44 GMT+0000, with the `filename_time_format` being set to `%s`, which renders\\ntimestamps in seconds since the Unix epoch.\\n\\nSupports the common [`strftime`][chrono_strftime_specifiers] specifiers found in most\\nlanguages.\\n\\nWhen set to an empty string, no timestamp is appended to the blob prefix.\\n\\n[chrono_strftime_specifiers]: https://docs.rs/chrono/latest/chrono/format/strftime/index.html#specifiers\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::syntax_override\": \"strftime\",\n                \"docs::human_name\": \"Blob Time Format\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n              \"default\": \"gzip\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"connection_string\": {\n              \"title\": \"The Azure Blob Storage Account connection string.\",\n              \"description\": \"Authentication with access key is the only supported authentication method.\\n\\nEither `storage_account`, or this field, must be specified.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n              \"_metadata\": {\n                \"docs::examples\": \"DefaultEndpointsProtocol=https;AccountName=mylogstorage;AccountKey=storageaccountkeybase64encoded;EndpointSuffix=core.windows.net\",\n                \"docs::human_name\": \"Connection String\"\n              }\n            },\n            \"container_name\": {\n              \"description\": \"The Azure Blob Storage Account container name.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"my-logs\",\n                \"docs::human_name\": \"Container Name\"\n              }\n            },\n            \"endpoint\": {\n              \"title\": \"The Azure Blob Storage Endpoint URL.\",\n              \"description\": \"This is used to override the default blob storage endpoint URL in cases where you are using\\ncredentials read from the environment/managed identities or access tokens without using an\\nexplicit connection_string (which already explicitly supports overriding the blob endpoint\\nURL).\\n\\nThis may only be used with `storage_account` and is ignored when used with\\n`connection_string`.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"https://test.blob.core.usgovcloudapi.net/\",\n                  \"https://test.blob.core.windows.net/\"\n                ],\n                \"docs::human_name\": \"Endpoint\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 250,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"adaptive_concurrency\": {\n                  \"title\": \"Configuration of adaptive concurrency parameters.\",\n                  \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n                  \"default\": {\n                    \"initial_concurrency\": 1,\n                    \"decrease_ratio\": 0.9,\n                    \"ewma_alpha\": 0.4,\n                    \"rtt_deviation_scale\": 2.5,\n                    \"max_concurrency_limit\": 200\n                  },\n                  \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Adaptive Concurrency\"\n                  }\n                },\n                \"concurrency\": {\n                  \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n                  \"default\": \"adaptive\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Concurrency\"\n                  }\n                },\n                \"rate_limit_duration_secs\": {\n                  \"description\": \"The time window used for the `rate_limit_num` option.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Rate Limit Duration\"\n                  }\n                },\n                \"rate_limit_num\": {\n                  \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n                  \"default\": 250,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"requests\",\n                    \"docs::human_name\": \"Rate Limit Number\"\n                  }\n                },\n                \"retry_attempts\": {\n                  \"description\": \"The maximum number of retries to make for failed requests.\",\n                  \"default\": 9223372036854775807,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"retries\",\n                    \"docs::human_name\": \"Retry Attempts\"\n                  }\n                },\n                \"retry_initial_backoff_secs\": {\n                  \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n                  \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Retry Initial Backoff\"\n                  }\n                },\n                \"retry_jitter_mode\": {\n                  \"description\": \"The jitter mode to use for retry backoff behavior.\",\n                  \"default\": \"Full\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Retry Jitter Mode\"\n                  }\n                },\n                \"retry_max_duration_secs\": {\n                  \"description\": \"The maximum amount of time to wait between retries.\",\n                  \"default\": 30,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Max Retry Duration\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"title\": \"The time a request can take before being aborted.\",\n                  \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n                  \"default\": 60,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"storage_account\": {\n              \"title\": \"The Azure Blob Storage Account name.\",\n              \"description\": \"Attempts to load credentials for the account in the following ways, in order:\\n\\n- read from environment variables ([more information][env_cred_docs])\\n- looks for a [Managed Identity][managed_ident_docs]\\n- uses the `az` CLI tool to get an access token ([more information][az_cli_docs])\\n\\nEither `connection_string`, or this field, must be specified.\\n\\n[env_cred_docs]: https://docs.rs/azure_identity/latest/azure_identity/struct.EnvironmentCredential.html\\n[managed_ident_docs]: https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview\\n[az_cli_docs]: https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az-account-get-access-token\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"mylogstorage\",\n                \"docs::human_name\": \"Storage Account\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Encoding configuration.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"azure_blob\"\n      }\n    },\n    \"vector::sinks::azure_monitor_logs::config::AzureMonitorLogsConfig\": {\n      \"description\": \"Configuration for the `azure_monitor_logs` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"customer_id\",\n        \"log_type\",\n        \"shared_key\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"azure_resource_id\": {\n          \"title\": \"The [Resource ID][resource_id] of the Azure resource the data should be associated with.\",\n          \"description\": \"[resource_id]: https://docs.microsoft.com/en-us/azure/azure-monitor/platform/data-collector-api#request-headers\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/otherResourceGroup/providers/Microsoft.Storage/storageAccounts/examplestorage\",\n              \"/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/examplegroup/providers/Microsoft.SQL/servers/serverName/databases/databaseName\"\n            ],\n            \"docs::human_name\": \"Azure Resource ID\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"customer_id\": {\n          \"title\": \"The [unique identifier][uniq_id] for the Log Analytics workspace.\",\n          \"description\": \"[uniq_id]: https://docs.microsoft.com/en-us/azure/azure-monitor/platform/data-collector-api#request-uri-parameters\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"5ce893d9-2c32-4b6c-91a9-b0887c2de2d6\",\n              \"97ce69d9-b4be-4241-8dbd-d265edcf06c4\"\n            ],\n            \"docs::human_name\": \"Customer ID\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"host\": {\n          \"title\": \"[Alternative host][alt_host] for dedicated Azure regions.\",\n          \"description\": \"[alt_host]: https://docs.azure.cn/en-us/articles/guidance/developerdifferences#check-endpoints-in-azure\",\n          \"default\": \"ods.opinsights.azure.com\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"ods.opinsights.azure.us\",\n              \"ods.opinsights.azure.cn\"\n            ],\n            \"docs::human_name\": \"Host\"\n          }\n        },\n        \"log_type\": {\n          \"title\": \"The [record type][record_type] of the data that is being submitted.\",\n          \"description\": \"Can only contain letters, numbers, and underscores (_), and may not exceed 100 characters.\\n\\n[record_type]: https://docs.microsoft.com/en-us/azure/azure-monitor/platform/data-collector-api#request-headers\",\n          \"type\": \"string\",\n          \"pattern\": \"[a-zA-Z0-9_]{1,100}\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"MyTableName\",\n              \"MyRecordType\"\n            ],\n            \"docs::human_name\": \"Log Type\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"shared_key\": {\n          \"title\": \"The [primary or the secondary key][shared_key] for the Log Analytics workspace.\",\n          \"description\": \"[shared_key]: https://docs.microsoft.com/en-us/azure/azure-monitor/platform/data-collector-api#authorization\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"SERsIYhgMVlJB6uPsq49gCxNiruf6v0vhMYE+lfzbSGcXjdViZdV/e5pEMTYtw9f8SkVLf4LFlLCc2KxtRZfCA==\",\n              \"${AZURE_MONITOR_SHARED_KEY_ENV_VAR}\"\n            ],\n            \"docs::human_name\": \"Shared Key\"\n          }\n        },\n        \"time_generated_key\": {\n          \"title\": \"Use this option to customize the log field used as [`TimeGenerated`][1] in Azure.\",\n          \"description\": \"The setting of `log_schema.timestamp_key`, usually `timestamp`, is used here by default.\\nThis field should be used in rare cases where `TimeGenerated` should point to a specific log\\nfield. For example, use this field to set the log field `source_timestamp` as holding the\\nvalue that should be used as `TimeGenerated` on the Azure side.\\n\\n[1]: https://learn.microsoft.com/en-us/azure/azure-monitor/logs/log-standard-columns#timegenerated\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n          \"_metadata\": {\n            \"docs::examples\": \"time_generated\",\n            \"docs::human_name\": \"Time Generated Key\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"azure_monitor_logs\"\n      }\n    },\n    \"vector::sinks::blackhole::config::BlackholeConfig\": {\n      \"description\": \"Configuration for the `blackhole` sink.\",\n      \"default\": {\n        \"print_interval_secs\": 0,\n        \"rate\": null\n      },\n      \"type\": \"object\",\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"print_interval_secs\": {\n          \"title\": \"The interval between reporting a summary of activity.\",\n          \"description\": \"Set to `0` (default) to disable reporting.\",\n          \"default\": 0,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Print Interval\",\n            \"docs::examples\": 10\n          }\n        },\n        \"rate\": {\n          \"title\": \"The number of events, per second, that the sink is allowed to consume.\",\n          \"description\": \"By default, there is no limit.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::examples\": 1000,\n            \"docs::human_name\": \"Rate\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"blackhole\"\n      }\n    },\n    \"vector::sinks::clickhouse::config::ClickhouseConfig\": {\n      \"description\": \"Configuration for the `clickhouse` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoint\",\n        \"table\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"gzip\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"database\": {\n          \"description\": \"The database that contains the table that data is inserted into.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::examples\": \"mydatabase\",\n            \"docs::human_name\": \"Database\"\n          }\n        },\n        \"date_time_best_effort\": {\n          \"description\": \"Sets `date_time_input_format` to `best_effort`, allowing ClickHouse to properly parse RFC3339/ISO 8601.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Date Time Best Effort\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"description\": \"The endpoint of the ClickHouse server.\",\n          \"$ref\": \"#/definitions/vector::sinks::util::uri::UriSerde\",\n          \"_metadata\": {\n            \"docs::examples\": \"http://localhost:8123\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"format\": {\n          \"title\": \"Data format.\",\n          \"description\": \"The format to parse input data.\",\n          \"default\": \"json_each_row\",\n          \"oneOf\": [\n            {\n              \"description\": \"JSONEachRow.\",\n              \"const\": \"json_each_row\",\n              \"_metadata\": {\n                \"logical_name\": \"JsonEachRow\",\n                \"docs::human_name\": \"JSON Each Row\"\n              }\n            },\n            {\n              \"description\": \"JSONAsObject.\",\n              \"const\": \"json_as_object\",\n              \"_metadata\": {\n                \"logical_name\": \"JsonAsObject\",\n                \"docs::human_name\": \"JSON As Object\"\n              }\n            },\n            {\n              \"description\": \"JSONAsString.\",\n              \"const\": \"json_as_string\",\n              \"_metadata\": {\n                \"logical_name\": \"JsonAsString\",\n                \"docs::human_name\": \"JSON As String\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Format\"\n          }\n        },\n        \"insert_random_shard\": {\n          \"description\": \"Sets `insert_distributed_one_random_shard`, allowing ClickHouse to insert data into a random shard when using Distributed Table Engine.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Insert Random Shard\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"skip_unknown_fields\": {\n          \"description\": \"Sets `input_format_skip_unknown_fields`, allowing ClickHouse to discard fields not present in the table schema.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Skip Unknown Fields\"\n          }\n        },\n        \"table\": {\n          \"description\": \"The table that data is inserted into.\",\n          \"$ref\": \"#/definitions/vector::template::Template\",\n          \"_metadata\": {\n            \"docs::examples\": \"mytable\",\n            \"docs::human_name\": \"Table\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"clickhouse\"\n      }\n    },\n    \"vector::sinks::console::config::ConsoleSinkConfig\": {\n      \"description\": \"Configuration for the `console` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"target\": {\n              \"title\": \"The [standard stream][standard_streams] to write to.\",\n              \"description\": \"[standard_streams]: https://en.wikipedia.org/wiki/Standard_streams\",\n              \"default\": \"stdout\",\n              \"oneOf\": [\n                {\n                  \"title\": \"Write output to [STDOUT][stdout].\",\n                  \"description\": \"[stdout]: https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout)\",\n                  \"const\": \"stdout\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Stdout\",\n                    \"docs::human_name\": \"Stdout\"\n                  }\n                },\n                {\n                  \"title\": \"Write output to [STDERR][stderr].\",\n                  \"description\": \"[stderr]: https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\",\n                  \"const\": \"stderr\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Stderr\",\n                    \"docs::human_name\": \"Stderr\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Target\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Encoding configuration.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"console\"\n      }\n    },\n    \"vector::sinks::databend::config::DatabendConfig\": {\n      \"description\": \"Configuration for the `databend` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoint\",\n        \"table\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auth\": {\n          \"description\": \"The username and password to authenticate with. Overrides the username and password in DSN.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"description\": \"Compression configuration.\",\n          \"default\": \"none\",\n          \"oneOf\": [\n            {\n              \"description\": \"No compression.\",\n              \"const\": \"none\",\n              \"_metadata\": {\n                \"logical_name\": \"None\",\n                \"docs::human_name\": \"None\"\n              }\n            },\n            {\n              \"title\": \"[Gzip][gzip] compression.\",\n              \"description\": \"[gzip]: https://www.gzip.org/\",\n              \"const\": \"gzip\",\n              \"_metadata\": {\n                \"logical_name\": \"Gzip\",\n                \"docs::human_name\": \"Gzip\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The compression algorithm to use for sending.\",\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"database\": {\n          \"description\": \"The database that contains the table that data is inserted into. Overrides the database in DSN.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"mydatabase\",\n            \"docs::human_name\": \"Database\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"default\": {\n            \"codec\": \"json\",\n            \"json\": {\n              \"pretty\": false\n            }\n          },\n          \"allOf\": [\n            {\n              \"description\": \"Serializer configuration for Databend.\",\n              \"oneOf\": [\n                {\n                  \"title\": \"Encodes an event as a CSV message.\",\n                  \"description\": \"This codec must be configured with fields to encode.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Options for the CSV encoder.\",\n                      \"$ref\": \"#/definitions/codecs::encoding::format::csv::CsvSerializerConfig\"\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"codec\"\n                      ],\n                      \"properties\": {\n                        \"codec\": {\n                          \"title\": \"Encodes an event as a CSV message.\",\n                          \"description\": \"This codec must be configured with fields to encode.\",\n                          \"const\": \"csv\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Codec\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Csv\",\n                    \"docs::human_name\": \"CSV\"\n                  }\n                },\n                {\n                  \"title\": \"Encodes an event as [JSON][json].\",\n                  \"description\": \"[json]: https://www.json.org/\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Encoding options specific to the Json serializer.\",\n                      \"$ref\": \"#/definitions/codecs::encoding::format::json::JsonSerializerConfig\"\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"codec\"\n                      ],\n                      \"properties\": {\n                        \"codec\": {\n                          \"title\": \"Encodes an event as [JSON][json].\",\n                          \"description\": \"[json]: https://www.json.org/\",\n                          \"const\": \"json\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Codec\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Json\",\n                    \"docs::human_name\": \"JSON\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tag_description\": \"The codec to use for encoding events.\",\n                \"docs::enum_tagging\": \"internal\",\n                \"docs::enum_tag_field\": \"codec\"\n              }\n            },\n            {\n              \"description\": \"Transformations to prepare an event for serialization.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"except_fields\": {\n                  \"description\": \"List of fields that are excluded from the encoded event.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"array\",\n                    \"null\"\n                  ],\n                  \"items\": {\n                    \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n                  },\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"Except Fields\"\n                  }\n                },\n                \"only_fields\": {\n                  \"description\": \"List of fields that are included in the encoded event.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"array\",\n                    \"null\"\n                  ],\n                  \"items\": {\n                    \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n                  },\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"Only Fields\"\n                  }\n                },\n                \"timestamp_format\": {\n                  \"description\": \"Format used for timestamp fields.\",\n                  \"default\": null,\n                  \"oneOf\": [\n                    {\n                      \"type\": \"null\"\n                    },\n                    {\n                      \"description\": \"The format in which a timestamp should be represented.\",\n                      \"oneOf\": [\n                        {\n                          \"description\": \"Represent the timestamp as a Unix timestamp.\",\n                          \"const\": \"unix\",\n                          \"_metadata\": {\n                            \"logical_name\": \"Unix\",\n                            \"docs::human_name\": \"Unix\"\n                          }\n                        },\n                        {\n                          \"description\": \"Represent the timestamp as a RFC 3339 timestamp.\",\n                          \"const\": \"rfc3339\",\n                          \"_metadata\": {\n                            \"logical_name\": \"Rfc3339\",\n                            \"docs::human_name\": \"RFC3339\"\n                          }\n                        },\n                        {\n                          \"description\": \"Represent the timestamp as a Unix timestamp in milliseconds.\",\n                          \"const\": \"unix_ms\",\n                          \"_metadata\": {\n                            \"logical_name\": \"UnixMs\",\n                            \"docs::human_name\": \"Unix Ms\"\n                          }\n                        },\n                        {\n                          \"description\": \"Represent the timestamp as a Unix timestamp in microseconds\",\n                          \"const\": \"unix_us\",\n                          \"_metadata\": {\n                            \"logical_name\": \"UnixUs\",\n                            \"docs::human_name\": \"Unix US\"\n                          }\n                        },\n                        {\n                          \"description\": \"Represent the timestamp as a Unix timestamp in nanoseconds.\",\n                          \"const\": \"unix_ns\",\n                          \"_metadata\": {\n                            \"logical_name\": \"UnixNs\",\n                            \"docs::human_name\": \"Unix Ns\"\n                          }\n                        },\n                        {\n                          \"description\": \"Represent the timestamp as a Unix timestamp in floating point.\",\n                          \"const\": \"unix_float\",\n                          \"_metadata\": {\n                            \"logical_name\": \"UnixFloat\",\n                            \"docs::human_name\": \"Unix Float\"\n                          }\n                        }\n                      ],\n                      \"_metadata\": {\n                        \"docs::enum_tagging\": \"external\"\n                      }\n                    }\n                  ],\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"Timestamp Format\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"description\": \"The DSN of the Databend server.\",\n          \"$ref\": \"#/definitions/vector::sinks::util::uri::UriSerde\",\n          \"_metadata\": {\n            \"docs::examples\": \"databend://localhost:8000/default?sslmode=disable\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"missing_field_as\": {\n          \"description\": \"Defines how missing fields are handled for NDJson.\\nRefer to https://docs.databend.com/sql/sql-reference/file-format-options#null_field_as\",\n          \"default\": \"NULL\",\n          \"oneOf\": [\n            {\n              \"description\": \"Generates an error if a missing field is encountered.\",\n              \"const\": \"ERROR\",\n              \"_metadata\": {\n                \"logical_name\": \"Error\",\n                \"docs::human_name\": \"Error\"\n              }\n            },\n            {\n              \"description\": \"Interprets missing fields as NULL values. An error will be generated for non-nullable fields.\",\n              \"const\": \"NULL\",\n              \"_metadata\": {\n                \"logical_name\": \"Null\",\n                \"docs::human_name\": \"Null\"\n              }\n            },\n            {\n              \"description\": \"Uses the default value of the field for missing fields.\",\n              \"const\": \"FIELD_DEFAULT\",\n              \"_metadata\": {\n                \"logical_name\": \"FieldDefault\",\n                \"docs::human_name\": \"Field Default\"\n              }\n            },\n            {\n              \"description\": \"Uses the default value of the field's data type for missing fields.\",\n              \"const\": \"TYPE_DEFAULT\",\n              \"_metadata\": {\n                \"logical_name\": \"TypeDefault\",\n                \"docs::human_name\": \"Type Default\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"How to handle missing fields for NDJson.\",\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Missing Field As\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"table\": {\n          \"description\": \"The table that data is inserted into.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"mytable\",\n            \"docs::human_name\": \"Table\"\n          }\n        },\n        \"tls\": {\n          \"description\": \"The TLS configuration to use when connecting to the Databend server.\",\n          \"deprecated\": true,\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"deprecated_message\": \"This option has been deprecated, use arguments in the DSN instead.\",\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"databend\"\n      }\n    },\n    \"vector::sinks::datadog::LocalDatadogCommonConfig\": {\n      \"description\": \"Shared configuration for Datadog sinks.\\nContains the maximum set of common settings that applies to all DD sink components.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"default_api_key\": {\n          \"title\": \"The default Datadog [API key][api_key] to use in authentication of HTTP requests.\",\n          \"description\": \"If an event has a Datadog [API key][api_key] set explicitly in its metadata, it takes\\nprecedence over this setting.\\n\\nThis value can also be set by specifying the `DD_API_KEY` environment variable.\\nThe value specified here takes precedence over the environment variable.\\n\\n[api_key]: https://docs.datadoghq.com/api/?lang=bash#authentication\\n[global_options]: /docs/reference/configuration/global-options/#datadog\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${DATADOG_API_KEY_ENV_VAR}\",\n              \"ef8d5de700e7989468166c40fc8a0ccd\"\n            ],\n            \"docs::human_name\": \"Default API Key\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The endpoint to send observability data to.\",\n          \"description\": \"The endpoint must contain an HTTP scheme, and may specify a hostname or IP\\naddress and port. The API path should NOT be specified as this is handled by\\nthe sink.\\n\\nIf set, overrides the `site` option.\",\n          \"default\": null,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::advanced\": true,\n            \"docs::examples\": [\n              \"http://127.0.0.1:8080\",\n              \"http://example.com:12345\"\n            ],\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"site\": {\n          \"title\": \"The Datadog [site][dd_site] to send observability data to.\",\n          \"description\": \"This value can also be set by specifying the `DD_SITE` environment variable.\\nThe value specified here takes precedence over the environment variable.\\n\\nIf not specified by the environment variable, a default value of\\n`datadoghq.com` is taken.\\n\\n[dd_site]: https://docs.datadoghq.com/getting_started/site\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"us3.datadoghq.com\",\n              \"datadoghq.eu\"\n            ],\n            \"docs::human_name\": \"Site\"\n          }\n        },\n        \"tls\": {\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      }\n    },\n    \"vector::sinks::datadog::events::config::DatadogEventsConfig\": {\n      \"description\": \"Configuration for the `datadog_events` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Shared configuration for Datadog sinks.\\nContains the maximum set of common settings that applies to all DD sink components.\",\n          \"$ref\": \"#/definitions/vector::sinks::datadog::LocalDatadogCommonConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"datadog_events\"\n      }\n    },\n    \"vector::sinks::datadog::logs::config::DatadogLogsConfig\": {\n      \"description\": \"Configuration for the `datadog_logs` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 4250000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 1000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 5.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"compression\": {\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vector::sinks::util::buffer::compression::Compression>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Transformations to prepare an event for serialization.\",\n              \"default\": {},\n              \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"request\": {\n              \"description\": \"Outbound HTTP request settings.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                },\n                \"headers\": {}\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::http::RequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Shared configuration for Datadog sinks.\\nContains the maximum set of common settings that applies to all DD sink components.\",\n          \"$ref\": \"#/definitions/vector::sinks::datadog::LocalDatadogCommonConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"datadog_logs\"\n      }\n    },\n    \"vector::sinks::datadog::metrics::config::DatadogMetricsConfig\": {\n      \"description\": \"Configuration for the `datadog_metrics` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 100000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 2.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"default_namespace\": {\n              \"title\": \"Sets the default namespace for any metrics sent.\",\n              \"description\": \"This namespace is only used if a metric has no existing namespace. When a namespace is\\npresent, it is used as a prefix to the metric name, and separated with a period (`.`).\",\n              \"default\": null,\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"myservice\",\n                \"docs::human_name\": \"Default Namespace\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Shared configuration for Datadog sinks.\\nContains the maximum set of common settings that applies to all DD sink components.\",\n          \"$ref\": \"#/definitions/vector::sinks::datadog::LocalDatadogCommonConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"datadog_metrics\"\n      }\n    },\n    \"vector::sinks::datadog::traces::config::DatadogTracesConfig\": {\n      \"description\": \"Configuration for the `datadog_traces` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 3000000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 1000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 10.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"compression\": {\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vector::sinks::util::buffer::compression::Compression>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Shared configuration for Datadog sinks.\\nContains the maximum set of common settings that applies to all DD sink components.\",\n          \"$ref\": \"#/definitions/vector::sinks::datadog::LocalDatadogCommonConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"datadog_traces\"\n      }\n    },\n    \"vector::sinks::elasticsearch::config::ElasticsearchConfig\": {\n      \"description\": \"Configuration for the `elasticsearch` sink.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"api_version\": {\n          \"description\": \"The API version of Elasticsearch.\",\n          \"default\": \"auto\",\n          \"oneOf\": [\n            {\n              \"title\": \"Auto-detect the API version.\",\n              \"description\": \"If the [cluster state version endpoint][es_version] isn't reachable, a warning is logged to\\nstdout, and the version is assumed to be V6 if the `suppress_type_name` option is set to\\n`true`. Otherwise, the version is assumed to be V8. In the future, the sink instead\\nreturns an error during configuration parsing, since a wrongly assumed version could lead to\\nincorrect API calls.\\n\\n[es_version]: https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-state.html#cluster-state-api-path-params\",\n              \"const\": \"auto\",\n              \"_metadata\": {\n                \"logical_name\": \"Auto\",\n                \"docs::human_name\": \"Auto\"\n              }\n            },\n            {\n              \"description\": \"Use the Elasticsearch 6.x API.\",\n              \"const\": \"v6\",\n              \"_metadata\": {\n                \"logical_name\": \"V6\",\n                \"docs::human_name\": \"V6\"\n              }\n            },\n            {\n              \"description\": \"Use the Elasticsearch 7.x API.\",\n              \"const\": \"v7\",\n              \"_metadata\": {\n                \"logical_name\": \"V7\",\n                \"docs::human_name\": \"V7\"\n              }\n            },\n            {\n              \"description\": \"Use the Elasticsearch 8.x API.\",\n              \"const\": \"v8\",\n              \"_metadata\": {\n                \"logical_name\": \"V8\",\n                \"docs::human_name\": \"V8\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"API Version\"\n          }\n        },\n        \"auth\": {\n          \"description\": \"Elasticsearch Authentication strategies.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Elasticsearch Authentication strategies.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"HTTP Basic Authentication.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"password\",\n                    \"strategy\",\n                    \"user\"\n                  ],\n                  \"properties\": {\n                    \"password\": {\n                      \"description\": \"Basic authentication password.\",\n                      \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                      \"_metadata\": {\n                        \"docs::examples\": [\n                          \"${ELASTICSEARCH_PASSWORD}\",\n                          \"password\"\n                        ],\n                        \"docs::human_name\": \"Password\"\n                      }\n                    },\n                    \"strategy\": {\n                      \"description\": \"HTTP Basic Authentication.\",\n                      \"const\": \"basic\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Strategy\"\n                      }\n                    },\n                    \"user\": {\n                      \"description\": \"Basic authentication username.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::examples\": [\n                          \"${ELASTICSEARCH_USERNAME}\",\n                          \"username\"\n                        ],\n                        \"docs::human_name\": \"User\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Basic\",\n                    \"docs::human_name\": \"Basic\"\n                  }\n                },\n                {\n                  \"description\": \"Amazon OpenSearch Service-specific authentication.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n                      \"anyOf\": [\n                        {\n                          \"description\": \"Authenticate using a fixed access key and secret pair.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"access_key_id\",\n                            \"secret_access_key\"\n                          ],\n                          \"properties\": {\n                            \"access_key_id\": {\n                              \"description\": \"The AWS access key ID.\",\n                              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"AKIAIOSFODNN7EXAMPLE\",\n                                \"docs::human_name\": \"Access Key ID\"\n                              }\n                            },\n                            \"assume_role\": {\n                              \"title\": \"The ARN of an [IAM role][iam_role] to assume.\",\n                              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"arn:aws:iam::123456789098:role/my_role\",\n                                \"docs::human_name\": \"Assume Role\"\n                              }\n                            },\n                            \"external_id\": {\n                              \"title\": \"The optional unique external ID in conjunction with role to assume.\",\n                              \"description\": \"[external_id]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"randomEXAMPLEidString\",\n                                \"docs::human_name\": \"External ID\"\n                              }\n                            },\n                            \"region\": {\n                              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n                              \"description\": \"If not set, this will default to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"us-west-2\",\n                                \"docs::human_name\": \"Region\"\n                              }\n                            },\n                            \"secret_access_key\": {\n                              \"description\": \"The AWS secret access key.\",\n                              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n                                \"docs::human_name\": \"Secret Access Key\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"AccessKey\",\n                            \"docs::human_name\": \"Access Key\"\n                          }\n                        },\n                        {\n                          \"title\": \"Authenticate using credentials stored in a file.\",\n                          \"description\": \"Additionally, the specific credential profile to use can be set.\\nThe file format must match the credentials file format outlined in\\n<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html>.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"credentials_file\"\n                          ],\n                          \"properties\": {\n                            \"credentials_file\": {\n                              \"description\": \"Path to the credentials file.\",\n                              \"type\": \"string\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"/my/aws/credentials\",\n                                \"docs::human_name\": \"Credentials File\"\n                              }\n                            },\n                            \"profile\": {\n                              \"title\": \"The credentials profile to use.\",\n                              \"description\": \"Used to select AWS credentials from a provided credentials file.\",\n                              \"default\": \"default\",\n                              \"type\": \"string\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"develop\",\n                                \"docs::human_name\": \"Profile\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"File\",\n                            \"docs::human_name\": \"File\"\n                          }\n                        },\n                        {\n                          \"description\": \"Assume the given role ARN.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"assume_role\"\n                          ],\n                          \"properties\": {\n                            \"assume_role\": {\n                              \"title\": \"The ARN of an [IAM role][iam_role] to assume.\",\n                              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n                              \"type\": \"string\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"arn:aws:iam::123456789098:role/my_role\",\n                                \"docs::human_name\": \"Assume Role\"\n                              }\n                            },\n                            \"external_id\": {\n                              \"title\": \"The optional unique external ID in conjunction with role to assume.\",\n                              \"description\": \"[external_id]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"randomEXAMPLEidString\",\n                                \"docs::human_name\": \"External ID\"\n                              }\n                            },\n                            \"imds\": {\n                              \"description\": \"Configuration for authenticating with AWS through IMDS.\",\n                              \"default\": {\n                                \"max_attempts\": 4,\n                                \"connect_timeout_seconds\": 1,\n                                \"read_timeout_seconds\": 1\n                              },\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"connect_timeout_seconds\": {\n                                  \"description\": \"Connect timeout for IMDS.\",\n                                  \"default\": 1,\n                                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Connect Timeout Seconds\"\n                                  }\n                                },\n                                \"max_attempts\": {\n                                  \"description\": \"Number of IMDS retries for fetching tokens and metadata.\",\n                                  \"default\": 4,\n                                  \"type\": \"integer\",\n                                  \"maximum\": 4294967295.0,\n                                  \"minimum\": 0.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"uint\",\n                                    \"docs::human_name\": \"Max Attempts\"\n                                  }\n                                },\n                                \"read_timeout_seconds\": {\n                                  \"description\": \"Read timeout for IMDS.\",\n                                  \"default\": 1,\n                                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Read Timeout Seconds\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"IMDS\"\n                              }\n                            },\n                            \"load_timeout_secs\": {\n                              \"title\": \"Timeout for assuming the role, in seconds.\",\n                              \"description\": \"Relevant when the default credentials chain or `assume_role` is used.\",\n                              \"type\": [\n                                \"integer\",\n                                \"null\"\n                              ],\n                              \"maximum\": 9007199254740991.0,\n                              \"minimum\": 0.0,\n                              \"_metadata\": {\n                                \"docs::numeric_type\": \"uint\",\n                                \"docs::optional\": true,\n                                \"docs::type_unit\": \"seconds\",\n                                \"docs::examples\": 30,\n                                \"docs::human_name\": \"Load Timeout\"\n                              }\n                            },\n                            \"region\": {\n                              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n                              \"description\": \"If not set, this defaults to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"us-west-2\",\n                                \"docs::human_name\": \"Region\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Role\",\n                            \"docs::human_name\": \"Role\"\n                          }\n                        },\n                        {\n                          \"description\": \"Default authentication strategy which tries a variety of substrategies in sequential order.\",\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"imds\": {\n                              \"description\": \"Configuration for authenticating with AWS through IMDS.\",\n                              \"default\": {\n                                \"max_attempts\": 4,\n                                \"connect_timeout_seconds\": 1,\n                                \"read_timeout_seconds\": 1\n                              },\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"connect_timeout_seconds\": {\n                                  \"description\": \"Connect timeout for IMDS.\",\n                                  \"default\": 1,\n                                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Connect Timeout Seconds\"\n                                  }\n                                },\n                                \"max_attempts\": {\n                                  \"description\": \"Number of IMDS retries for fetching tokens and metadata.\",\n                                  \"default\": 4,\n                                  \"type\": \"integer\",\n                                  \"maximum\": 4294967295.0,\n                                  \"minimum\": 0.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"uint\",\n                                    \"docs::human_name\": \"Max Attempts\"\n                                  }\n                                },\n                                \"read_timeout_seconds\": {\n                                  \"description\": \"Read timeout for IMDS.\",\n                                  \"default\": 1,\n                                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Read Timeout Seconds\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"IMDS\"\n                              }\n                            },\n                            \"load_timeout_secs\": {\n                              \"title\": \"Timeout for successfully loading any credentials, in seconds.\",\n                              \"description\": \"Relevant when the default credentials chain or `assume_role` is used.\",\n                              \"type\": [\n                                \"integer\",\n                                \"null\"\n                              ],\n                              \"maximum\": 9007199254740991.0,\n                              \"minimum\": 0.0,\n                              \"_metadata\": {\n                                \"docs::numeric_type\": \"uint\",\n                                \"docs::optional\": true,\n                                \"docs::type_unit\": \"seconds\",\n                                \"docs::examples\": 30,\n                                \"docs::human_name\": \"Load Timeout\"\n                              }\n                            },\n                            \"region\": {\n                              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n                              \"description\": \"If not set, this defaults to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"us-west-2\",\n                                \"docs::human_name\": \"Region\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Default\",\n                            \"docs::human_name\": \"Default\"\n                          }\n                        }\n                      ],\n                      \"_metadata\": {\n                        \"docs::enum_tagging\": \"untagged\"\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"strategy\"\n                      ],\n                      \"properties\": {\n                        \"strategy\": {\n                          \"description\": \"Amazon OpenSearch Service-specific authentication.\",\n                          \"const\": \"aws\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Strategy\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Aws\",\n                    \"docs::human_name\": \"AWS\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tag_description\": \"The authentication strategy to use.\",\n                \"docs::enum_tagging\": \"internal\",\n                \"docs::enum_tag_field\": \"strategy\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"aws\": {\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector::aws::region::RegionOrEndpoint>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"bulk\": {\n          \"description\": \"Elasticsearch bulk mode configuration.\",\n          \"default\": {\n            \"action\": \"index\",\n            \"index\": \"vector-%Y.%m.%d\",\n            \"version\": null,\n            \"version_type\": \"internal\"\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"action\": {\n              \"title\": \"Action to use when making requests to the [Elasticsearch Bulk API][es_bulk].\",\n              \"description\": \"Only `index` and `create` actions are supported.\\n\\n[es_bulk]: https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html\",\n              \"default\": \"index\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"create\",\n                  \"{{ action }}\"\n                ],\n                \"docs::human_name\": \"Action\"\n              }\n            },\n            \"index\": {\n              \"description\": \"The name of the index to write events to.\",\n              \"default\": \"vector-%Y.%m.%d\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"application-{{ application_id }}-%Y-%m-%d\",\n                  \"{{ index }}\"\n                ],\n                \"docs::human_name\": \"Index\"\n              }\n            },\n            \"version\": {\n              \"description\": \"Version field value.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"{{ obj_version }}-%Y-%m-%d\",\n                  \"123\"\n                ],\n                \"docs::human_name\": \"Version\"\n              }\n            },\n            \"version_type\": {\n              \"title\": \"Version type.\",\n              \"description\": \"Possible values are `internal`, `external` or `external_gt` and `external_gte`.\\n\\n[es_index_versioning]: https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#index-versioning\",\n              \"default\": \"internal\",\n              \"oneOf\": [\n                {\n                  \"description\": \"The `internal` type.\",\n                  \"const\": \"internal\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Internal\",\n                    \"docs::human_name\": \"Internal\"\n                  }\n                },\n                {\n                  \"description\": \"The `external` or `external_gt` type.\",\n                  \"const\": \"external\",\n                  \"_metadata\": {\n                    \"logical_name\": \"External\",\n                    \"docs::human_name\": \"External\"\n                  }\n                },\n                {\n                  \"description\": \"The `external_gte` type.\",\n                  \"const\": \"external_gte\",\n                  \"_metadata\": {\n                    \"logical_name\": \"ExternalGte\",\n                    \"docs::human_name\": \"External Gte\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"internal\",\n                  \"external\"\n                ],\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Version Type\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Bulk\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"none\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"data_stream\": {\n          \"description\": \"Elasticsearch data stream mode configuration.\",\n          \"default\": null,\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Elasticsearch data stream mode configuration.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"auto_routing\": {\n                  \"title\": \"Automatically routes events by deriving the data stream name using specific event fields.\",\n                  \"description\": \"The format of the data stream name is `<type>-<dataset>-<namespace>`, where each value comes\\nfrom the `data_stream` configuration field of the same name.\\n\\nIf enabled, the value of the `data_stream.type`, `data_stream.dataset`, and\\n`data_stream.namespace` event fields are used if they are present. Otherwise, the values\\nset in this configuration are used.\",\n                  \"default\": true,\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Auto Routing\"\n                  }\n                },\n                \"dataset\": {\n                  \"description\": \"The data stream dataset used to construct the data stream at index time.\",\n                  \"default\": \"generic\",\n                  \"$ref\": \"#/definitions/vector::template::Template\",\n                  \"_metadata\": {\n                    \"docs::examples\": [\n                      \"generic\",\n                      \"nginx\",\n                      \"{{ service }}\"\n                    ],\n                    \"docs::human_name\": \"Dataset\"\n                  }\n                },\n                \"namespace\": {\n                  \"description\": \"The data stream namespace used to construct the data stream at index time.\",\n                  \"default\": \"default\",\n                  \"$ref\": \"#/definitions/vector::template::Template\",\n                  \"_metadata\": {\n                    \"docs::examples\": \"{{ environment }}\",\n                    \"docs::human_name\": \"Namespace\"\n                  }\n                },\n                \"sync_fields\": {\n                  \"title\": \"Automatically adds and syncs the `data_stream.*` event fields if they are missing from the event.\",\n                  \"description\": \"This ensures that fields match the name of the data stream that is receiving events.\",\n                  \"default\": true,\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Sync Fields\"\n                  }\n                },\n                \"type\": {\n                  \"description\": \"The data stream type used to construct the data stream at index time.\",\n                  \"default\": \"logs\",\n                  \"$ref\": \"#/definitions/vector::template::Template\",\n                  \"_metadata\": {\n                    \"docs::examples\": [\n                      \"metrics\",\n                      \"synthetics\",\n                      \"{{ type }}\"\n                    ],\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Data Stream\"\n          }\n        },\n        \"distribution\": {\n          \"description\": \"Options for determining the health of an endpoint.\",\n          \"default\": null,\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Options for determining the health of an endpoint.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"retry_initial_backoff_secs\": {\n                  \"description\": \"Initial delay between attempts to reactivate endpoints once they become unhealthy.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Retry Initial Backoff\"\n                  }\n                },\n                \"retry_max_duration_secs\": {\n                  \"description\": \"Maximum delay between attempts to reactivate endpoints once they become unhealthy.\",\n                  \"default\": 3600,\n                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Max Retry Duration\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Distribution\"\n          }\n        },\n        \"doc_type\": {\n          \"title\": \"The [`doc_type`][doc_type] for your index data.\",\n          \"description\": \"This is only relevant for Elasticsearch <= 6.X. If you are using >= 7.0 you do not need to\\nset this option since Elasticsearch has removed it.\\n\\n[doc_type]: https://www.elastic.co/guide/en/elasticsearch/reference/6.8/actions-index.html\",\n          \"default\": \"_doc\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Doc Type\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The Elasticsearch endpoint to send logs to.\",\n          \"description\": \"The endpoint must contain an HTTP scheme, and may specify a\\nhostname or IP address and port.\",\n          \"default\": null,\n          \"deprecated\": true,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"deprecated_message\": \"This option has been deprecated, the `endpoints` option should be used instead.\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"endpoints\": {\n          \"title\": \"A list of Elasticsearch endpoints to send logs to.\",\n          \"description\": \"The endpoint must contain an HTTP scheme, and may specify a\\nhostname or IP address and port.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"http://10.24.32.122:9000\",\n              \"https://example.com\",\n              \"https://user:password@example.com\"\n            ],\n            \"docs::human_name\": \"Endpoints\"\n          }\n        },\n        \"id_key\": {\n          \"title\": \"The name of the event key that should map to Elasticsearch’s [`_id` field][es_id].\",\n          \"description\": \"By default, the `_id` field is not set, which allows Elasticsearch to set this\\nautomatically. Setting your own Elasticsearch IDs can [hinder performance][perf_doc].\\n\\n[es_id]: https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-id-field.html\\n[perf_doc]: https://www.elastic.co/guide/en/elasticsearch/reference/master/tune-for-indexing-speed.html#_use_auto_generated_ids\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::ConfigValuePath>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::examples\": [\n              \"id\",\n              \"_id\"\n            ],\n            \"docs::human_name\": \"ID Key\"\n          }\n        },\n        \"metrics\": {\n          \"description\": \"Configuration for the `metric_to_log` transform.\",\n          \"default\": null,\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"$ref\": \"#/definitions/vector::transforms::metric_to_log::MetricToLogConfig\"\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Metrics\"\n          }\n        },\n        \"mode\": {\n          \"description\": \"Elasticsearch Indexing mode.\",\n          \"default\": \"bulk\",\n          \"oneOf\": [\n            {\n              \"description\": \"Ingests documents in bulk, using the bulk API `index` action.\",\n              \"const\": \"bulk\",\n              \"_metadata\": {\n                \"logical_name\": \"Bulk\",\n                \"docs::human_name\": \"Bulk\"\n              }\n            },\n            {\n              \"title\": \"Ingests documents in bulk, using the bulk API `create` action.\",\n              \"description\": \"Elasticsearch Data Streams only support the `create` action.\",\n              \"const\": \"data_stream\",\n              \"_metadata\": {\n                \"logical_name\": \"DataStream\",\n                \"docs::human_name\": \"Data Stream\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Mode\"\n          }\n        },\n        \"pipeline\": {\n          \"description\": \"The name of the pipeline to apply.\",\n          \"default\": null,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::advanced\": true,\n            \"docs::examples\": \"pipeline-name\",\n            \"docs::human_name\": \"Pipeline\"\n          }\n        },\n        \"query\": {\n          \"description\": \"Custom parameters to add to the query string for each HTTP request sent to Elasticsearch.\",\n          \"default\": null,\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::advanced\": true,\n            \"docs::additional_props_description\": \"A query string parameter.\",\n            \"docs::examples\": {\n              \"X-Powered-By\": \"Vector\"\n            },\n            \"docs::human_name\": \"Query\"\n          }\n        },\n        \"request\": {\n          \"description\": \"Outbound HTTP request settings.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            },\n            \"headers\": {}\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::http::RequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"request_retry_partial\": {\n          \"title\": \"Whether or not to retry successful requests containing partial failures.\",\n          \"description\": \"To avoid duplicates in Elasticsearch, please use option `id_key`.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Request Retry Partial\"\n          }\n        },\n        \"suppress_type_name\": {\n          \"title\": \"Whether or not to send the `type` field to Elasticsearch.\",\n          \"description\": \"The `type` field was deprecated in Elasticsearch 7.x and removed in Elasticsearch 8.x.\\n\\nIf enabled, the `doc_type` option is ignored.\",\n          \"default\": false,\n          \"deprecated\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"deprecated_message\": \"This option has been deprecated, the `api_version` option should be used instead.\",\n            \"docs::human_name\": \"Suppress Type Name\"\n          }\n        },\n        \"tls\": {\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"elasticsearch\"\n      }\n    },\n    \"vector::sinks::file::FileSinkConfig\": {\n      \"description\": \"Configuration for the `file` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"path\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"compression\": {\n              \"description\": \"Compression configuration.\",\n              \"default\": \"none\",\n              \"oneOf\": [\n                {\n                  \"title\": \"[Gzip][gzip] compression.\",\n                  \"description\": \"[gzip]: https://www.gzip.org/\",\n                  \"const\": \"gzip\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Gzip\",\n                    \"docs::human_name\": \"Gzip\"\n                  }\n                },\n                {\n                  \"title\": \"[Zstandard][zstd] compression.\",\n                  \"description\": \"[zstd]: https://facebook.github.io/zstd/\",\n                  \"const\": \"zstd\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Zstd\",\n                    \"docs::human_name\": \"Zstd\"\n                  }\n                },\n                {\n                  \"description\": \"No compression.\",\n                  \"const\": \"none\",\n                  \"_metadata\": {\n                    \"logical_name\": \"None\",\n                    \"docs::human_name\": \"None\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"idle_timeout_secs\": {\n              \"title\": \"The amount of time that a file can be idle and stay open.\",\n              \"description\": \"After not receiving any events in this amount of time, the file is flushed and closed.\",\n              \"default\": 30,\n              \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": 600,\n                \"docs::human_name\": \"Idle Timeout\"\n              }\n            },\n            \"internal_metrics\": {\n              \"description\": \"Configuration of internal metrics for file-based components.\",\n              \"default\": {\n                \"include_file_tag\": false\n              },\n              \"$ref\": \"#/definitions/vector::internal_events::file::FileInternalMetricsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Internal Metrics\"\n              }\n            },\n            \"path\": {\n              \"title\": \"File path to write events to.\",\n              \"description\": \"Compression format extension must be explicit.\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"/tmp/vector-%Y-%m-%d.log\",\n                  \"/tmp/application-{{ application_id }}-%Y-%m-%d.log\",\n                  \"/tmp/vector-%Y-%m-%d.log.zst\"\n                ],\n                \"docs::human_name\": \"Path\"\n              }\n            },\n            \"timezone\": {\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Timezone\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Encoding configuration.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"file\"\n      }\n    },\n    \"vector::sinks::gcp::cloud_storage::GcsSinkConfig\": {\n      \"description\": \"Configuration for the `gcp_cloud_storage` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"bucket\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"acl\": {\n              \"title\": \"The Predefined ACL to apply to created objects.\",\n              \"description\": \"For more information, see [Predefined ACLs][predefined_acls].\\n\\n[predefined_acls]: https://cloud.google.com/storage/docs/access-control/lists#predefined-acl\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"title\": \"GCS Predefined ACLs.\",\n                  \"description\": \"For more information, see [Predefined ACLs][predefined_acls].\\n\\n[predefined_acls]: https://cloud.google.com/storage/docs/access-control/lists#predefined-acl\",\n                  \"oneOf\": [\n                    {\n                      \"title\": \"Bucket/object can be read by authenticated users.\",\n                      \"description\": \"The bucket/object owner is granted the `OWNER` permission, and anyone authenticated Google\\naccount holder is granted the `READER` permission.\",\n                      \"const\": \"authenticated-read\",\n                      \"_metadata\": {\n                        \"logical_name\": \"AuthenticatedRead\",\n                        \"docs::human_name\": \"Authenticated Read\"\n                      }\n                    },\n                    {\n                      \"title\": \"Object is semi-private.\",\n                      \"description\": \"Both the object owner and bucket owner are granted the `OWNER` permission.\\n\\nOnly relevant when specified for an object: this predefined ACL is otherwise ignored when\\nspecified for a bucket.\",\n                      \"const\": \"bucket-owner-full-control\",\n                      \"_metadata\": {\n                        \"logical_name\": \"BucketOwnerFullControl\",\n                        \"docs::human_name\": \"Bucket Owner Full Control\"\n                      }\n                    },\n                    {\n                      \"title\": \"Object is private, except to the bucket owner.\",\n                      \"description\": \"The object owner is granted the `OWNER` permission, and the bucket owner is granted the\\n`READER` permission.\\n\\nOnly relevant when specified for an object: this predefined ACL is otherwise ignored when\\nspecified for a bucket.\",\n                      \"const\": \"bucket-owner-read\",\n                      \"_metadata\": {\n                        \"logical_name\": \"BucketOwnerRead\",\n                        \"docs::human_name\": \"Bucket Owner Read\"\n                      }\n                    },\n                    {\n                      \"title\": \"Bucket/object are private.\",\n                      \"description\": \"The bucket/object owner is granted the `OWNER` permission, and no one else has\\naccess.\",\n                      \"const\": \"private\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Private\",\n                        \"docs::human_name\": \"Private\"\n                      }\n                    },\n                    {\n                      \"title\": \"Bucket/object are private within the project.\",\n                      \"description\": \"Project owners and project editors are granted the `OWNER` permission, and anyone who is\\npart of the project team is granted the `READER` permission.\\n\\nThis is the default.\",\n                      \"const\": \"project-private\",\n                      \"_metadata\": {\n                        \"logical_name\": \"ProjectPrivate\",\n                        \"docs::human_name\": \"Project Private\"\n                      }\n                    },\n                    {\n                      \"title\": \"Bucket/object can be read publically.\",\n                      \"description\": \"The bucket/object owner is granted the `OWNER` permission, and all other users, whether\\nauthenticated or anonymous, are granted the `READER` permission.\",\n                      \"const\": \"public-read\",\n                      \"_metadata\": {\n                        \"logical_name\": \"PublicRead\",\n                        \"docs::human_name\": \"Public Read\"\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"ACL\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::BulkSizeBasedDefaultBatchSettings>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"bucket\": {\n              \"description\": \"The GCS bucket name.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"my-bucket\",\n                \"docs::human_name\": \"Bucket\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n              \"default\": \"none\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"filename_append_uuid\": {\n              \"title\": \"Whether or not to append a UUID v4 token to the end of the object key.\",\n              \"description\": \"The UUID is appended to the timestamp portion of the object key, such that if the object key\\ngenerated is `date=2022-07-18/1658176486`, setting this field to `true` results\\nin an object key that looks like `date=2022-07-18/1658176486-30f6652c-71da-4f9f-800d-a1189c47c547`.\\n\\nThis ensures there are no name collisions, and can be useful in high-volume workloads where\\nobject keys must be unique.\",\n              \"default\": true,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Filename Append UUID\"\n              }\n            },\n            \"filename_extension\": {\n              \"title\": \"The filename extension to use in the object key.\",\n              \"description\": \"If not specified, the extension is determined by the compression scheme used.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Filename Extension\"\n              }\n            },\n            \"filename_time_format\": {\n              \"title\": \"The timestamp format for the time component of the object key.\",\n              \"description\": \"By default, object keys are appended with a timestamp that reflects when the objects are\\nsent to S3, such that the resulting object key is functionally equivalent to joining the key\\nprefix with the formatted timestamp, such as `date=2022-07-18/1658176486`.\\n\\nThis would represent a `key_prefix` set to `date=%F/` and the timestamp of Mon Jul 18 2022\\n20:34:44 GMT+0000, with the `filename_time_format` being set to `%s`, which renders\\ntimestamps in seconds since the Unix epoch.\\n\\nSupports the common [`strftime`][chrono_strftime_specifiers] specifiers found in most\\nlanguages.\\n\\nWhen set to an empty string, no timestamp is appended to the key prefix.\\n\\n[chrono_strftime_specifiers]: https://docs.rs/chrono/latest/chrono/format/strftime/index.html#specifiers\",\n              \"default\": \"%s\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Filename Time Format\"\n              }\n            },\n            \"key_prefix\": {\n              \"title\": \"A prefix to apply to all object keys.\",\n              \"description\": \"Prefixes are useful for partitioning objects, such as by creating an object key that\\nstores objects under a particular directory. If using a prefix for this purpose, it must end\\nin `/` in order to act as a directory path. A trailing `/` is **not** automatically added.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::templateable\": true,\n                \"docs::examples\": [\n                  \"date=%F/\",\n                  \"date=%F/hour=%H/\",\n                  \"year=%Y/month=%m/day=%d/\",\n                  \"application_id={{ application_id }}/date=%F/\"\n                ],\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Key Prefix\"\n              }\n            },\n            \"metadata\": {\n              \"title\": \"The set of metadata `key:value` pairs for the created objects.\",\n              \"description\": \"For more information, see the [custom metadata][custom_metadata] documentation.\\n\\n[custom_metadata]: https://cloud.google.com/storage/docs/metadata#custom-metadata\",\n              \"type\": [\n                \"object\",\n                \"null\"\n              ],\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::additional_props_description\": \"A key/value pair.\",\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Metadata\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 1000,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"adaptive_concurrency\": {\n                  \"title\": \"Configuration of adaptive concurrency parameters.\",\n                  \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n                  \"default\": {\n                    \"initial_concurrency\": 1,\n                    \"decrease_ratio\": 0.9,\n                    \"ewma_alpha\": 0.4,\n                    \"rtt_deviation_scale\": 2.5,\n                    \"max_concurrency_limit\": 200\n                  },\n                  \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Adaptive Concurrency\"\n                  }\n                },\n                \"concurrency\": {\n                  \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n                  \"default\": \"adaptive\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Concurrency\"\n                  }\n                },\n                \"rate_limit_duration_secs\": {\n                  \"description\": \"The time window used for the `rate_limit_num` option.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Rate Limit Duration\"\n                  }\n                },\n                \"rate_limit_num\": {\n                  \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n                  \"default\": 1000,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"requests\",\n                    \"docs::human_name\": \"Rate Limit Number\"\n                  }\n                },\n                \"retry_attempts\": {\n                  \"description\": \"The maximum number of retries to make for failed requests.\",\n                  \"default\": 9223372036854775807,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"retries\",\n                    \"docs::human_name\": \"Retry Attempts\"\n                  }\n                },\n                \"retry_initial_backoff_secs\": {\n                  \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n                  \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Retry Initial Backoff\"\n                  }\n                },\n                \"retry_jitter_mode\": {\n                  \"description\": \"The jitter mode to use for retry backoff behavior.\",\n                  \"default\": \"Full\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Retry Jitter Mode\"\n                  }\n                },\n                \"retry_max_duration_secs\": {\n                  \"description\": \"The maximum amount of time to wait between retries.\",\n                  \"default\": 30,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Max Retry Duration\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"title\": \"The time a request can take before being aborted.\",\n                  \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n                  \"default\": 60,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"storage_class\": {\n              \"title\": \"The storage class for created objects.\",\n              \"description\": \"For more information, see the [storage classes][storage_classes] documentation.\\n\\n[storage_classes]: https://cloud.google.com/storage/docs/storage-classes\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"title\": \"GCS storage classes.\",\n                  \"description\": \"For more information, see [Storage classes][storage_classes].\\n\\n[storage_classes]: https://cloud.google.com/storage/docs/storage-classes\",\n                  \"oneOf\": [\n                    {\n                      \"title\": \"Standard storage.\",\n                      \"description\": \"This is the default.\",\n                      \"const\": \"STANDARD\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Standard\",\n                        \"docs::human_name\": \"Standard\"\n                      }\n                    },\n                    {\n                      \"description\": \"Nearline storage.\",\n                      \"const\": \"NEARLINE\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Nearline\",\n                        \"docs::human_name\": \"Nearline\"\n                      }\n                    },\n                    {\n                      \"description\": \"Coldline storage.\",\n                      \"const\": \"COLDLINE\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Coldline\",\n                        \"docs::human_name\": \"Coldline\"\n                      }\n                    },\n                    {\n                      \"description\": \"Archive storage.\",\n                      \"const\": \"ARCHIVE\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Archive\",\n                        \"docs::human_name\": \"Archive\"\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Storage Class\"\n              }\n            },\n            \"timezone\": {\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Timezone\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Encoding configuration.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n        },\n        {\n          \"description\": \"Configuration of the authentication strategy for interacting with GCP services.\",\n          \"$ref\": \"#/definitions/vector::gcp::GcpAuthConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"gcp_cloud_storage\"\n      }\n    },\n    \"vector::sinks::gcp::pubsub::PubsubConfig\": {\n      \"description\": \"Configuration for the `gcp_pubsub` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"encoding\",\n            \"project\",\n            \"topic\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 10000000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 1000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Configures how events are encoded into raw bytes.\",\n              \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"endpoint\": {\n              \"title\": \"The endpoint to which to publish events.\",\n              \"description\": \"The scheme (`http` or `https`) must be specified. No path should be included since the paths defined\\nby the [`GCP Pub/Sub`][pubsub_api] API are used.\\n\\nThe trailing slash `/` must not be included.\\n\\n[pubsub_api]: https://cloud.google.com/pubsub/docs/reference/rest\",\n              \"default\": \"https://pubsub.googleapis.com\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"https://us-central1-pubsub.googleapis.com\",\n                \"docs::human_name\": \"Endpoint\"\n              }\n            },\n            \"project\": {\n              \"description\": \"The project name to which to publish events.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"vector-123456\",\n                \"docs::human_name\": \"Project\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"tls\": {\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            },\n            \"topic\": {\n              \"description\": \"The topic within the project to which to publish events.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"this-is-a-topic\",\n                \"docs::human_name\": \"Topic\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the authentication strategy for interacting with GCP services.\",\n          \"default\": {\n            \"api_key\": null,\n            \"credentials_path\": null\n          },\n          \"$ref\": \"#/definitions/vector::gcp::GcpAuthConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"gcp_pubsub\"\n      }\n    },\n    \"vector::sinks::gcp::stackdriver::logs::config::StackdriverConfig\": {\n      \"description\": \"Configuration for the `gcp_stackdriver_logs` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"log_id\",\n            \"resource\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Transformations to prepare an event for serialization.\",\n              \"default\": {},\n              \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"log_id\": {\n              \"title\": \"The log ID to which to publish logs.\",\n              \"description\": \"This is a name you create to identify this log stream.\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Log ID\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 1000,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"adaptive_concurrency\": {\n                  \"title\": \"Configuration of adaptive concurrency parameters.\",\n                  \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n                  \"default\": {\n                    \"initial_concurrency\": 1,\n                    \"decrease_ratio\": 0.9,\n                    \"ewma_alpha\": 0.4,\n                    \"rtt_deviation_scale\": 2.5,\n                    \"max_concurrency_limit\": 200\n                  },\n                  \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Adaptive Concurrency\"\n                  }\n                },\n                \"concurrency\": {\n                  \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n                  \"default\": \"adaptive\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Concurrency\"\n                  }\n                },\n                \"rate_limit_duration_secs\": {\n                  \"description\": \"The time window used for the `rate_limit_num` option.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Rate Limit Duration\"\n                  }\n                },\n                \"rate_limit_num\": {\n                  \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n                  \"default\": 1000,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"requests\",\n                    \"docs::human_name\": \"Rate Limit Number\"\n                  }\n                },\n                \"retry_attempts\": {\n                  \"description\": \"The maximum number of retries to make for failed requests.\",\n                  \"default\": 9223372036854775807,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"retries\",\n                    \"docs::human_name\": \"Retry Attempts\"\n                  }\n                },\n                \"retry_initial_backoff_secs\": {\n                  \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n                  \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Retry Initial Backoff\"\n                  }\n                },\n                \"retry_jitter_mode\": {\n                  \"description\": \"The jitter mode to use for retry backoff behavior.\",\n                  \"default\": \"Full\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Retry Jitter Mode\"\n                  }\n                },\n                \"retry_max_duration_secs\": {\n                  \"description\": \"The maximum amount of time to wait between retries.\",\n                  \"default\": 30,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Max Retry Duration\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"title\": \"The time a request can take before being aborted.\",\n                  \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n                  \"default\": 60,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"resource\": {\n              \"title\": \"A monitored resource.\",\n              \"description\": \"The monitored resource to associate the logs with.\",\n              \"allOf\": [\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"type\"\n                  ],\n                  \"properties\": {\n                    \"type\": {\n                      \"title\": \"The monitored resource type.\",\n                      \"description\": \"For example, the type of a Compute Engine VM instance is `gce_instance`.\\nSee the [Google Cloud Platform monitored resource documentation][gcp_resources] for\\nmore details.\\n\\n[gcp_resources]: https://cloud.google.com/monitoring/api/resources\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Type\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"description\": \"Type-specific labels.\",\n                  \"type\": \"object\",\n                  \"additionalProperties\": {\n                    \"$ref\": \"#/definitions/vector::template::Template\"\n                  },\n                  \"_metadata\": {\n                    \"docs::additional_props_description\": \"A type-specific label.\",\n                    \"docs::examples\": {\n                      \"instanceId\": \"Twilight\",\n                      \"zone\": \"{{ zone }}\"\n                    }\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"Resource\"\n              }\n            },\n            \"severity_key\": {\n              \"title\": \"The field of the log event from which to take the outgoing log’s `severity` field.\",\n              \"description\": \"The named field is removed from the log event if present, and must be either an integer\\nbetween 0 and 800 or a string containing one of the [severity level names][sev_names] (case\\nis ignored) or a common prefix such as `err`.\\n\\nIf no severity key is specified, the severity of outgoing records is set to 0 (`DEFAULT`).\\n\\nSee the [GCP Stackdriver Logging LogSeverity description][logsev_docs] for more details on\\nthe value of the `severity` field.\\n\\n[sev_names]: https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity\\n[logsev_docs]: https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::ConfigValuePath>\",\n              \"_metadata\": {\n                \"docs::examples\": \"severity\",\n                \"docs::human_name\": \"Severity Key\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Logging locations.\",\n          \"oneOf\": [\n            {\n              \"title\": \"The billing account ID to which to publish logs.\",\n              \"description\": \"Exactly one of `billing_account_id`, `folder_id`, `organization_id`, or `project_id` must be set.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"billing_account_id\"\n              ],\n              \"properties\": {\n                \"billing_account_id\": {\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Billing Account ID\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::examples\": \"012345-6789AB-CDEF01\",\n                \"logical_name\": \"BillingAccount\",\n                \"docs::human_name\": \"Billing Account\"\n              }\n            },\n            {\n              \"title\": \"The folder ID to which to publish logs.\",\n              \"description\": \"See the [Google Cloud Platform folder documentation][folder_docs] for more details.\\n\\nExactly one of `billing_account_id`, `folder_id`, `organization_id`, or `project_id` must be set.\\n\\n[folder_docs]: https://cloud.google.com/resource-manager/docs/creating-managing-folders\",\n              \"type\": \"object\",\n              \"required\": [\n                \"folder_id\"\n              ],\n              \"properties\": {\n                \"folder_id\": {\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Folder ID\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::examples\": \"My Folder\",\n                \"logical_name\": \"Folder\",\n                \"docs::human_name\": \"Folder\"\n              }\n            },\n            {\n              \"title\": \"The organization ID to which to publish logs.\",\n              \"description\": \"This would be the identifier assigned to your organization on Google Cloud Platform.\\n\\nExactly one of `billing_account_id`, `folder_id`, `organization_id`, or `project_id` must be set.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"organization_id\"\n              ],\n              \"properties\": {\n                \"organization_id\": {\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Organization ID\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::examples\": \"622418129737\",\n                \"logical_name\": \"Organization\",\n                \"docs::human_name\": \"Organization\"\n              }\n            },\n            {\n              \"title\": \"The project ID to which to publish logs.\",\n              \"description\": \"See the [Google Cloud Platform project management documentation][project_docs] for more details.\\n\\nExactly one of `billing_account_id`, `folder_id`, `organization_id`, or `project_id` must be set.\\n\\n[project_docs]: https://cloud.google.com/resource-manager/docs/creating-managing-projects\",\n              \"type\": \"object\",\n              \"required\": [\n                \"project_id\"\n              ],\n              \"properties\": {\n                \"project_id\": {\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Project ID\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::examples\": \"vector-123456\",\n                \"logical_name\": \"Project\",\n                \"docs::human_name\": \"Project\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\"\n          }\n        },\n        {\n          \"description\": \"Configuration of the authentication strategy for interacting with GCP services.\",\n          \"$ref\": \"#/definitions/vector::gcp::GcpAuthConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"gcp_stackdriver_logs\"\n      }\n    },\n    \"vector::sinks::gcp::stackdriver::metrics::config::StackdriverConfig\": {\n      \"description\": \"Configuration for the `gcp_stackdriver_metrics` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"project_id\",\n            \"resource\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 1,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"default_namespace\": {\n              \"title\": \"The default namespace to use for metrics that do not have one.\",\n              \"description\": \"Metrics with the same name can only be differentiated by their namespace, and not all\\nmetrics have their own namespace.\",\n              \"default\": \"namespace\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Default Namespace\"\n              }\n            },\n            \"project_id\": {\n              \"title\": \"The project ID to which to publish metrics.\",\n              \"description\": \"See the [Google Cloud Platform project management documentation][project_docs] for more details.\\n\\n[project_docs]: https://cloud.google.com/resource-manager/docs/creating-managing-projects\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Project ID\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 1000,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"adaptive_concurrency\": {\n                  \"title\": \"Configuration of adaptive concurrency parameters.\",\n                  \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n                  \"default\": {\n                    \"initial_concurrency\": 1,\n                    \"decrease_ratio\": 0.9,\n                    \"ewma_alpha\": 0.4,\n                    \"rtt_deviation_scale\": 2.5,\n                    \"max_concurrency_limit\": 200\n                  },\n                  \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Adaptive Concurrency\"\n                  }\n                },\n                \"concurrency\": {\n                  \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n                  \"default\": \"adaptive\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Concurrency\"\n                  }\n                },\n                \"rate_limit_duration_secs\": {\n                  \"description\": \"The time window used for the `rate_limit_num` option.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Rate Limit Duration\"\n                  }\n                },\n                \"rate_limit_num\": {\n                  \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n                  \"default\": 1000,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"requests\",\n                    \"docs::human_name\": \"Rate Limit Number\"\n                  }\n                },\n                \"retry_attempts\": {\n                  \"description\": \"The maximum number of retries to make for failed requests.\",\n                  \"default\": 9223372036854775807,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"retries\",\n                    \"docs::human_name\": \"Retry Attempts\"\n                  }\n                },\n                \"retry_initial_backoff_secs\": {\n                  \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n                  \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Retry Initial Backoff\"\n                  }\n                },\n                \"retry_jitter_mode\": {\n                  \"description\": \"The jitter mode to use for retry backoff behavior.\",\n                  \"default\": \"Full\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Retry Jitter Mode\"\n                  }\n                },\n                \"retry_max_duration_secs\": {\n                  \"description\": \"The maximum amount of time to wait between retries.\",\n                  \"default\": 30,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Max Retry Duration\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"title\": \"The time a request can take before being aborted.\",\n                  \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n                  \"default\": 60,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"resource\": {\n              \"title\": \"A monitored resource.\",\n              \"description\": \"The monitored resource to associate the metrics with.\",\n              \"allOf\": [\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"type\"\n                  ],\n                  \"properties\": {\n                    \"type\": {\n                      \"title\": \"The monitored resource type.\",\n                      \"description\": \"For example, the type of a Compute Engine VM instance is `gce_instance`.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::examples\": [\n                          \"global\",\n                          \"gce_instance\"\n                        ],\n                        \"docs::human_name\": \"Type\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"description\": \"Type-specific labels.\",\n                  \"type\": \"object\",\n                  \"additionalProperties\": {\n                    \"type\": \"string\"\n                  },\n                  \"_metadata\": {\n                    \"docs::additional_props_description\": \"Values for all of the labels listed in the associated monitored resource descriptor.\\n\\nFor example, Compute Engine VM instances use the labels `projectId`, `instanceId`, and `zone`.\",\n                    \"docs::examples\": {\n                      \"projectId\": \"vector-123456\",\n                      \"type\": \"global\",\n                      \"instanceId\": \"Twilight\",\n                      \"zone\": \"us-central1-a\"\n                    }\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"Resource\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the authentication strategy for interacting with GCP services.\",\n          \"$ref\": \"#/definitions/vector::gcp::GcpAuthConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"gcp_stackdriver_metrics\"\n      }\n    },\n    \"vector::sinks::gcp_chronicle::chronicle_unstructured::ChronicleUnstructuredConfig\": {\n      \"description\": \"Configuration for the `gcp_chronicle_unstructured` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"customer_id\",\n            \"encoding\",\n            \"log_type\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 1000000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 15.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"customer_id\": {\n              \"description\": \"The Unique identifier (UUID) corresponding to the Chronicle instance.\",\n              \"type\": \"string\",\n              \"format\": \"uuid\",\n              \"_metadata\": {\n                \"docs::examples\": \"c8c65bfa-5f2c-42d4-9189-64bb7b939f2c\",\n                \"docs::human_name\": \"Customer ID\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Configures how events are encoded into raw bytes.\",\n              \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"endpoint\": {\n              \"description\": \"The endpoint to send data to.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  \"127.0.0.1:8080\",\n                  \"example.com:12345\"\n                ],\n                \"docs::human_name\": \"Endpoint\"\n              }\n            },\n            \"labels\": {\n              \"description\": \"A set of labels that are attached to each batch of events.\",\n              \"type\": [\n                \"object\",\n                \"null\"\n              ],\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": {\n                  \"tenant\": \"marketing\",\n                  \"source\": \"vector\"\n                },\n                \"docs::additional_props_description\": \"A Chronicle label.\",\n                \"docs::human_name\": \"Labels\"\n              }\n            },\n            \"log_type\": {\n              \"title\": \"The type of log entries in a request.\",\n              \"description\": \"This must be one of the [supported log types][unstructured_log_types_doc], otherwise\\nChronicle rejects the entry with an error.\\n\\n[unstructured_log_types_doc]: https://cloud.google.com/chronicle/docs/ingestion/parser-list/supported-default-parsers\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"WINDOWS_DNS\",\n                  \"{{ log_type }}\"\n                ],\n                \"docs::human_name\": \"Log Type\"\n              }\n            },\n            \"namespace\": {\n              \"description\": \"User-configured environment namespace to identify the data domain the logs originated from.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n              \"_metadata\": {\n                \"docs::templateable\": true,\n                \"docs::examples\": [\n                  \"production\",\n                  \"production-{{ namespace }}\"\n                ],\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Namespace\"\n              }\n            },\n            \"region\": {\n              \"description\": \"The GCP region to use.\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"description\": \"Google Chronicle regions.\",\n                  \"oneOf\": [\n                    {\n                      \"description\": \"EU region.\",\n                      \"const\": \"eu\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Eu\",\n                        \"docs::human_name\": \"EU\"\n                      }\n                    },\n                    {\n                      \"description\": \"US region.\",\n                      \"const\": \"us\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Us\",\n                        \"docs::human_name\": \"US\"\n                      }\n                    },\n                    {\n                      \"description\": \"APAC region.\",\n                      \"const\": \"asia\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Asia\",\n                        \"docs::human_name\": \"Asia\"\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Region\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 1000,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"adaptive_concurrency\": {\n                  \"title\": \"Configuration of adaptive concurrency parameters.\",\n                  \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n                  \"default\": {\n                    \"initial_concurrency\": 1,\n                    \"decrease_ratio\": 0.9,\n                    \"ewma_alpha\": 0.4,\n                    \"rtt_deviation_scale\": 2.5,\n                    \"max_concurrency_limit\": 200\n                  },\n                  \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Adaptive Concurrency\"\n                  }\n                },\n                \"concurrency\": {\n                  \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n                  \"default\": \"adaptive\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Concurrency\"\n                  }\n                },\n                \"rate_limit_duration_secs\": {\n                  \"description\": \"The time window used for the `rate_limit_num` option.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Rate Limit Duration\"\n                  }\n                },\n                \"rate_limit_num\": {\n                  \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n                  \"default\": 1000,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"requests\",\n                    \"docs::human_name\": \"Rate Limit Number\"\n                  }\n                },\n                \"retry_attempts\": {\n                  \"description\": \"The maximum number of retries to make for failed requests.\",\n                  \"default\": 9223372036854775807,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"retries\",\n                    \"docs::human_name\": \"Retry Attempts\"\n                  }\n                },\n                \"retry_initial_backoff_secs\": {\n                  \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n                  \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Retry Initial Backoff\"\n                  }\n                },\n                \"retry_jitter_mode\": {\n                  \"description\": \"The jitter mode to use for retry backoff behavior.\",\n                  \"default\": \"Full\",\n                  \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Retry Jitter Mode\"\n                  }\n                },\n                \"retry_max_duration_secs\": {\n                  \"description\": \"The maximum amount of time to wait between retries.\",\n                  \"default\": 30,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Max Retry Duration\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"title\": \"The time a request can take before being aborted.\",\n                  \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n                  \"default\": 60,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the authentication strategy for interacting with GCP services.\",\n          \"$ref\": \"#/definitions/vector::gcp::GcpAuthConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"gcp_chronicle_unstructured\"\n      }\n    },\n    \"vector::sinks::greptimedb::GreptimeDBConfig\": {\n      \"description\": \"Configuration items for GreptimeDB\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"title\": \"The maximum size of a batch that is processed by a sink.\",\n              \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n              \"default\": null,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"default\": 20,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::human_name\": \"Max Events\"\n              }\n            },\n            \"timeout_secs\": {\n              \"description\": \"The maximum age of a batch before it is flushed.\",\n              \"default\": 1.0,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"dbname\": {\n          \"title\": \"The GreptimeDB [database][database] name to connect.\",\n          \"description\": \"Default to `public`, the default database of GreptimeDB.\\n\\nDatabase can be created via `create database` statement on\\nGreptimeDB. If you are using GreptimeCloud, use `dbname` from the\\nconnection information of your instance.\\n\\n[database]: https://docs.greptime.com/user-guide/concepts/key-concepts#database\",\n          \"default\": \"public\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"public\",\n            \"docs::human_name\": \"Dbname\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The host and port of GreptimeDB gRPC service.\",\n          \"description\": \"This sink uses GreptimeDB's gRPC interface for data ingestion. By\\ndefault, GreptimeDB listens to port 4001 for gRPC protocol.\\n\\nThe address _must_ include a port.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"example.com:4001\",\n              \"1nge17d2r3ns.ap-southeast-1.aws.greptime.cloud:4001\"\n            ],\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"password\": {\n          \"title\": \"The password for your GreptimeDB instance.\",\n          \"description\": \"This is required if your instance has authentication enabled.\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n          \"_metadata\": {\n            \"docs::examples\": \"password\",\n            \"docs::human_name\": \"Password\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"username\": {\n          \"title\": \"The username for your GreptimeDB instance.\",\n          \"description\": \"This is required if your instance has authentication enabled.\",\n          \"default\": null,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"username\",\n            \"docs::human_name\": \"Username\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"greptimedb\"\n      }\n    },\n    \"vector::sinks::honeycomb::config::HoneycombConfig\": {\n      \"description\": \"Configuration for the `honeycomb` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_key\",\n        \"dataset\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"api_key\": {\n          \"description\": \"The API key that is used to authenticate against Honeycomb.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${HONEYCOMB_API_KEY}\",\n              \"some-api-key\"\n            ],\n            \"docs::human_name\": \"API Key\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"title\": \"The maximum size of a batch that is processed by a sink.\",\n              \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n              \"default\": 100000,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"default\": null,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::human_name\": \"Max Events\"\n              }\n            },\n            \"timeout_secs\": {\n              \"description\": \"The maximum age of a batch before it is flushed.\",\n              \"default\": 1.0,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"dataset\": {\n          \"description\": \"The dataset to which logs are sent.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"my-honeycomb-dataset\",\n            \"docs::human_name\": \"Dataset\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"honeycomb\"\n      }\n    },\n    \"vector::sinks::http::config::HttpSinkConfig\": {\n      \"description\": \"Configuration for the `http` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"uri\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"auth\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Auth\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n              \"default\": \"none\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"headers\": {\n              \"description\": \"A list of custom headers to add to each request.\",\n              \"deprecated\": true,\n              \"type\": [\n                \"object\",\n                \"null\"\n              ],\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"deprecated_message\": \"This option has been deprecated, use `request.headers` instead.\",\n                \"docs::additional_props_description\": \"An HTTP request header and it's value.\",\n                \"docs::human_name\": \"Headers\"\n              }\n            },\n            \"method\": {\n              \"title\": \"HTTP method.\",\n              \"description\": \"The HTTP method to use when making the request.\",\n              \"default\": \"post\",\n              \"oneOf\": [\n                {\n                  \"description\": \"GET.\",\n                  \"const\": \"get\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Get\",\n                    \"docs::human_name\": \"Get\"\n                  }\n                },\n                {\n                  \"description\": \"HEAD.\",\n                  \"const\": \"head\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Head\",\n                    \"docs::human_name\": \"Head\"\n                  }\n                },\n                {\n                  \"description\": \"POST.\",\n                  \"const\": \"post\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Post\",\n                    \"docs::human_name\": \"Post\"\n                  }\n                },\n                {\n                  \"description\": \"PUT.\",\n                  \"const\": \"put\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Put\",\n                    \"docs::human_name\": \"Put\"\n                  }\n                },\n                {\n                  \"description\": \"DELETE.\",\n                  \"const\": \"delete\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Delete\",\n                    \"docs::human_name\": \"Delete\"\n                  }\n                },\n                {\n                  \"description\": \"OPTIONS.\",\n                  \"const\": \"options\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Options\",\n                    \"docs::human_name\": \"Options\"\n                  }\n                },\n                {\n                  \"description\": \"TRACE.\",\n                  \"const\": \"trace\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Trace\",\n                    \"docs::human_name\": \"Trace\"\n                  }\n                },\n                {\n                  \"description\": \"PATCH.\",\n                  \"const\": \"patch\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Patch\",\n                    \"docs::human_name\": \"Patch\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Method\"\n              }\n            },\n            \"payload_prefix\": {\n              \"title\": \"A string to prefix the payload with.\",\n              \"description\": \"This option is ignored if the encoding is not character delimited JSON.\\n\\nIf specified, the `payload_suffix` must also be specified and together they must produce a valid JSON object.\",\n              \"default\": \"\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"{\\\"data\\\":\",\n                \"docs::human_name\": \"Payload Prefix\"\n              }\n            },\n            \"payload_suffix\": {\n              \"title\": \"A string to suffix the payload with.\",\n              \"description\": \"This option is ignored if the encoding is not character delimited JSON.\\n\\nIf specified, the `payload_prefix` must also be specified and together they must produce a valid JSON object.\",\n              \"default\": \"\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"}\",\n                \"docs::human_name\": \"Payload Suffix\"\n              }\n            },\n            \"request\": {\n              \"description\": \"Outbound HTTP request settings.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                },\n                \"headers\": {}\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::http::RequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            },\n            \"uri\": {\n              \"title\": \"The full URI to make HTTP requests to.\",\n              \"description\": \"This should include the protocol and host, but can also include the port, path, and any other valid part of a URI.\",\n              \"$ref\": \"#/definitions/vector::sinks::util::uri::UriSerde\",\n              \"_metadata\": {\n                \"docs::examples\": \"https://10.22.212.22:9000/endpoint\",\n                \"docs::human_name\": \"URI\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Encoding configuration.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"http\"\n      }\n    },\n    \"vector::sinks::humio::logs::HumioLogsConfig\": {\n      \"description\": \"Configuration for the `humio_logs` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\",\n        \"token\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::splunk_hec::common::util::SplunkHecDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"none\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The base URL of the Humio instance.\",\n          \"description\": \"The scheme (`http` or `https`) must be specified. No path should be included since the paths defined\\nby the [`Splunk`][splunk] API are used.\\n\\n[splunk]: https://docs.splunk.com/Documentation/Splunk/8.0.0/Data/HECRESTendpoints\",\n          \"default\": \"https://cloud.humio.com\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"http://127.0.0.1\",\n              \"https://example.com\"\n            ],\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"event_type\": {\n          \"title\": \"The type of events sent to this sink. Humio uses this as the name of the parser to use to ingest the data.\",\n          \"description\": \"If unset, Humio defaults it to none.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"json\",\n              \"none\",\n              \"{{ event_type }}\"\n            ],\n            \"docs::human_name\": \"Event Type\"\n          }\n        },\n        \"host_key\": {\n          \"title\": \"Overrides the name of the log field used to retrieve the hostname to send to Humio.\",\n          \"description\": \"By default, the [global `log_schema.host_key` option][global_host_key] is used if log\\nevents are Legacy namespaced, or the semantic meaning of \\\"host\\\" is used, if defined.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n          \"default\": \".host\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"index\": {\n          \"title\": \"Optional name of the repository to ingest into.\",\n          \"description\": \"In public-facing APIs, this must (if present) be equal to the repository used to create the ingest token used for authentication.\\n\\nIn private cluster setups, Humio can be configured to allow these to be different.\\n\\nFor more information, see [Humio’s Format of Data][humio_data_format].\\n\\n[humio_data_format]: https://docs.humio.com/integrations/data-shippers/hec/#format-of-data\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"{{ host }}\",\n              \"custom_index\"\n            ],\n            \"docs::human_name\": \"Index\"\n          }\n        },\n        \"indexed_fields\": {\n          \"title\": \"Event fields to be added to Humio’s extra fields.\",\n          \"description\": \"Can be used to tag events by specifying fields starting with `#`.\\n\\nFor more information, see [Humio’s Format of Data][humio_data_format].\\n\\n[humio_data_format]: https://docs.humio.com/integrations/data-shippers/hec/#format-of-data\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Indexed Fields\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"source\": {\n          \"title\": \"The source of events sent to this sink.\",\n          \"description\": \"Typically the filename the logs originated from. Maps to `@source` in Humio.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Source\"\n          }\n        },\n        \"timestamp_key\": {\n          \"title\": \"Overrides the name of the log field used to retrieve the timestamp to send to Humio.\\nWhen set to `“”`, a timestamp is not set in the events sent to Humio.\",\n          \"description\": \"By default, either the [global `log_schema.timestamp_key` option][global_timestamp_key] is used\\nif log events are Legacy namespaced, or the semantic meaning of \\\"timestamp\\\" is used, if defined.\\n\\n[global_timestamp_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.timestamp_key\",\n          \"default\": \".timestamp\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Timestamp Key\"\n          }\n        },\n        \"timestamp_nanos_key\": {\n          \"description\": \"Overrides the name of the log field used to retrieve the nanosecond-enabled timestamp to send to Humio.\",\n          \"default\": \"@timestamp.nanos\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Timestamp Nanos Key\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"token\": {\n          \"description\": \"The Humio ingestion token.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${HUMIO_TOKEN}\",\n              \"A94A8FE5CCB19BA61C4C08\"\n            ],\n            \"docs::human_name\": \"Token\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"humio_logs\"\n      }\n    },\n    \"vector::sinks::humio::metrics::HumioMetricsConfig\": {\n      \"description\": \"Configuration for the `humio_metrics` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"token\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::splunk_hec::common::util::SplunkHecDefaultBatchSettings>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n              \"default\": \"none\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"endpoint\": {\n              \"title\": \"The base URL of the Humio instance.\",\n              \"description\": \"The scheme (`http` or `https`) must be specified. No path should be included since the paths defined\\nby the [`Splunk`][splunk] API are used.\\n\\n[splunk]: https://docs.splunk.com/Documentation/Splunk/8.0.0/Data/HECRESTendpoints\",\n              \"default\": \"https://cloud.humio.com\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"http://127.0.0.1\",\n                  \"https://example.com\"\n                ],\n                \"docs::human_name\": \"Endpoint\"\n              }\n            },\n            \"event_type\": {\n              \"title\": \"The type of events sent to this sink. Humio uses this as the name of the parser to use to ingest the data.\",\n              \"description\": \"If unset, Humio defaults it to none.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"json\",\n                  \"none\",\n                  \"{{ event_type }}\"\n                ],\n                \"docs::human_name\": \"Event Type\"\n              }\n            },\n            \"host_key\": {\n              \"title\": \"Overrides the name of the log field used to retrieve the hostname to send to Humio.\",\n              \"description\": \"By default, the [global `log_schema.host_key` option][global_host_key] is used if log\\nevents are Legacy namespaced, or the semantic meaning of \\\"host\\\" is used, if defined.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n              \"default\": \"host\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Host Key\"\n              }\n            },\n            \"index\": {\n              \"title\": \"Optional name of the repository to ingest into.\",\n              \"description\": \"In public-facing APIs, this must (if present) be equal to the repository used to create the ingest token used for authentication.\\n\\nIn private cluster setups, Humio can be configured to allow these to be different.\\n\\nFor more information, see [Humio’s Format of Data][humio_data_format].\\n\\n[humio_data_format]: https://docs.humio.com/integrations/data-shippers/hec/#format-of-data\",\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"{{ host }}\",\n                  \"custom_index\"\n                ],\n                \"docs::human_name\": \"Index\"\n              }\n            },\n            \"indexed_fields\": {\n              \"title\": \"Event fields to be added to Humio’s extra fields.\",\n              \"description\": \"Can be used to tag events by specifying fields starting with `#`.\\n\\nFor more information, see [Humio’s Format of Data][humio_data_format].\\n\\n[humio_data_format]: https://docs.humio.com/integrations/data-shippers/hec/#format-of-data\",\n              \"default\": [],\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n              },\n              \"_metadata\": {\n                \"docs::human_name\": \"Indexed Fields\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"source\": {\n              \"title\": \"The source of events sent to this sink.\",\n              \"description\": \"Typically the filename the metrics originated from. Maps to `@source` in Humio.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Source\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            },\n            \"token\": {\n              \"description\": \"The Humio ingestion token.\",\n              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"${HUMIO_TOKEN}\",\n                  \"A94A8FE5CCB19BA61C4C08\"\n                ],\n                \"docs::human_name\": \"Token\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration for the `metric_to_log` transform.\",\n          \"$ref\": \"#/definitions/vector::transforms::metric_to_log::MetricToLogConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"humio_metrics\"\n      }\n    },\n    \"vector::sinks::influxdb::logs::InfluxDbLogsConfig\": {\n      \"description\": \"Configuration for the `influxdb_logs` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"endpoint\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 1000000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Transformations to prepare an event for serialization.\",\n              \"default\": {},\n              \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"endpoint\": {\n              \"title\": \"The endpoint to send data to.\",\n              \"description\": \"This should be a full HTTP URI, including the scheme, host, and port.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"http://localhost:8086\",\n                \"docs::human_name\": \"Endpoint\"\n              }\n            },\n            \"host_key\": {\n              \"title\": \"Use this option to customize the key containing the hostname.\",\n              \"description\": \"The setting of `log_schema.host_key`, usually `host`, is used here by default.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n              \"_metadata\": {\n                \"docs::examples\": \"hostname\",\n                \"docs::human_name\": \"Host Key\"\n              }\n            },\n            \"measurement\": {\n              \"description\": \"The name of the InfluxDB measurement that is written to.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"vector-logs\",\n                \"docs::human_name\": \"Measurement\"\n              }\n            },\n            \"message_key\": {\n              \"title\": \"Use this option to customize the key containing the message.\",\n              \"description\": \"The setting of `log_schema.message_key`, usually `message`, is used here by default.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n              \"_metadata\": {\n                \"docs::examples\": \"text\",\n                \"docs::human_name\": \"Message Key\"\n              }\n            },\n            \"namespace\": {\n              \"title\": \"The namespace of the measurement name to use.\",\n              \"description\": \"When specified, the measurement name is `<namespace>.vector`.\",\n              \"deprecated\": true,\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"deprecated_message\": \"This field is deprecated, and `measurement` should be used instead.\",\n                \"docs::examples\": \"service\",\n                \"docs::human_name\": \"Namespace\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"source_type_key\": {\n              \"title\": \"Use this option to customize the key containing the source_type.\",\n              \"description\": \"The setting of `log_schema.source_type_key`, usually `source_type`, is used here by default.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n              \"_metadata\": {\n                \"docs::examples\": \"source\",\n                \"docs::human_name\": \"Source Type Key\"\n              }\n            },\n            \"tags\": {\n              \"title\": \"The list of names of log fields that should be added as tags to each measurement.\",\n              \"description\": \"By default Vector adds `metric_type` as well as the configured `log_schema.host_key` and\\n`log_schema.source_type_key` options.\",\n              \"default\": [],\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"field1\",\n                  \"parent.child_field\"\n                ],\n                \"docs::human_name\": \"Tags\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"$ref\": \"#/definitions/core::option::Option<vector::sinks::influxdb::InfluxDb1Settings>\"\n        },\n        {\n          \"$ref\": \"#/definitions/core::option::Option<vector::sinks::influxdb::InfluxDb2Settings>\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"influxdb_logs\"\n      }\n    },\n    \"vector::sinks::influxdb::metrics::InfluxDbConfig\": {\n      \"description\": \"Configuration for the `influxdb_metrics` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"endpoint\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 20,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"default_namespace\": {\n              \"title\": \"Sets the default namespace for any metrics sent.\",\n              \"description\": \"This namespace is only used if a metric has no existing namespace. When a namespace is\\npresent, it is used as a prefix to the metric name, and separated with a period (`.`).\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"service\",\n                \"docs::human_name\": \"Default Namespace\"\n              }\n            },\n            \"endpoint\": {\n              \"title\": \"The endpoint to send data to.\",\n              \"description\": \"This should be a full HTTP URI, including the scheme, host, and port.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"http://localhost:8086/\",\n                \"docs::human_name\": \"Endpoint\"\n              }\n            },\n            \"quantiles\": {\n              \"description\": \"The list of quantiles to calculate when sending distribution metrics.\",\n              \"default\": [\n                0.5,\n                0.75,\n                0.9,\n                0.95,\n                0.99\n              ],\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"number\",\n                \"maximum\": 9007199254740991.0,\n                \"minimum\": -9007199254740991.0,\n                \"_metadata\": {\n                  \"docs::numeric_type\": \"float\"\n                }\n              },\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::human_name\": \"Quantiles\"\n              }\n            },\n            \"request\": {\n              \"title\": \"Middleware settings for outbound requests.\",\n              \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n              \"default\": {\n                \"timeout_secs\": 60,\n                \"rate_limit_duration_secs\": 1,\n                \"rate_limit_num\": 9223372036854775807,\n                \"retry_attempts\": 9223372036854775807,\n                \"retry_max_duration_secs\": 30,\n                \"retry_initial_backoff_secs\": 1,\n                \"retry_jitter_mode\": \"Full\",\n                \"adaptive_concurrency\": {\n                  \"initial_concurrency\": 1,\n                  \"decrease_ratio\": 0.9,\n                  \"ewma_alpha\": 0.4,\n                  \"rtt_deviation_scale\": 2.5,\n                  \"max_concurrency_limit\": 200\n                }\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Request\"\n              }\n            },\n            \"tags\": {\n              \"description\": \"A map of additional tags, in the key/value pair format, to add to each measurement.\",\n              \"type\": [\n                \"object\",\n                \"null\"\n              ],\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::additional_props_description\": \"A tag key/value pair.\",\n                \"docs::examples\": {\n                  \"region\": \"us-west-1\"\n                },\n                \"docs::human_name\": \"Tags\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"$ref\": \"#/definitions/core::option::Option<vector::sinks::influxdb::InfluxDb1Settings>\"\n        },\n        {\n          \"$ref\": \"#/definitions/core::option::Option<vector::sinks::influxdb::InfluxDb2Settings>\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"influxdb_metrics\"\n      }\n    },\n    \"vector::sinks::kafka::config::KafkaSinkConfig\": {\n      \"description\": \"Configuration for the `kafka` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"bootstrap_servers\",\n            \"encoding\",\n            \"topic\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"bootstrap_servers\": {\n              \"title\": \"A comma-separated list of Kafka bootstrap servers.\",\n              \"description\": \"These are the servers in a Kafka cluster that a client should use to bootstrap its\\nconnection to the cluster, allowing discovery of all the other hosts in the cluster.\\n\\nMust be in the form of `host:port`, and comma-separated.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"10.14.22.123:9092,10.14.23.332:9092\",\n                \"docs::human_name\": \"Bootstrap Servers\"\n              }\n            },\n            \"compression\": {\n              \"description\": \"Supported compression types for Kafka.\",\n              \"default\": \"none\",\n              \"oneOf\": [\n                {\n                  \"description\": \"No compression.\",\n                  \"const\": \"none\",\n                  \"_metadata\": {\n                    \"logical_name\": \"None\",\n                    \"docs::human_name\": \"None\"\n                  }\n                },\n                {\n                  \"description\": \"Gzip.\",\n                  \"const\": \"gzip\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Gzip\",\n                    \"docs::human_name\": \"Gzip\"\n                  }\n                },\n                {\n                  \"description\": \"Snappy.\",\n                  \"const\": \"snappy\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Snappy\",\n                    \"docs::human_name\": \"Snappy\"\n                  }\n                },\n                {\n                  \"description\": \"LZ4.\",\n                  \"const\": \"lz4\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Lz4\",\n                    \"docs::human_name\": \"LZ4\"\n                  }\n                },\n                {\n                  \"description\": \"Zstandard.\",\n                  \"const\": \"zstd\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Zstd\",\n                    \"docs::human_name\": \"Zstd\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"encoding\": {\n              \"description\": \"Configures how events are encoded into raw bytes.\",\n              \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Encoding\"\n              }\n            },\n            \"headers_key\": {\n              \"title\": \"The log field name to use for the Kafka headers.\",\n              \"description\": \"If omitted, no headers are written.\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigTargetPath\"\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::examples\": \"headers\",\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Headers Key\"\n              }\n            },\n            \"healthcheck_topic\": {\n              \"title\": \"The topic name to use for healthcheck. If omitted, `topic` is used.\\nThis option helps prevent healthcheck warnings when `topic` is templated.\",\n              \"description\": \"It is ignored when healthcheck is disabled.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Healthcheck Topic\"\n              }\n            },\n            \"key_field\": {\n              \"title\": \"The log field name or tag key to use for the topic key.\",\n              \"description\": \"If the field does not exist in the log or in the tags, a blank value is used. If\\nunspecified, the key is not sent.\\n\\nKafka uses a hash of the key to choose the partition or uses round-robin if the record has\\nno key.\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigTargetPath\"\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::examples\": [\n                  \"user_id\",\n                  \".my_topic\",\n                  \"%my_topic\"\n                ],\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Key Field\"\n              }\n            },\n            \"librdkafka_options\": {\n              \"title\": \"A map of advanced options to pass directly to the underlying `librdkafka` client.\",\n              \"description\": \"For more information on configuration options, see [Configuration properties][config_props_docs].\\n\\n[config_props_docs]: https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md\",\n              \"default\": {},\n              \"type\": \"object\",\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::examples\": {\n                  \"fetch.error.backoff.ms\": \"1000\",\n                  \"socket.send.buffer.bytes\": \"100\",\n                  \"client.id\": \"${ENV_VAR}\"\n                },\n                \"docs::advanced\": true,\n                \"docs::additional_props_description\": \"A librdkafka configuration option.\",\n                \"docs::human_name\": \"Librdkafka Options\"\n              }\n            },\n            \"message_timeout_ms\": {\n              \"description\": \"Local message timeout, in milliseconds.\",\n              \"default\": 300000,\n              \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  150000,\n                  450000\n                ],\n                \"docs::human_name\": \"Message Timeout\",\n                \"docs::advanced\": true\n              }\n            },\n            \"socket_timeout_ms\": {\n              \"description\": \"Default timeout, in milliseconds, for network requests.\",\n              \"default\": 60000,\n              \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  30000,\n                  60000\n                ],\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Socket Timeout\"\n              }\n            },\n            \"topic\": {\n              \"description\": \"The Kafka topic name to write events to.\",\n              \"$ref\": \"#/definitions/vector::template::Template\",\n              \"_metadata\": {\n                \"docs::templateable\": true,\n                \"docs::examples\": [\n                  \"topic-1234\",\n                  \"logs-{{unit}}-%Y-%m-%d\"\n                ],\n                \"docs::human_name\": \"Topic\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Kafka authentication configuration.\",\n          \"$ref\": \"#/definitions/vector::kafka::KafkaAuthConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"kafka\"\n      }\n    },\n    \"vector::sinks::loki::config::LokiConfig\": {\n      \"description\": \"Configuration for the `loki` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\",\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"title\": \"The maximum size of a batch that is processed by a sink.\",\n              \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n              \"default\": 1000000,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"default\": 100000,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::human_name\": \"Max Events\"\n              }\n            },\n            \"timeout_secs\": {\n              \"description\": \"The maximum age of a batch before it is flushed.\",\n              \"default\": 1.0,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"description\": \"Compression configuration.\\nSnappy compression implies sending push requests as Protocol Buffers.\",\n          \"default\": \"snappy\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The base URL of the Loki instance.\",\n          \"description\": \"The `path` value is appended to this.\",\n          \"$ref\": \"#/definitions/vector::sinks::util::uri::UriSerde\",\n          \"_metadata\": {\n            \"docs::examples\": \"http://localhost:3100\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"labels\": {\n          \"title\": \"A set of labels that are attached to each batch of events.\",\n          \"description\": \"Both keys and values are templateable, which enables you to attach dynamic labels to events.\\n\\nValid label keys include `*`, and prefixes ending with `*`, to allow for the expansion of\\nobjects into multiple labels. See [Label expansion][label_expansion] for more information.\\n\\nNote: If the set of labels has high cardinality, this can cause drastic performance issues\\nwith Loki. To prevent this from happening, reduce the number of unique label keys and\\nvalues.\\n\\n[label_expansion]: https://vector.dev/docs/reference/configuration/sinks/loki/#label-expansion\",\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/vector::template::Template\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": {\n              \"{{ event_field }}\": \"{{ some_other_event_field }}\",\n              \"source\": \"vector\",\n              \"\\\"*\\\"\": \"{{ metadata }}\",\n              \"\\\"pod_labels_*\\\"\": \"{{ kubernetes.pod_labels }}\"\n            },\n            \"docs::additional_props_description\": \"A Loki label.\",\n            \"docs::human_name\": \"Labels\"\n          }\n        },\n        \"out_of_order_action\": {\n          \"title\": \"Out-of-order event behavior.\",\n          \"description\": \"Some sources may generate events with timestamps that aren't in chronological order. Even though the\\nsink sorts the events before sending them to Loki, there is a chance that another event could come in\\nthat is out of order with the latest events sent to Loki. Prior to Loki 2.4.0, this\\nwas not supported and would result in an error during the push request.\\n\\nIf you're using Loki 2.4.0 or newer, `Accept` is the preferred action, which lets Loki handle\\nany necessary sorting/reordering. If you're using an earlier version, then you must use `Drop`\\nor `RewriteTimestamp` depending on which option makes the most sense for your use case.\",\n          \"default\": \"accept\",\n          \"oneOf\": [\n            {\n              \"title\": \"Accept the event.\",\n              \"description\": \"The event is not dropped and is sent without modification.\\n\\nRequires Loki 2.4.0 or newer.\",\n              \"const\": \"accept\",\n              \"_metadata\": {\n                \"logical_name\": \"Accept\",\n                \"docs::human_name\": \"Accept\"\n              }\n            },\n            {\n              \"description\": \"Rewrite the timestamp of the event to the timestamp of the latest event seen by the sink.\",\n              \"const\": \"rewrite_timestamp\",\n              \"_metadata\": {\n                \"logical_name\": \"RewriteTimestamp\",\n                \"docs::human_name\": \"Rewrite Timestamp\"\n              }\n            },\n            {\n              \"description\": \"Drop the event.\",\n              \"const\": \"drop\",\n              \"_metadata\": {\n                \"logical_name\": \"Drop\",\n                \"docs::human_name\": \"Drop\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Out Of Order Action\"\n          }\n        },\n        \"path\": {\n          \"description\": \"The path to use in the URL of the Loki instance.\",\n          \"default\": \"/loki/api/v1/push\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Path\"\n          }\n        },\n        \"remove_label_fields\": {\n          \"description\": \"Whether or not to delete fields from the event when they are used as labels.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Remove Label Fields\"\n          }\n        },\n        \"remove_timestamp\": {\n          \"title\": \"Whether or not to remove the timestamp from the event payload.\",\n          \"description\": \"The timestamp is still sent as event metadata for Loki to use for indexing.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Remove Timestamp\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"tenant_id\": {\n          \"title\": \"The [tenant ID][tenant_id] to specify in requests to Loki.\",\n          \"description\": \"When running Loki locally, a tenant ID is not required.\\n\\n[tenant_id]: https://grafana.com/docs/loki/latest/operations/multi-tenancy/\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"some_tenant_id\",\n              \"{{ event_field }}\"\n            ],\n            \"docs::human_name\": \"Tenant ID\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"loki\"\n      }\n    },\n    \"vector::sinks::mezmo::LogdnaConfig\": {\n      \"description\": \"Configuration for the `logdna` sink.\",\n      \"$ref\": \"#/definitions/vector::sinks::mezmo::MezmoConfig\",\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"logdna\",\n        \"deprecated\": \"The `logdna` sink has been renamed. Please use `mezmo` instead.\"\n      }\n    },\n    \"vector::sinks::mezmo::MezmoConfig\": {\n      \"description\": \"Configuration for the `mezmo` (formerly `logdna`) sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"api_key\",\n        \"hostname\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"api_key\": {\n          \"description\": \"The Ingestion API key.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${LOGDNA_API_KEY}\",\n              \"ef8d5de700e7989468166c40fc8a0ccd\"\n            ],\n            \"docs::human_name\": \"API Key\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"default_app\": {\n          \"description\": \"The default app that is set for events that do not contain a `file` or `app` field.\",\n          \"default\": \"vector\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"my-app\",\n            \"docs::human_name\": \"Default App\"\n          }\n        },\n        \"default_env\": {\n          \"description\": \"The default environment that is set for events that do not contain an `env` field.\",\n          \"default\": \"production\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"staging\",\n            \"docs::human_name\": \"Default Env\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The HTTP endpoint to send logs to.\",\n          \"description\": \"Both IP address and hostname are accepted formats.\",\n          \"default\": \"https://logs.mezmo.com/\",\n          \"$ref\": \"#/definitions/vector::sinks::util::uri::UriSerde\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"http://127.0.0.1\",\n              \"http://example.com\"\n            ],\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"hostname\": {\n          \"description\": \"The hostname that is attached to each batch of events.\",\n          \"$ref\": \"#/definitions/vector::template::Template\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${HOSTNAME}\",\n              \"my-local-machine\"\n            ],\n            \"docs::human_name\": \"Hostname\"\n          }\n        },\n        \"ip\": {\n          \"description\": \"The IP address that is attached to each batch of events.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"0.0.0.0\",\n            \"docs::human_name\": \"IP Address\"\n          }\n        },\n        \"mac\": {\n          \"description\": \"The MAC address that is attached to each batch of events.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"my-mac-address\",\n            \"docs::human_name\": \"MAC Address\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"tags\": {\n          \"description\": \"The tags that are attached to each batch of events.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/vector::template::Template\"\n          },\n          \"_metadata\": {\n            \"docs::templateable\": true,\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"tag1\",\n              \"tag2\"\n            ],\n            \"docs::human_name\": \"Tags\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"mezmo\"\n      }\n    },\n    \"vector::sinks::mqtt::config::MqttSinkConfig\": {\n      \"description\": \"Configuration for the `mqtt` sink\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\",\n        \"host\",\n        \"topic\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"clean_session\": {\n          \"description\": \"If set to true, the MQTT session is cleaned on login.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Clean Session\"\n          }\n        },\n        \"client_id\": {\n          \"description\": \"MQTT client ID.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Client ID\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"host\": {\n          \"description\": \"MQTT server address (The broker’s domain name or IP address).\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"mqtt.example.com\",\n              \"127.0.0.1\"\n            ],\n            \"docs::human_name\": \"Host\"\n          }\n        },\n        \"keep_alive\": {\n          \"description\": \"Connection keep-alive interval.\",\n          \"default\": 60,\n          \"type\": \"integer\",\n          \"maximum\": 65535.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Keep Alive\"\n          }\n        },\n        \"password\": {\n          \"description\": \"MQTT password.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Password\"\n          }\n        },\n        \"port\": {\n          \"description\": \"TCP port of the MQTT server to connect to.\",\n          \"default\": 1883,\n          \"type\": \"integer\",\n          \"maximum\": 65535.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Port\"\n          }\n        },\n        \"quality_of_service\": {\n          \"description\": \"Supported Quality of Service types for MQTT.\",\n          \"default\": \"atleastonce\",\n          \"oneOf\": [\n            {\n              \"description\": \"AtLeastOnce.\",\n              \"const\": \"atleastonce\",\n              \"_metadata\": {\n                \"logical_name\": \"AtLeastOnce\",\n                \"docs::human_name\": \"At Least Once\"\n              }\n            },\n            {\n              \"description\": \"AtMostOnce.\",\n              \"const\": \"atmostonce\",\n              \"_metadata\": {\n                \"logical_name\": \"AtMostOnce\",\n                \"docs::human_name\": \"At Most Once\"\n              }\n            },\n            {\n              \"description\": \"ExactlyOnce.\",\n              \"const\": \"exactlyonce\",\n              \"_metadata\": {\n                \"logical_name\": \"ExactlyOnce\",\n                \"docs::human_name\": \"Exactly Once\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Quality Of Service\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"topic\": {\n          \"description\": \"MQTT publish topic (templates allowed)\",\n          \"$ref\": \"#/definitions/vector::template::Template\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Topic\"\n          }\n        },\n        \"user\": {\n          \"description\": \"MQTT username.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"User\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"mqtt\"\n      }\n    },\n    \"vector::sinks::nats::config::NatsSinkConfig\": {\n      \"description\": \"Configuration for the `nats` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\",\n        \"subject\",\n        \"url\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::nats::NatsAuthConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"connection_name\": {\n          \"title\": \"A NATS [name][nats_connection_name] assigned to the NATS connection.\",\n          \"description\": \"[nats_connection_name]: https://docs.nats.io/using-nats/developer/connecting/name\",\n          \"default\": \"vector\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"foo\",\n            \"docs::human_name\": \"Connection Name\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"adaptive_concurrency\": {\n              \"title\": \"Configuration of adaptive concurrency parameters.\",\n              \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n              \"default\": {\n                \"initial_concurrency\": 1,\n                \"decrease_ratio\": 0.9,\n                \"ewma_alpha\": 0.4,\n                \"rtt_deviation_scale\": 2.5,\n                \"max_concurrency_limit\": 200\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Adaptive Concurrency\"\n              }\n            },\n            \"concurrency\": {\n              \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n              \"default\": \"none\",\n              \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Concurrency\"\n              }\n            },\n            \"rate_limit_duration_secs\": {\n              \"description\": \"The time window used for the `rate_limit_num` option.\",\n              \"default\": 1,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Rate Limit Duration\"\n              }\n            },\n            \"rate_limit_num\": {\n              \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n              \"default\": 9223372036854775807,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"requests\",\n                \"docs::human_name\": \"Rate Limit Number\"\n              }\n            },\n            \"retry_attempts\": {\n              \"description\": \"The maximum number of retries to make for failed requests.\",\n              \"default\": 9223372036854775807,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"retries\",\n                \"docs::human_name\": \"Retry Attempts\"\n              }\n            },\n            \"retry_initial_backoff_secs\": {\n              \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n              \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n              \"default\": 1,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Retry Initial Backoff\"\n              }\n            },\n            \"retry_jitter_mode\": {\n              \"description\": \"The jitter mode to use for retry backoff behavior.\",\n              \"default\": \"Full\",\n              \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Retry Jitter Mode\"\n              }\n            },\n            \"retry_max_duration_secs\": {\n              \"description\": \"The maximum amount of time to wait between retries.\",\n              \"default\": 30,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Max Retry Duration\"\n              }\n            },\n            \"timeout_secs\": {\n              \"title\": \"The time a request can take before being aborted.\",\n              \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n              \"default\": 60,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"subject\": {\n          \"title\": \"The NATS [subject][nats_subject] to publish messages to.\",\n          \"description\": \"[nats_subject]: https://docs.nats.io/nats-concepts/subjects\",\n          \"$ref\": \"#/definitions/vector::template::Template\",\n          \"_metadata\": {\n            \"docs::templateable\": true,\n            \"docs::examples\": [\n              \"{{ host }}\",\n              \"foo\",\n              \"time.us.east\",\n              \"time.*.east\",\n              \"time.>\",\n              \">\"\n            ],\n            \"docs::human_name\": \"Subject\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"url\": {\n          \"title\": \"The NATS [URL][nats_url] to connect to.\",\n          \"description\": \"The URL must take the form of `nats://server:port`.\\nIf the port is not specified it defaults to 4222.\\n\\n[nats_url]: https://docs.nats.io/using-nats/developer/connecting#nats-url\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"nats://demo.nats.io\",\n              \"nats://127.0.0.1:4242\"\n            ],\n            \"docs::human_name\": \"URL\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"nats\"\n      }\n    },\n    \"vector::sinks::new_relic::config::NewRelicConfig\": {\n      \"description\": \"Configuration for the `new_relic` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"account_id\",\n        \"api\",\n        \"license_key\"\n      ],\n      \"properties\": {\n        \"account_id\": {\n          \"description\": \"The New Relic account ID.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"xxxx\",\n              \"${NEW_RELIC_ACCOUNT_KEY}\"\n            ],\n            \"docs::human_name\": \"Account ID\"\n          }\n        },\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"api\": {\n          \"description\": \"New Relic API endpoint.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Events API.\",\n              \"const\": \"events\",\n              \"_metadata\": {\n                \"logical_name\": \"Events\",\n                \"docs::human_name\": \"Events\"\n              }\n            },\n            {\n              \"description\": \"Metrics API.\",\n              \"const\": \"metrics\",\n              \"_metadata\": {\n                \"logical_name\": \"Metrics\",\n                \"docs::human_name\": \"Metrics\"\n              }\n            },\n            {\n              \"description\": \"Logs API.\",\n              \"const\": \"logs\",\n              \"_metadata\": {\n                \"logical_name\": \"Logs\",\n                \"docs::human_name\": \"Logs\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"API\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"title\": \"The maximum size of a batch that is processed by a sink.\",\n              \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n              \"default\": 1000000,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"default\": 100,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::human_name\": \"Max Events\"\n              }\n            },\n            \"timeout_secs\": {\n              \"description\": \"The maximum age of a batch before it is flushed.\",\n              \"default\": 1.0,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"gzip\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"license_key\": {\n          \"description\": \"A valid New Relic license key.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"xxxx\",\n              \"${NEW_RELIC_LICENSE_KEY}\"\n            ],\n            \"docs::human_name\": \"License Key\"\n          }\n        },\n        \"region\": {\n          \"description\": \"New Relic region.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"New Relic region.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"US region.\",\n                  \"const\": \"us\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Us\",\n                    \"docs::human_name\": \"US\"\n                  }\n                },\n                {\n                  \"description\": \"EU region.\",\n                  \"const\": \"eu\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Eu\",\n                    \"docs::human_name\": \"EU\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Region\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"new_relic\"\n      }\n    },\n    \"vector::sinks::papertrail::PapertrailConfig\": {\n      \"description\": \"Configuration for the `papertrail` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\",\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"description\": \"The TCP endpoint to send logs to.\",\n          \"$ref\": \"#/definitions/vector::sinks::util::uri::UriSerde\",\n          \"_metadata\": {\n            \"docs::examples\": \"logs.papertrailapp.com:12345\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"keepalive\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"process\": {\n          \"description\": \"The value to use as the `process` in Papertrail.\",\n          \"default\": \"vector\",\n          \"$ref\": \"#/definitions/vector::template::Template\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"{{ process }}\",\n              \"my-process\"\n            ],\n            \"docs::human_name\": \"Process\"\n          }\n        },\n        \"send_buffer_bytes\": {\n          \"description\": \"Configures the send buffer size using the `SO_SNDBUF` option on the socket.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Send Buffer Bytes\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"papertrail\"\n      }\n    },\n    \"vector::sinks::prometheus::exporter::PrometheusExporterConfig\": {\n      \"description\": \"Configuration for the `prometheus_exporter` sink.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The address to expose for scraping.\",\n          \"description\": \"The metrics are exposed at the typical Prometheus exporter path, `/metrics`.\",\n          \"default\": \"0.0.0.0:9598\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::examples\": \"192.160.0.10:9598\",\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"buckets\": {\n          \"title\": \"Default buckets to use for aggregating [distribution][dist_metric_docs] metrics into histograms.\",\n          \"description\": \"[dist_metric_docs]: https://vector.dev/docs/about/under-the-hood/architecture/data-model/metric/#distribution\",\n          \"default\": [\n            0.005,\n            0.01,\n            0.025,\n            0.05,\n            0.1,\n            0.25,\n            0.5,\n            1.0,\n            2.5,\n            5.0,\n            10.0\n          ],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"number\",\n            \"maximum\": 9007199254740991.0,\n            \"minimum\": -9007199254740991.0,\n            \"_metadata\": {\n              \"docs::numeric_type\": \"float\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Buckets\"\n          }\n        },\n        \"default_namespace\": {\n          \"title\": \"The default namespace for any metrics sent.\",\n          \"description\": \"This namespace is only used if a metric has no existing namespace. When a namespace is\\npresent, it is used as a prefix to the metric name, and separated with an underscore (`_`).\\n\\nIt should follow the Prometheus [naming conventions][prom_naming_docs].\\n\\n[prom_naming_docs]: https://prometheus.io/docs/practices/naming/#metric-names\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Default Namespace\"\n          }\n        },\n        \"distributions_as_summaries\": {\n          \"title\": \"Whether or not to render [distributions][dist_metric_docs] as an [aggregated histogram][prom_agg_hist_docs] or  [aggregated summary][prom_agg_summ_docs].\",\n          \"description\": \"While distributions as a lossless way to represent a set of samples for a\\nmetric is supported, Prometheus clients (the application being scraped, which is this sink) must\\naggregate locally into either an aggregated histogram or aggregated summary.\\n\\n[dist_metric_docs]: https://vector.dev/docs/about/under-the-hood/architecture/data-model/metric/#distribution\\n[prom_agg_hist_docs]: https://prometheus.io/docs/concepts/metric_types/#histogram\\n[prom_agg_summ_docs]: https://prometheus.io/docs/concepts/metric_types/#summary\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Distributions As Summaries\"\n          }\n        },\n        \"flush_period_secs\": {\n          \"title\": \"The interval, in seconds, on which metrics are flushed.\",\n          \"description\": \"On the flush interval, if a metric has not been seen since the last flush interval, it is\\nconsidered expired and is removed.\\n\\nBe sure to configure this value higher than your client’s scrape interval.\",\n          \"default\": 60,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Flush Interval\"\n          }\n        },\n        \"quantiles\": {\n          \"title\": \"Quantiles to use for aggregating [distribution][dist_metric_docs] metrics into a summary.\",\n          \"description\": \"[dist_metric_docs]: https://vector.dev/docs/about/under-the-hood/architecture/data-model/metric/#distribution\",\n          \"default\": [\n            0.5,\n            0.75,\n            0.9,\n            0.95,\n            0.99\n          ],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"number\",\n            \"maximum\": 9007199254740991.0,\n            \"minimum\": -9007199254740991.0,\n            \"_metadata\": {\n              \"docs::numeric_type\": \"float\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Quantiles\"\n          }\n        },\n        \"suppress_timestamp\": {\n          \"title\": \"Suppresses timestamps on the Prometheus output.\",\n          \"description\": \"This can sometimes be useful when the source of metrics leads to their timestamps being too\\nfar in the past for Prometheus to allow them, such as when aggregating metrics over long\\ntime periods, or when replaying old metrics from a disk buffer.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Suppress Timestamp\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"prometheus_exporter\"\n      }\n    },\n    \"vector::sinks::prometheus::remote_write::config::RemoteWriteConfig\": {\n      \"description\": \"Configuration for the `prometheus_remote_write` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auth\": {\n          \"description\": \"Authentication strategies.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Authentication strategies.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"HTTP Basic Authentication.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"password\",\n                    \"strategy\",\n                    \"user\"\n                  ],\n                  \"properties\": {\n                    \"password\": {\n                      \"description\": \"Basic authentication password.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Password\"\n                      }\n                    },\n                    \"strategy\": {\n                      \"description\": \"HTTP Basic Authentication.\",\n                      \"const\": \"basic\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Strategy\"\n                      }\n                    },\n                    \"user\": {\n                      \"description\": \"Basic authentication username.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"User\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Basic\",\n                    \"docs::human_name\": \"Basic\"\n                  }\n                },\n                {\n                  \"title\": \"Bearer authentication.\",\n                  \"description\": \"A bearer token (OAuth2, JWT, etc) is passed as-is.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"strategy\",\n                    \"token\"\n                  ],\n                  \"properties\": {\n                    \"strategy\": {\n                      \"title\": \"Bearer authentication.\",\n                      \"description\": \"A bearer token (OAuth2, JWT, etc) is passed as-is.\",\n                      \"const\": \"bearer\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Strategy\"\n                      }\n                    },\n                    \"token\": {\n                      \"description\": \"The bearer token to send.\",\n                      \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Token\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Bearer\",\n                    \"docs::human_name\": \"Bearer\"\n                  }\n                },\n                {\n                  \"description\": \"Amazon Prometheus Service-specific authentication.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n                      \"anyOf\": [\n                        {\n                          \"description\": \"Authenticate using a fixed access key and secret pair.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"access_key_id\",\n                            \"secret_access_key\"\n                          ],\n                          \"properties\": {\n                            \"access_key_id\": {\n                              \"description\": \"The AWS access key ID.\",\n                              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"AKIAIOSFODNN7EXAMPLE\",\n                                \"docs::human_name\": \"Access Key ID\"\n                              }\n                            },\n                            \"assume_role\": {\n                              \"title\": \"The ARN of an [IAM role][iam_role] to assume.\",\n                              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"arn:aws:iam::123456789098:role/my_role\",\n                                \"docs::human_name\": \"Assume Role\"\n                              }\n                            },\n                            \"external_id\": {\n                              \"title\": \"The optional unique external ID in conjunction with role to assume.\",\n                              \"description\": \"[external_id]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"randomEXAMPLEidString\",\n                                \"docs::human_name\": \"External ID\"\n                              }\n                            },\n                            \"region\": {\n                              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n                              \"description\": \"If not set, this will default to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"us-west-2\",\n                                \"docs::human_name\": \"Region\"\n                              }\n                            },\n                            \"secret_access_key\": {\n                              \"description\": \"The AWS secret access key.\",\n                              \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n                                \"docs::human_name\": \"Secret Access Key\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"AccessKey\",\n                            \"docs::human_name\": \"Access Key\"\n                          }\n                        },\n                        {\n                          \"title\": \"Authenticate using credentials stored in a file.\",\n                          \"description\": \"Additionally, the specific credential profile to use can be set.\\nThe file format must match the credentials file format outlined in\\n<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html>.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"credentials_file\"\n                          ],\n                          \"properties\": {\n                            \"credentials_file\": {\n                              \"description\": \"Path to the credentials file.\",\n                              \"type\": \"string\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"/my/aws/credentials\",\n                                \"docs::human_name\": \"Credentials File\"\n                              }\n                            },\n                            \"profile\": {\n                              \"title\": \"The credentials profile to use.\",\n                              \"description\": \"Used to select AWS credentials from a provided credentials file.\",\n                              \"default\": \"default\",\n                              \"type\": \"string\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"develop\",\n                                \"docs::human_name\": \"Profile\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"File\",\n                            \"docs::human_name\": \"File\"\n                          }\n                        },\n                        {\n                          \"description\": \"Assume the given role ARN.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"assume_role\"\n                          ],\n                          \"properties\": {\n                            \"assume_role\": {\n                              \"title\": \"The ARN of an [IAM role][iam_role] to assume.\",\n                              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n                              \"type\": \"string\",\n                              \"_metadata\": {\n                                \"docs::examples\": \"arn:aws:iam::123456789098:role/my_role\",\n                                \"docs::human_name\": \"Assume Role\"\n                              }\n                            },\n                            \"external_id\": {\n                              \"title\": \"The optional unique external ID in conjunction with role to assume.\",\n                              \"description\": \"[external_id]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"randomEXAMPLEidString\",\n                                \"docs::human_name\": \"External ID\"\n                              }\n                            },\n                            \"imds\": {\n                              \"description\": \"Configuration for authenticating with AWS through IMDS.\",\n                              \"default\": {\n                                \"max_attempts\": 4,\n                                \"connect_timeout_seconds\": 1,\n                                \"read_timeout_seconds\": 1\n                              },\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"connect_timeout_seconds\": {\n                                  \"description\": \"Connect timeout for IMDS.\",\n                                  \"default\": 1,\n                                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Connect Timeout Seconds\"\n                                  }\n                                },\n                                \"max_attempts\": {\n                                  \"description\": \"Number of IMDS retries for fetching tokens and metadata.\",\n                                  \"default\": 4,\n                                  \"type\": \"integer\",\n                                  \"maximum\": 4294967295.0,\n                                  \"minimum\": 0.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"uint\",\n                                    \"docs::human_name\": \"Max Attempts\"\n                                  }\n                                },\n                                \"read_timeout_seconds\": {\n                                  \"description\": \"Read timeout for IMDS.\",\n                                  \"default\": 1,\n                                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Read Timeout Seconds\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"IMDS\"\n                              }\n                            },\n                            \"load_timeout_secs\": {\n                              \"title\": \"Timeout for assuming the role, in seconds.\",\n                              \"description\": \"Relevant when the default credentials chain or `assume_role` is used.\",\n                              \"type\": [\n                                \"integer\",\n                                \"null\"\n                              ],\n                              \"maximum\": 9007199254740991.0,\n                              \"minimum\": 0.0,\n                              \"_metadata\": {\n                                \"docs::numeric_type\": \"uint\",\n                                \"docs::optional\": true,\n                                \"docs::type_unit\": \"seconds\",\n                                \"docs::examples\": 30,\n                                \"docs::human_name\": \"Load Timeout\"\n                              }\n                            },\n                            \"region\": {\n                              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n                              \"description\": \"If not set, this defaults to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"us-west-2\",\n                                \"docs::human_name\": \"Region\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Role\",\n                            \"docs::human_name\": \"Role\"\n                          }\n                        },\n                        {\n                          \"description\": \"Default authentication strategy which tries a variety of substrategies in sequential order.\",\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"imds\": {\n                              \"description\": \"Configuration for authenticating with AWS through IMDS.\",\n                              \"default\": {\n                                \"max_attempts\": 4,\n                                \"connect_timeout_seconds\": 1,\n                                \"read_timeout_seconds\": 1\n                              },\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"connect_timeout_seconds\": {\n                                  \"description\": \"Connect timeout for IMDS.\",\n                                  \"default\": 1,\n                                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Connect Timeout Seconds\"\n                                  }\n                                },\n                                \"max_attempts\": {\n                                  \"description\": \"Number of IMDS retries for fetching tokens and metadata.\",\n                                  \"default\": 4,\n                                  \"type\": \"integer\",\n                                  \"maximum\": 4294967295.0,\n                                  \"minimum\": 0.0,\n                                  \"_metadata\": {\n                                    \"docs::numeric_type\": \"uint\",\n                                    \"docs::human_name\": \"Max Attempts\"\n                                  }\n                                },\n                                \"read_timeout_seconds\": {\n                                  \"description\": \"Read timeout for IMDS.\",\n                                  \"default\": 1,\n                                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                                  \"_metadata\": {\n                                    \"docs::human_name\": \"Read Timeout Seconds\"\n                                  }\n                                }\n                              },\n                              \"unevaluatedProperties\": false,\n                              \"_metadata\": {\n                                \"docs::human_name\": \"IMDS\"\n                              }\n                            },\n                            \"load_timeout_secs\": {\n                              \"title\": \"Timeout for successfully loading any credentials, in seconds.\",\n                              \"description\": \"Relevant when the default credentials chain or `assume_role` is used.\",\n                              \"type\": [\n                                \"integer\",\n                                \"null\"\n                              ],\n                              \"maximum\": 9007199254740991.0,\n                              \"minimum\": 0.0,\n                              \"_metadata\": {\n                                \"docs::numeric_type\": \"uint\",\n                                \"docs::optional\": true,\n                                \"docs::type_unit\": \"seconds\",\n                                \"docs::examples\": 30,\n                                \"docs::human_name\": \"Load Timeout\"\n                              }\n                            },\n                            \"region\": {\n                              \"title\": \"The [AWS region][aws_region] to send STS requests to.\",\n                              \"description\": \"If not set, this defaults to the configured region\\nfor the service itself.\\n\\n[aws_region]: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints\",\n                              \"type\": [\n                                \"string\",\n                                \"null\"\n                              ],\n                              \"_metadata\": {\n                                \"docs::optional\": true,\n                                \"docs::examples\": \"us-west-2\",\n                                \"docs::human_name\": \"Region\"\n                              }\n                            }\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Default\",\n                            \"docs::human_name\": \"Default\"\n                          }\n                        }\n                      ],\n                      \"_metadata\": {\n                        \"docs::enum_tagging\": \"untagged\"\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"strategy\"\n                      ],\n                      \"properties\": {\n                        \"strategy\": {\n                          \"description\": \"Amazon Prometheus Service-specific authentication.\",\n                          \"const\": \"aws\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Strategy\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Aws\",\n                    \"docs::human_name\": \"AWS\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tag_description\": \"The authentication strategy to use.\",\n                \"docs::enum_tagging\": \"internal\",\n                \"docs::enum_tag_field\": \"strategy\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"aws\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::aws::region::RegionOrEndpoint>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"AWS\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"The batch config for remote write.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null,\n            \"aggregate\": true\n          },\n          \"allOf\": [\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"aggregate\": {\n                  \"description\": \"Whether or not to aggregate metrics within a batch.\",\n                  \"default\": true,\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Aggregate\"\n                  }\n                }\n              }\n            },\n            {\n              \"description\": \"Event batching behavior.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": null,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 1000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"docs::advanced\": true\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"buckets\": {\n          \"title\": \"Default buckets to use for aggregating [distribution][dist_metric_docs] metrics into histograms.\",\n          \"description\": \"[dist_metric_docs]: https://vector.dev/docs/about/under-the-hood/architecture/data-model/metric/#distribution\",\n          \"default\": [\n            0.005,\n            0.01,\n            0.025,\n            0.05,\n            0.1,\n            0.25,\n            0.5,\n            1.0,\n            2.5,\n            5.0,\n            10.0\n          ],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"number\",\n            \"maximum\": 9007199254740991.0,\n            \"minimum\": -9007199254740991.0,\n            \"_metadata\": {\n              \"docs::numeric_type\": \"float\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Buckets\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"snappy\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"default_namespace\": {\n          \"title\": \"The default namespace for any metrics sent.\",\n          \"description\": \"This namespace is only used if a metric has no existing namespace. When a namespace is\\npresent, it is used as a prefix to the metric name, and separated with an underscore (`_`).\\n\\nIt should follow the Prometheus [naming conventions][prom_naming_docs].\\n\\n[prom_naming_docs]: https://prometheus.io/docs/practices/naming/#metric-names\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"service\",\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Default Namespace\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The endpoint to send data to.\",\n          \"description\": \"The endpoint should include the scheme and the path to write to.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"https://localhost:8087/api/v1/write\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"quantiles\": {\n          \"title\": \"Quantiles to use for aggregating [distribution][dist_metric_docs] metrics into a summary.\",\n          \"description\": \"[dist_metric_docs]: https://vector.dev/docs/about/under-the-hood/architecture/data-model/metric/#distribution\",\n          \"default\": [\n            0.5,\n            0.75,\n            0.9,\n            0.95,\n            0.99\n          ],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"number\",\n            \"maximum\": 9007199254740991.0,\n            \"minimum\": -9007199254740991.0,\n            \"_metadata\": {\n              \"docs::numeric_type\": \"float\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Quantiles\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"tenant_id\": {\n          \"title\": \"The tenant ID to send.\",\n          \"description\": \"If set, a header named `X-Scope-OrgID` is added to outgoing requests with the value of this setting.\\n\\nThis may be used by Cortex or other remote services to identify the tenant making the request.\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::examples\": \"my-domain\",\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Tenant ID\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"prometheus_remote_write\"\n      }\n    },\n    \"vector::sinks::pulsar::config::PulsarSinkConfig\": {\n      \"description\": \"Configuration for the `pulsar` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\",\n        \"endpoint\",\n        \"topic\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auth\": {\n          \"description\": \"Authentication configuration.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Authentication configuration.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"name\": {\n                  \"title\": \"Basic authentication name/username.\",\n                  \"description\": \"This can be used either for basic authentication (username/password) or JWT authentication.\\nWhen used for JWT, the value should be `token`.\",\n                  \"type\": [\n                    \"string\",\n                    \"null\"\n                  ],\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::examples\": [\n                      \"${PULSAR_NAME}\",\n                      \"name123\"\n                    ],\n                    \"docs::human_name\": \"Name\"\n                  }\n                },\n                \"oauth2\": {\n                  \"description\": \"OAuth2-specific authentication configuration.\",\n                  \"oneOf\": [\n                    {\n                      \"type\": \"null\"\n                    },\n                    {\n                      \"description\": \"OAuth2-specific authentication configuration.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"credentials_url\",\n                        \"issuer_url\"\n                      ],\n                      \"properties\": {\n                        \"audience\": {\n                          \"description\": \"The OAuth2 audience.\",\n                          \"type\": [\n                            \"string\",\n                            \"null\"\n                          ],\n                          \"_metadata\": {\n                            \"docs::optional\": true,\n                            \"docs::examples\": [\n                              \"${OAUTH2_AUDIENCE}\",\n                              \"pulsar\"\n                            ],\n                            \"docs::human_name\": \"Audience\"\n                          }\n                        },\n                        \"credentials_url\": {\n                          \"title\": \"The credentials URL.\",\n                          \"description\": \"A data URL is also supported.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::examples\": [\n                              \"{OAUTH2_CREDENTIALS_URL}\",\n                              \"file:///oauth2_credentials\",\n                              \"data:application/json;base64,cHVsc2FyCg==\"\n                            ],\n                            \"docs::human_name\": \"Credentials URL\"\n                          }\n                        },\n                        \"issuer_url\": {\n                          \"description\": \"The issuer URL.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::examples\": [\n                              \"${OAUTH2_ISSUER_URL}\",\n                              \"https://oauth2.issuer\"\n                            ],\n                            \"docs::human_name\": \"Issuer URL\"\n                          }\n                        },\n                        \"scope\": {\n                          \"description\": \"The OAuth2 scope.\",\n                          \"type\": [\n                            \"string\",\n                            \"null\"\n                          ],\n                          \"_metadata\": {\n                            \"docs::optional\": true,\n                            \"docs::examples\": [\n                              \"${OAUTH2_SCOPE}\",\n                              \"admin\"\n                            ],\n                            \"docs::human_name\": \"Scope\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"OAuth2\"\n                  }\n                },\n                \"token\": {\n                  \"title\": \"Basic authentication password/token.\",\n                  \"description\": \"This can be used either for basic authentication (username/password) or JWT authentication.\\nWhen used for JWT, the value should be the signed JWT, in the compact representation.\",\n                  \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n                  \"_metadata\": {\n                    \"docs::examples\": [\n                      \"${PULSAR_TOKEN}\",\n                      \"123456789\"\n                    ],\n                    \"docs::human_name\": \"Token\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_events\": null,\n            \"max_bytes\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"title\": \"The maximum amount of events in a batch before it is flushed.\",\n              \"description\": \"Note this is an unsigned 32 bit integer which is a smaller capacity than\\nmany of the other sink batch settings.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 4294967295.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::examples\": 1000,\n                \"docs::human_name\": \"Max Events\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"description\": \"Supported compression types for Pulsar.\",\n          \"default\": \"none\",\n          \"oneOf\": [\n            {\n              \"description\": \"No compression.\",\n              \"const\": \"none\",\n              \"_metadata\": {\n                \"logical_name\": \"None\",\n                \"docs::human_name\": \"None\"\n              }\n            },\n            {\n              \"description\": \"LZ4.\",\n              \"const\": \"lz4\",\n              \"_metadata\": {\n                \"logical_name\": \"Lz4\",\n                \"docs::human_name\": \"LZ4\"\n              }\n            },\n            {\n              \"description\": \"Zlib.\",\n              \"const\": \"zlib\",\n              \"_metadata\": {\n                \"logical_name\": \"Zlib\",\n                \"docs::human_name\": \"Zlib\"\n              }\n            },\n            {\n              \"description\": \"Zstandard.\",\n              \"const\": \"zstd\",\n              \"_metadata\": {\n                \"logical_name\": \"Zstd\",\n                \"docs::human_name\": \"Zstd\"\n              }\n            },\n            {\n              \"description\": \"Snappy.\",\n              \"const\": \"snappy\",\n              \"_metadata\": {\n                \"logical_name\": \"Snappy\",\n                \"docs::human_name\": \"Snappy\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The endpoint to which the Pulsar client should connect to.\",\n          \"description\": \"The endpoint should specify the pulsar protocol and port.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"pulsar://127.0.0.1:6650\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"partition_key_field\": {\n          \"title\": \"The log field name or tags key to use for the partition key.\",\n          \"description\": \"If the field does not exist in the log event or metric tags, a blank value will be used.\\n\\nIf omitted, the key is not sent.\\n\\nPulsar uses a hash of the key to choose the topic-partition or uses round-robin if the record has no key.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalTargetPath>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"message\",\n              \"my_field\"\n            ],\n            \"docs::human_name\": \"Partition Key Field\"\n          }\n        },\n        \"producer_name\": {\n          \"description\": \"The name of the producer. If not specified, the default name assigned by Pulsar is used.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"producer-name\",\n            \"docs::human_name\": \"Producer Name\"\n          }\n        },\n        \"properties_key\": {\n          \"title\": \"The log field name to use for the Pulsar properties key.\",\n          \"description\": \"If omitted, no properties will be written.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalTargetPath>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Properties Key\"\n          }\n        },\n        \"topic\": {\n          \"description\": \"The Pulsar topic name to write events to.\",\n          \"$ref\": \"#/definitions/vector::template::Template\",\n          \"_metadata\": {\n            \"docs::examples\": \"topic-1234\",\n            \"docs::human_name\": \"Topic\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"pulsar\"\n      }\n    },\n    \"vector::sinks::redis::config::RedisSinkConfig\": {\n      \"description\": \"Configuration for the `redis` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\",\n        \"endpoint\",\n        \"key\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"title\": \"The maximum size of a batch that is processed by a sink.\",\n              \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n              \"default\": null,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"default\": 1,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::human_name\": \"Max Events\"\n              }\n            },\n            \"timeout_secs\": {\n              \"description\": \"The maximum age of a batch before it is flushed.\",\n              \"default\": 1.0,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"data_type\": {\n          \"description\": \"Redis data type to store messages in.\",\n          \"default\": \"list\",\n          \"oneOf\": [\n            {\n              \"title\": \"The Redis `list` type.\",\n              \"description\": \"This resembles a deque, where messages can be popped and pushed from either end.\\n\\nThis is the default.\",\n              \"const\": \"list\",\n              \"_metadata\": {\n                \"logical_name\": \"List\",\n                \"docs::human_name\": \"List\"\n              }\n            },\n            {\n              \"title\": \"The Redis `channel` type.\",\n              \"description\": \"Redis channels function in a pub/sub fashion, allowing many-to-many broadcasting and receiving.\",\n              \"const\": \"channel\",\n              \"_metadata\": {\n                \"logical_name\": \"Channel\",\n                \"docs::human_name\": \"Channel\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Data Type\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The URL of the Redis endpoint to connect to.\",\n          \"description\": \"The URL _must_ take the form of `protocol://server:port/db` where the protocol can either be\\n`redis` or `rediss` for connections secured via TLS.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"redis://127.0.0.1:6379/0\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"key\": {\n          \"description\": \"The Redis key to publish messages to.\",\n          \"$ref\": \"#/definitions/vector::template::Template\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"syslog:{{ app }}\",\n              \"vector\"\n            ],\n            \"docs::human_name\": \"Key\"\n          }\n        },\n        \"list_option\": {\n          \"description\": \"List-specific options.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"List-specific options.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"method\"\n              ],\n              \"properties\": {\n                \"method\": {\n                  \"description\": \"The method to use for pushing messages into a `list`.\",\n                  \"oneOf\": [\n                    {\n                      \"title\": \"Use the `rpush` method.\",\n                      \"description\": \"This pushes messages onto the tail of the list.\\n\\nThis is the default.\",\n                      \"const\": \"rpush\",\n                      \"_metadata\": {\n                        \"logical_name\": \"RPush\",\n                        \"docs::human_name\": \"R Push\"\n                      }\n                    },\n                    {\n                      \"title\": \"Use the `lpush` method.\",\n                      \"description\": \"This pushes messages onto the head of the list.\",\n                      \"const\": \"lpush\",\n                      \"_metadata\": {\n                        \"logical_name\": \"LPush\",\n                        \"docs::human_name\": \"L Push\"\n                      }\n                    }\n                  ],\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\",\n                    \"docs::human_name\": \"Method\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"List Option\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"adaptive_concurrency\": {\n              \"title\": \"Configuration of adaptive concurrency parameters.\",\n              \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n              \"default\": {\n                \"initial_concurrency\": 1,\n                \"decrease_ratio\": 0.9,\n                \"ewma_alpha\": 0.4,\n                \"rtt_deviation_scale\": 2.5,\n                \"max_concurrency_limit\": 200\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Adaptive Concurrency\"\n              }\n            },\n            \"concurrency\": {\n              \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n              \"default\": \"none\",\n              \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Concurrency\"\n              }\n            },\n            \"rate_limit_duration_secs\": {\n              \"description\": \"The time window used for the `rate_limit_num` option.\",\n              \"default\": 1,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Rate Limit Duration\"\n              }\n            },\n            \"rate_limit_num\": {\n              \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n              \"default\": 9223372036854775807,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"requests\",\n                \"docs::human_name\": \"Rate Limit Number\"\n              }\n            },\n            \"retry_attempts\": {\n              \"description\": \"The maximum number of retries to make for failed requests.\",\n              \"default\": 9223372036854775807,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"retries\",\n                \"docs::human_name\": \"Retry Attempts\"\n              }\n            },\n            \"retry_initial_backoff_secs\": {\n              \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n              \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n              \"default\": 1,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Retry Initial Backoff\"\n              }\n            },\n            \"retry_jitter_mode\": {\n              \"description\": \"The jitter mode to use for retry backoff behavior.\",\n              \"default\": \"Full\",\n              \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Retry Jitter Mode\"\n              }\n            },\n            \"retry_max_duration_secs\": {\n              \"description\": \"The maximum amount of time to wait between retries.\",\n              \"default\": 30,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Max Retry Duration\"\n              }\n            },\n            \"timeout_secs\": {\n              \"title\": \"The time a request can take before being aborted.\",\n              \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n              \"default\": 60,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Request\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"redis\"\n      }\n    },\n    \"vector::sinks::sematext::Region\": {\n      \"description\": \"The Sematext region to send data to.\",\n      \"oneOf\": [\n        {\n          \"description\": \"United States\",\n          \"const\": \"us\",\n          \"_metadata\": {\n            \"logical_name\": \"Us\",\n            \"docs::human_name\": \"US\"\n          }\n        },\n        {\n          \"description\": \"Europe\",\n          \"const\": \"eu\",\n          \"_metadata\": {\n            \"logical_name\": \"Eu\",\n            \"docs::human_name\": \"EU\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"external\"\n      }\n    },\n    \"vector::sinks::sematext::logs::SematextLogsConfig\": {\n      \"description\": \"Configuration for the `sematext_logs` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"token\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Transformations to prepare an event for serialization.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector::codecs::encoding::transformer::Transformer\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The endpoint to send data to.\",\n          \"description\": \"Setting this option overrides the `region` option.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"http://127.0.0.1\",\n              \"https://example.com\"\n            ],\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"region\": {\n          \"description\": \"The Sematext region to send data to.\",\n          \"default\": \"us\",\n          \"$ref\": \"#/definitions/vector::sinks::sematext::Region\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Region\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"token\": {\n          \"description\": \"The token that is used to write to Sematext.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${SEMATEXT_TOKEN}\",\n              \"some-sematext-token\"\n            ],\n            \"docs::human_name\": \"Token\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"sematext_logs\"\n      }\n    },\n    \"vector::sinks::sematext::metrics::SematextMetricsConfig\": {\n      \"description\": \"Configuration for the `sematext_metrics` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"default_namespace\",\n        \"token\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"title\": \"The maximum size of a batch that is processed by a sink.\",\n              \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n              \"default\": null,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"default\": 20,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::human_name\": \"Max Events\"\n              }\n            },\n            \"timeout_secs\": {\n              \"description\": \"The maximum age of a batch before it is flushed.\",\n              \"default\": 1.0,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"default_namespace\": {\n          \"title\": \"Sets the default namespace for any metrics sent.\",\n          \"description\": \"This namespace is only used if a metric has no existing namespace. When a namespace is\\npresent, it is used as a prefix to the metric name, and separated with a period (`.`).\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"service\",\n            \"docs::human_name\": \"Default Namespace\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The endpoint to send data to.\",\n          \"description\": \"Setting this option overrides the `region` option.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"http://127.0.0.1\",\n              \"https://example.com\"\n            ],\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"region\": {\n          \"description\": \"The Sematext region to send data to.\",\n          \"default\": \"us\",\n          \"$ref\": \"#/definitions/vector::sinks::sematext::Region\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Region\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"token\": {\n          \"description\": \"The token that is used to write to Sematext.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${SEMATEXT_TOKEN}\",\n              \"some-sematext-token\"\n            ],\n            \"docs::human_name\": \"Token\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"sematext_metrics\"\n      }\n    },\n    \"vector::sinks::socket::SocketSinkConfig\": {\n      \"description\": \"Configuration for the `socket` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Socket mode.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Send over TCP.\",\n              \"allOf\": [\n                {\n                  \"description\": \"TCP configuration.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"A TCP sink.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"address\"\n                      ],\n                      \"properties\": {\n                        \"address\": {\n                          \"title\": \"The address to connect to.\",\n                          \"description\": \"Both IP address and hostname are accepted formats.\\n\\nThe address _must_ include a port.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::examples\": [\n                              \"92.12.333.224:5000\",\n                              \"https://somehost:5000\"\n                            ],\n                            \"docs::human_name\": \"Address\"\n                          }\n                        },\n                        \"keepalive\": {\n                          \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Keepalive\"\n                          }\n                        },\n                        \"send_buffer_bytes\": {\n                          \"title\": \"The size of the socket's send buffer.\",\n                          \"description\": \"If set, the value of the setting is passed via the `SO_SNDBUF` option.\",\n                          \"type\": [\n                            \"integer\",\n                            \"null\"\n                          ],\n                          \"maximum\": 9007199254740991.0,\n                          \"minimum\": 0.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::optional\": true,\n                            \"docs::type_unit\": \"bytes\",\n                            \"docs::examples\": 65536,\n                            \"docs::human_name\": \"Send Buffer Bytes\"\n                          }\n                        },\n                        \"tls\": {\n                          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"TLS\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"description\": \"Encoding configuration.\",\n                      \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n                    }\n                  ]\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Send over TCP.\",\n                      \"const\": \"tcp\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Tcp\",\n                \"docs::human_name\": \"TCP\"\n              }\n            },\n            {\n              \"description\": \"Send over UDP.\",\n              \"allOf\": [\n                {\n                  \"description\": \"UDP configuration.\",\n                  \"allOf\": [\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"encoding\"\n                      ],\n                      \"properties\": {\n                        \"encoding\": {\n                          \"description\": \"Configures how events are encoded into raw bytes.\",\n                          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Encoding\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"description\": \"A UDP sink.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"address\"\n                      ],\n                      \"properties\": {\n                        \"address\": {\n                          \"title\": \"The address to connect to.\",\n                          \"description\": \"Both IP address and hostname are accepted formats.\\n\\nThe address _must_ include a port.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::examples\": [\n                              \"92.12.333.224:5000\",\n                              \"https://somehost:5000\"\n                            ],\n                            \"docs::human_name\": \"Address\"\n                          }\n                        },\n                        \"send_buffer_bytes\": {\n                          \"title\": \"The size of the socket's send buffer.\",\n                          \"description\": \"If set, the value of the setting is passed via the `SO_SNDBUF` option.\",\n                          \"type\": [\n                            \"integer\",\n                            \"null\"\n                          ],\n                          \"maximum\": 9007199254740991.0,\n                          \"minimum\": 0.0,\n                          \"_metadata\": {\n                            \"docs::numeric_type\": \"uint\",\n                            \"docs::optional\": true,\n                            \"docs::type_unit\": \"bytes\",\n                            \"docs::examples\": 65536,\n                            \"docs::human_name\": \"Send Buffer Bytes\"\n                          }\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Send over UDP.\",\n                      \"const\": \"udp\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Udp\",\n                \"docs::human_name\": \"UDP\"\n              }\n            },\n            {\n              \"description\": \"Send over a Unix domain socket (UDS).\",\n              \"allOf\": [\n                {\n                  \"description\": \"Unix Domain Socket configuration.\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"A Unix Domain Socket sink.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"path\"\n                      ],\n                      \"properties\": {\n                        \"path\": {\n                          \"title\": \"The Unix socket path.\",\n                          \"description\": \"This should be an absolute path.\",\n                          \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                          \"_metadata\": {\n                            \"docs::examples\": \"/path/to/socket\",\n                            \"docs::human_name\": \"Path\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"description\": \"Encoding configuration.\",\n                      \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n                    }\n                  ]\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Send over a Unix domain socket (UDS).\",\n                      \"const\": \"unix\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Unix\",\n                \"docs::human_name\": \"Unix\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The type of socket to use.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"mode\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"socket\"\n      }\n    },\n    \"vector::sinks::splunk_hec::common::acknowledgements::HecClientAcknowledgementsConfig\": {\n      \"description\": \"Splunk HEC acknowledgement configuration.\",\n      \"default\": {\n        \"indexer_acknowledgements_enabled\": true,\n        \"query_interval\": 10,\n        \"retry_limit\": 30,\n        \"max_pending_acks\": 1000000\n      },\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"indexer_acknowledgements_enabled\": {\n              \"title\": \"Controls if the sink integrates with [Splunk HEC indexer acknowledgements][splunk_indexer_ack_docs] for end-to-end acknowledgements.\",\n              \"description\": \"[splunk_indexer_ack_docs]: https://docs.splunk.com/Documentation/Splunk/8.2.3/Data/AboutHECIDXAck\",\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Indexer Acknowledgements Enabled\"\n              }\n            },\n            \"max_pending_acks\": {\n              \"title\": \"The maximum number of pending acknowledgements from events sent to the Splunk HEC collector.\",\n              \"description\": \"Once reached, the sink begins applying backpressure.\",\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Max Pending Acks\"\n              }\n            },\n            \"query_interval\": {\n              \"description\": \"The amount of time to wait between queries to the Splunk HEC indexer acknowledgement endpoint.\",\n              \"type\": \"integer\",\n              \"maximum\": 255.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Query Interval\"\n              }\n            },\n            \"retry_limit\": {\n              \"description\": \"The maximum number of times an acknowledgement ID is queried for its status.\",\n              \"type\": \"integer\",\n              \"maximum\": 255.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Retry Limit\"\n              }\n            }\n          }\n        },\n        {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"enabled\": {\n              \"title\": \"Whether or not end-to-end acknowledgements are enabled.\",\n              \"description\": \"When enabled for a sink, any source connected to that sink, where the source supports\\nend-to-end acknowledgements as well, waits for events to be acknowledged by the sink\\nbefore acknowledging them at the source.\\n\\nEnabling or disabling acknowledgements at the sink level takes precedence over any global\\n[`acknowledgements`][global_acks] configuration.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\",\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Enabled\"\n              }\n            }\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::advanced\": true\n      }\n    },\n    \"vector::sinks::splunk_hec::logs::config::HecLogsSinkConfig\": {\n      \"description\": \"Configuration for the `splunk_hec_logs` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"default_token\",\n        \"encoding\",\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"description\": \"Splunk HEC acknowledgement configuration.\",\n          \"default\": {\n            \"indexer_acknowledgements_enabled\": true,\n            \"query_interval\": 10,\n            \"retry_limit\": 30,\n            \"max_pending_acks\": 1000000\n          },\n          \"$ref\": \"#/definitions/vector::sinks::splunk_hec::common::acknowledgements::HecClientAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auto_extract_timestamp\": {\n          \"title\": \"Passes the `auto_extract_timestamp` option to Splunk.\",\n          \"description\": \"This option is only relevant to Splunk v8.x and above, and is only applied when\\n`endpoint_target` is set to `event`.\\n\\nSetting this to `true` causes Splunk to extract the timestamp from the message text\\nrather than use the timestamp embedded in the event. The timestamp must be in the format\\n`yyyy-mm-dd hh:mm:ss`.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Auto Extract Timestamp\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::splunk_hec::common::util::SplunkHecDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"none\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"default_token\": {\n          \"title\": \"Default Splunk HEC token.\",\n          \"description\": \"If an event has a token set in its secrets (`splunk_hec_token`), it prevails over the one set here.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Default Token\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The base URL of the Splunk instance.\",\n          \"description\": \"The scheme (`http` or `https`) must be specified. No path should be included since the paths defined\\nby the [`Splunk`][splunk] API are used.\\n\\n[splunk]: https://docs.splunk.com/Documentation/Splunk/8.0.0/Data/HECRESTendpoints\",\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"https://http-inputs-hec.splunkcloud.com\",\n              \"https://hec.splunk.com:8088\",\n              \"http://example.com\"\n            ],\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"endpoint_target\": {\n          \"description\": \"Splunk HEC endpoint configuration.\",\n          \"default\": \"event\",\n          \"oneOf\": [\n            {\n              \"title\": \"Events are sent to the [raw endpoint][raw_endpoint_docs].\",\n              \"description\": \"When the raw endpoint is used, configured [event metadata][event_metadata_docs] is sent as\\nquery parameters on the request, except for the `timestamp` field.\\n\\n[raw_endpoint_docs]: https://docs.splunk.com/Documentation/Splunk/8.0.0/RESTREF/RESTinput#services.2Fcollector.2Fraw\\n[event_metadata_docs]: https://docs.splunk.com/Documentation/Splunk/latest/Data/FormateventsforHTTPEventCollector#Event_metadata\",\n              \"const\": \"raw\",\n              \"_metadata\": {\n                \"logical_name\": \"Raw\",\n                \"docs::human_name\": \"Raw\"\n              }\n            },\n            {\n              \"title\": \"Events are sent to the [event endpoint][event_endpoint_docs].\",\n              \"description\": \"When the event endpoint is used, configured [event metadata][event_metadata_docs] is sent\\ndirectly with each event.\\n\\n[event_endpoint_docs]: https://docs.splunk.com/Documentation/Splunk/8.0.0/RESTREF/RESTinput#services.2Fcollector.2Fevent\\n[event_metadata_docs]: https://docs.splunk.com/Documentation/Splunk/latest/Data/FormateventsforHTTPEventCollector#Event_metadata\",\n              \"const\": \"event\",\n              \"_metadata\": {\n                \"logical_name\": \"Event\",\n                \"docs::human_name\": \"Event\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Endpoint Target\"\n          }\n        },\n        \"host_key\": {\n          \"title\": \"Overrides the name of the log field used to retrieve the hostname to send to Splunk HEC.\",\n          \"description\": \"By default, the [global `log_schema.host_key` option][global_host_key] is used if log\\nevents are Legacy namespaced, or the semantic meaning of \\\"host\\\" is used, if defined.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalTargetPath>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"index\": {\n          \"title\": \"The name of the index to send events to.\",\n          \"description\": \"If not specified, the default index defined within Splunk is used.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"{{ host }}\",\n              \"custom_index\"\n            ],\n            \"docs::human_name\": \"Index\"\n          }\n        },\n        \"indexed_fields\": {\n          \"title\": \"Fields to be [added to Splunk index][splunk_field_index_docs].\",\n          \"description\": \"[splunk_field_index_docs]: https://docs.splunk.com/Documentation/Splunk/8.0.0/Data/IFXandHEC\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigValuePath\"\n          },\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::examples\": [\n              \"field1\",\n              \"field2\"\n            ],\n            \"docs::human_name\": \"Indexed Fields\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"source\": {\n          \"title\": \"The source of events sent to this sink.\",\n          \"description\": \"This is typically the filename the logs originated from.\\n\\nIf unset, the Splunk collector sets it.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::examples\": [\n              \"{{ file }}\",\n              \"/var/log/syslog\",\n              \"UDP:514\"\n            ],\n            \"docs::human_name\": \"Source\"\n          }\n        },\n        \"sourcetype\": {\n          \"title\": \"The sourcetype of events sent to this sink.\",\n          \"description\": \"If unset, Splunk defaults to `httpevent`.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::examples\": [\n              \"{{ sourcetype }}\",\n              \"_json\"\n            ],\n            \"docs::human_name\": \"Sourcetype\"\n          }\n        },\n        \"timestamp_key\": {\n          \"title\": \"Overrides the name of the log field used to retrieve the timestamp to send to Splunk HEC.\\nWhen set to `“”`, a timestamp is not set in the events sent to Splunk HEC.\",\n          \"description\": \"By default, either the [global `log_schema.timestamp_key` option][global_timestamp_key] is used\\nif log events are Legacy namespaced, or the semantic meaning of \\\"timestamp\\\" is used, if defined.\\n\\n[global_timestamp_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.timestamp_key\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalTargetPath>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::examples\": [\n              \"timestamp\",\n              \"\"\n            ],\n            \"docs::human_name\": \"Timestamp Key\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"splunk_hec_logs\"\n      }\n    },\n    \"vector::sinks::splunk_hec::metrics::config::HecMetricsSinkConfig\": {\n      \"description\": \"Configuration of the `splunk_hec_metrics` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"default_token\",\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"description\": \"Splunk HEC acknowledgement configuration.\",\n          \"default\": {\n            \"indexer_acknowledgements_enabled\": true,\n            \"query_interval\": 10,\n            \"retry_limit\": 30,\n            \"max_pending_acks\": 1000000\n          },\n          \"$ref\": \"#/definitions/vector::sinks::splunk_hec::common::acknowledgements::HecClientAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::splunk_hec::common::util::SplunkHecDefaultBatchSettings>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Compression configuration.\",\n          \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n          \"default\": \"none\",\n          \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"default_namespace\": {\n          \"title\": \"Sets the default namespace for any metrics sent.\",\n          \"description\": \"This namespace is only used if a metric has no existing namespace. When a namespace is\\npresent, it is used as a prefix to the metric name, and separated with a period (`.`).\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"service\",\n            \"docs::human_name\": \"Default Namespace\"\n          }\n        },\n        \"default_token\": {\n          \"title\": \"Default Splunk HEC token.\",\n          \"description\": \"If an event has a token set in its metadata, it prevails over the one set here.\",\n          \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"${SPLUNK_HEC_TOKEN}\",\n              \"A94A8FE5CCB19BA61C4C08\"\n            ],\n            \"docs::human_name\": \"Default Token\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The base URL of the Splunk instance.\",\n          \"description\": \"The scheme (`http` or `https`) must be specified. No path should be included since the paths defined\\nby the [`Splunk`][splunk] API are used.\\n\\n[splunk]: https://docs.splunk.com/Documentation/Splunk/8.0.0/Data/HECRESTendpoints\",\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"https://http-inputs-hec.splunkcloud.com\",\n              \"https://hec.splunk.com:8088\",\n              \"http://example.com\"\n            ],\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"host_key\": {\n          \"title\": \"Overrides the name of the log field used to retrieve the hostname to send to Splunk HEC.\",\n          \"description\": \"By default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n          \"default\": \"host\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"index\": {\n          \"title\": \"The name of the index where to send the events to.\",\n          \"description\": \"If not specified, the default index defined within Splunk is used.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"{{ host }}\",\n              \"custom_index\"\n            ],\n            \"docs::human_name\": \"Index\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"source\": {\n          \"title\": \"The source of events sent to this sink.\",\n          \"description\": \"This is typically the filename the logs originated from.\\n\\nIf unset, the Splunk collector sets it.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::examples\": [\n              \"{{ file }}\",\n              \"/var/log/syslog\",\n              \"UDP:514\"\n            ],\n            \"docs::human_name\": \"Source\"\n          }\n        },\n        \"sourcetype\": {\n          \"title\": \"The sourcetype of events sent to this sink.\",\n          \"description\": \"If unset, Splunk defaults to `httpevent`.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::examples\": [\n              \"{{ sourcetype }}\",\n              \"_json\"\n            ],\n            \"docs::human_name\": \"Sourcetype\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"splunk_hec_metrics\"\n      }\n    },\n    \"vector::sinks::statsd::config::StatsdSinkConfig\": {\n      \"description\": \"Configuration for the `statsd` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"max_bytes\": {\n                  \"title\": \"The maximum size of a batch that is processed by a sink.\",\n                  \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n                  \"default\": 1300,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Max Bytes\"\n                  }\n                },\n                \"max_events\": {\n                  \"description\": \"The maximum size of a batch before it is flushed.\",\n                  \"default\": 1000,\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"events\",\n                    \"docs::human_name\": \"Max Events\"\n                  }\n                },\n                \"timeout_secs\": {\n                  \"description\": \"The maximum age of a batch before it is flushed.\",\n                  \"default\": 1.0,\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": -9007199254740991.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"float\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"seconds\",\n                    \"docs::human_name\": \"Timeout\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"default_namespace\": {\n              \"title\": \"Sets the default namespace for any metrics sent.\",\n              \"description\": \"This namespace is only used if a metric has no existing namespace. When a namespace is\\npresent, it is used as a prefix to the metric name, and separated with a period (`.`).\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"service\",\n                \"docs::human_name\": \"Default Namespace\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Socket mode.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Send over TCP.\",\n              \"allOf\": [\n                {\n                  \"description\": \"TCP configuration.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"address\"\n                  ],\n                  \"properties\": {\n                    \"address\": {\n                      \"title\": \"The address to connect to.\",\n                      \"description\": \"Both IP addresses and hostnames/fully qualified domain names (FQDNs) are accepted formats.\\n\\nThe address _must_ include a port.\",\n                      \"$ref\": \"#/definitions/vector::sinks::util::service::net::HostAndPort\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Address\"\n                      }\n                    },\n                    \"keepalive\": {\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Keepalive\"\n                      }\n                    },\n                    \"send_buffer_size\": {\n                      \"title\": \"The size of the socket's send buffer.\",\n                      \"description\": \"If set, the value of the setting is passed via the `SO_SNDBUF` option.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::examples\": 65536,\n                        \"docs::human_name\": \"Send Buffer Size\"\n                      }\n                    },\n                    \"tls\": {\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"TLS\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Send over TCP.\",\n                      \"const\": \"tcp\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Tcp\",\n                \"docs::human_name\": \"TCP\"\n              }\n            },\n            {\n              \"description\": \"Send over UDP.\",\n              \"allOf\": [\n                {\n                  \"description\": \"UDP configuration.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"address\"\n                  ],\n                  \"properties\": {\n                    \"address\": {\n                      \"title\": \"The address to connect to.\",\n                      \"description\": \"Both IP addresses and hostnames/fully qualified domain names (FQDNs) are accepted formats.\\n\\nThe address _must_ include a port.\",\n                      \"$ref\": \"#/definitions/vector::sinks::util::service::net::HostAndPort\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Address\"\n                      }\n                    },\n                    \"send_buffer_size\": {\n                      \"title\": \"The size of the socket's send buffer.\",\n                      \"description\": \"If set, the value of the setting is passed via the `SO_SNDBUF` option.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::examples\": 65536,\n                        \"docs::human_name\": \"Send Buffer Size\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Send over UDP.\",\n                      \"const\": \"udp\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Udp\",\n                \"docs::human_name\": \"UDP\"\n              }\n            },\n            {\n              \"description\": \"Send over a Unix domain socket (UDS).\",\n              \"allOf\": [\n                {\n                  \"description\": \"Unix Domain Socket configuration.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"path\"\n                  ],\n                  \"properties\": {\n                    \"path\": {\n                      \"title\": \"The Unix socket path.\",\n                      \"description\": \"This should be an absolute path.\",\n                      \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                      \"_metadata\": {\n                        \"docs::examples\": \"/path/to/socket\",\n                        \"docs::human_name\": \"Path\"\n                      }\n                    },\n                    \"send_buffer_size\": {\n                      \"title\": \"The size of the socket's send buffer.\",\n                      \"description\": \"If set, the value of the setting is passed via the `SO_SNDBUF` option.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::examples\": 65536,\n                        \"docs::human_name\": \"Send Buffer Size\"\n                      }\n                    },\n                    \"unix_mode\": {\n                      \"description\": \"The Unix socket mode to use.\",\n                      \"default\": \"Stream\",\n                      \"oneOf\": [\n                        {\n                          \"description\": \"Datagram-oriented (`SOCK_DGRAM`).\",\n                          \"const\": \"Datagram\",\n                          \"_metadata\": {\n                            \"logical_name\": \"Datagram\",\n                            \"docs::human_name\": \"Datagram\"\n                          }\n                        },\n                        {\n                          \"description\": \"Stream-oriented (`SOCK_STREAM`).\",\n                          \"const\": \"Stream\",\n                          \"_metadata\": {\n                            \"logical_name\": \"Stream\",\n                            \"docs::human_name\": \"Stream\"\n                          }\n                        }\n                      ],\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::enum_tagging\": \"external\",\n                        \"docs::human_name\": \"Unix Mode\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Send over a Unix domain socket (UDS).\",\n                      \"const\": \"unix\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Unix\",\n                \"docs::human_name\": \"Unix\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The type of socket to use.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"mode\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"statsd\"\n      }\n    },\n    \"vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\": {\n      \"title\": \"Configuration of adaptive concurrency parameters.\",\n      \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"decrease_ratio\": {\n          \"title\": \"The fraction of the current value to set the new concurrency limit when decreasing the limit.\",\n          \"description\": \"Valid values are greater than `0` and less than `1`. Smaller values cause the algorithm to scale back rapidly\\nwhen latency increases.\\n\\nNote that the new limit is rounded down after applying this ratio.\",\n          \"default\": 0.9,\n          \"type\": \"number\",\n          \"maximum\": 1.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::human_name\": \"Decrease Ratio\"\n          }\n        },\n        \"ewma_alpha\": {\n          \"title\": \"The weighting of new measurements compared to older measurements.\",\n          \"description\": \"Valid values are greater than `0` and less than `1`.\\n\\nARC uses an exponentially weighted moving average (EWMA) of past RTT measurements as a reference to compare with\\nthe current RTT. Smaller values cause this reference to adjust more slowly, which may be useful if a service has\\nunusually high response variability.\",\n          \"default\": 0.4,\n          \"type\": \"number\",\n          \"maximum\": 1.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::human_name\": \"EWMA Alpha\"\n          }\n        },\n        \"initial_concurrency\": {\n          \"title\": \"The initial concurrency limit to use. If not specified, the initial limit will be 1 (no concurrency).\",\n          \"description\": \"It is recommended to set this value to your service's average limit if you're seeing that it takes a\\nlong time to ramp up adaptive concurrency after a restart. You can find this value by looking at the\\n`adaptive_concurrency_limit` metric.\",\n          \"default\": 1,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 1.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Initial Concurrency\"\n          }\n        },\n        \"max_concurrency_limit\": {\n          \"title\": \"The maximum concurrency limit.\",\n          \"description\": \"The adaptive request concurrency limit will not go above this bound. This is put in place as a safeguard.\",\n          \"default\": 200,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 1.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Max Concurrency Limit\"\n          }\n        },\n        \"rtt_deviation_scale\": {\n          \"title\": \"Scale of RTT deviations which are not considered anomalous.\",\n          \"description\": \"Valid values are greater than or equal to `0`, and we expect reasonable values to range from `1.0` to `3.0`.\\n\\nWhen calculating the past RTT average, we also compute a secondary “deviation” value that indicates how variable\\nthose values are. We use that deviation when comparing the past RTT average to the current measurements, so we\\ncan ignore increases in RTT that are within an expected range. This factor is used to scale up the deviation to\\nan appropriate range.  Larger values cause the algorithm to ignore larger increases in the RTT.\",\n          \"default\": 2.5,\n          \"type\": \"number\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::human_name\": \"RTT Deviation Scale\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"vector::sinks::util::batch::BatchConfig<vector::sinks::splunk_hec::common::util::SplunkHecDefaultBatchSettings>\": {\n      \"description\": \"Event batching behavior.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"max_bytes\": {\n          \"title\": \"The maximum size of a batch that is processed by a sink.\",\n          \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n          \"default\": 1000000,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Bytes\"\n          }\n        },\n        \"max_events\": {\n          \"description\": \"The maximum size of a batch before it is flushed.\",\n          \"default\": null,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"events\",\n            \"docs::human_name\": \"Max Events\"\n          }\n        },\n        \"timeout_secs\": {\n          \"description\": \"The maximum age of a batch before it is flushed.\",\n          \"default\": 1.0,\n          \"type\": [\n            \"number\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": -9007199254740991.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Timeout\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::advanced\": true\n      }\n    },\n    \"vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::BulkSizeBasedDefaultBatchSettings>\": {\n      \"description\": \"Event batching behavior.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"max_bytes\": {\n          \"title\": \"The maximum size of a batch that is processed by a sink.\",\n          \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n          \"default\": 10000000,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Bytes\"\n          }\n        },\n        \"max_events\": {\n          \"description\": \"The maximum size of a batch before it is flushed.\",\n          \"default\": null,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"events\",\n            \"docs::human_name\": \"Max Events\"\n          }\n        },\n        \"timeout_secs\": {\n          \"description\": \"The maximum age of a batch before it is flushed.\",\n          \"default\": 300.0,\n          \"type\": [\n            \"number\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": -9007199254740991.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Timeout\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::advanced\": true\n      }\n    },\n    \"vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::RealtimeSizeBasedDefaultBatchSettings>\": {\n      \"description\": \"Event batching behavior.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"max_bytes\": {\n          \"title\": \"The maximum size of a batch that is processed by a sink.\",\n          \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n          \"default\": 10000000,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Bytes\"\n          }\n        },\n        \"max_events\": {\n          \"description\": \"The maximum size of a batch before it is flushed.\",\n          \"default\": null,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"events\",\n            \"docs::human_name\": \"Max Events\"\n          }\n        },\n        \"timeout_secs\": {\n          \"description\": \"The maximum age of a batch before it is flushed.\",\n          \"default\": 1.0,\n          \"type\": [\n            \"number\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": -9007199254740991.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"float\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Timeout\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::advanced\": true\n      }\n    },\n    \"vector::sinks::util::buffer::compression::Compression\": {\n      \"title\": \"Compression configuration.\",\n      \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Compression algorithm.\",\n          \"oneOf\": [\n            {\n              \"description\": \"No compression.\",\n              \"const\": \"none\",\n              \"_metadata\": {\n                \"logical_name\": \"None\",\n                \"docs::human_name\": \"None\"\n              }\n            },\n            {\n              \"title\": \"[Gzip][gzip] compression.\",\n              \"description\": \"[gzip]: https://www.gzip.org/\",\n              \"const\": \"gzip\",\n              \"_metadata\": {\n                \"logical_name\": \"Gzip\",\n                \"docs::human_name\": \"Gzip\"\n              }\n            },\n            {\n              \"title\": \"[Zlib][zlib] compression.\",\n              \"description\": \"[zlib]: https://zlib.net/\",\n              \"const\": \"zlib\",\n              \"_metadata\": {\n                \"logical_name\": \"Zlib\",\n                \"docs::human_name\": \"Zlib\"\n              }\n            },\n            {\n              \"title\": \"[Zstandard][zstd] compression.\",\n              \"description\": \"[zstd]: https://facebook.github.io/zstd/\",\n              \"const\": \"zstd\",\n              \"_metadata\": {\n                \"logical_name\": \"Zstd\",\n                \"docs::human_name\": \"Zstd\"\n              }\n            },\n            {\n              \"title\": \"[Snappy][snappy] compression.\",\n              \"description\": \"[snappy]: https://github.com/google/snappy/blob/main/docs/README.md\",\n              \"const\": \"snappy\",\n              \"_metadata\": {\n                \"logical_name\": \"Snappy\",\n                \"docs::human_name\": \"Snappy\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\"\n          }\n        },\n        {\n          \"description\": \"Compression algorithm and compression level.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"algorithm\"\n          ],\n          \"properties\": {\n            \"algorithm\": {\n              \"description\": \"Compression algorithm.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"No compression.\",\n                  \"const\": \"none\",\n                  \"_metadata\": {\n                    \"logical_name\": \"None\",\n                    \"docs::human_name\": \"None\"\n                  }\n                },\n                {\n                  \"title\": \"[Gzip][gzip] compression.\",\n                  \"description\": \"[gzip]: https://www.gzip.org/\",\n                  \"const\": \"gzip\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Gzip\",\n                    \"docs::human_name\": \"Gzip\"\n                  }\n                },\n                {\n                  \"title\": \"[Zlib][zlib] compression.\",\n                  \"description\": \"[zlib]: https://zlib.net/\",\n                  \"const\": \"zlib\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Zlib\",\n                    \"docs::human_name\": \"Zlib\"\n                  }\n                },\n                {\n                  \"title\": \"[Zstandard][zstd] compression.\",\n                  \"description\": \"[zstd]: https://facebook.github.io/zstd/\",\n                  \"const\": \"zstd\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Zstd\",\n                    \"docs::human_name\": \"Zstd\"\n                  }\n                },\n                {\n                  \"title\": \"[Snappy][snappy] compression.\",\n                  \"description\": \"[snappy]: https://github.com/google/snappy/blob/main/docs/README.md\",\n                  \"const\": \"snappy\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Snappy\",\n                    \"docs::human_name\": \"Snappy\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Algorithm\"\n              }\n            },\n            \"level\": {\n              \"description\": \"Compression level.\",\n              \"enum\": [\n                \"none\",\n                \"fast\",\n                \"best\",\n                \"default\",\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16,\n                17,\n                18,\n                19,\n                20,\n                21\n              ],\n              \"_metadata\": {\n                \"docs::human_name\": \"Level\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"docs::hidden\": true\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"external\",\n        \"docs::advanced\": true\n      }\n    },\n    \"vector::sinks::util::http::RequestConfig\": {\n      \"description\": \"Outbound HTTP request settings.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"headers\": {\n              \"description\": \"Additional HTTP headers to add to every HTTP request.\",\n              \"default\": {},\n              \"type\": \"object\",\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::additional_props_description\": \"An HTTP request header and it's value.\",\n                \"docs::examples\": {\n                  \"Accept\": \"text/plain\",\n                  \"X-My-Custom-Header\": \"A-Value\"\n                },\n                \"docs::human_name\": \"Headers\"\n              }\n            }\n          }\n        },\n        {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"adaptive_concurrency\": {\n              \"title\": \"Configuration of adaptive concurrency parameters.\",\n              \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n              \"default\": {\n                \"initial_concurrency\": 1,\n                \"decrease_ratio\": 0.9,\n                \"ewma_alpha\": 0.4,\n                \"rtt_deviation_scale\": 2.5,\n                \"max_concurrency_limit\": 200\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Adaptive Concurrency\"\n              }\n            },\n            \"concurrency\": {\n              \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n              \"default\": \"adaptive\",\n              \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Concurrency\"\n              }\n            },\n            \"rate_limit_duration_secs\": {\n              \"description\": \"The time window used for the `rate_limit_num` option.\",\n              \"default\": 1,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Rate Limit Duration\"\n              }\n            },\n            \"rate_limit_num\": {\n              \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n              \"default\": 9223372036854775807,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"requests\",\n                \"docs::human_name\": \"Rate Limit Number\"\n              }\n            },\n            \"retry_attempts\": {\n              \"description\": \"The maximum number of retries to make for failed requests.\",\n              \"default\": 9223372036854775807,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"retries\",\n                \"docs::human_name\": \"Retry Attempts\"\n              }\n            },\n            \"retry_initial_backoff_secs\": {\n              \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n              \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n              \"default\": 1,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Retry Initial Backoff\"\n              }\n            },\n            \"retry_jitter_mode\": {\n              \"description\": \"The jitter mode to use for retry backoff behavior.\",\n              \"default\": \"Full\",\n              \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Retry Jitter Mode\"\n              }\n            },\n            \"retry_max_duration_secs\": {\n              \"description\": \"The maximum amount of time to wait between retries.\",\n              \"default\": 30,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Max Retry Duration\"\n              }\n            },\n            \"timeout_secs\": {\n              \"title\": \"The time a request can take before being aborted.\",\n              \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n              \"default\": 60,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"_metadata\": {\n            \"docs::advanced\": true\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false\n    },\n    \"vector::sinks::util::retries::JitterMode\": {\n      \"description\": \"The jitter mode to use for retry backoff behavior.\",\n      \"oneOf\": [\n        {\n          \"description\": \"No jitter.\",\n          \"const\": \"None\",\n          \"_metadata\": {\n            \"logical_name\": \"None\",\n            \"docs::human_name\": \"None\"\n          }\n        },\n        {\n          \"title\": \"Full jitter.\",\n          \"description\": \"The random delay is anywhere from 0 up to the maximum current delay calculated by the backoff\\nstrategy.\\n\\nIncorporating full jitter into your backoff strategy can greatly reduce the likelihood\\nof creating accidental denial of service (DoS) conditions against your own systems when\\nmany clients are recovering from a failure state.\",\n          \"const\": \"Full\",\n          \"_metadata\": {\n            \"logical_name\": \"Full\",\n            \"docs::human_name\": \"Full\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"external\"\n      }\n    },\n    \"vector::sinks::util::service::TowerRequestConfig\": {\n      \"title\": \"Middleware settings for outbound requests.\",\n      \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"adaptive_concurrency\": {\n          \"title\": \"Configuration of adaptive concurrency parameters.\",\n          \"description\": \"These parameters typically do not require changes from the default, and incorrect values can lead to meta-stable or\\nunstable performance and sink behavior. Proceed with caution.\",\n          \"default\": {\n            \"initial_concurrency\": 1,\n            \"decrease_ratio\": 0.9,\n            \"ewma_alpha\": 0.4,\n            \"rtt_deviation_scale\": 2.5,\n            \"max_concurrency_limit\": 200\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::adaptive_concurrency::AdaptiveConcurrencySettings\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Adaptive Concurrency\"\n          }\n        },\n        \"concurrency\": {\n          \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n          \"default\": \"adaptive\",\n          \"$ref\": \"#/definitions/vector::sinks::util::service::concurrency::Concurrency\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Concurrency\"\n          }\n        },\n        \"rate_limit_duration_secs\": {\n          \"description\": \"The time window used for the `rate_limit_num` option.\",\n          \"default\": 1,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Rate Limit Duration\"\n          }\n        },\n        \"rate_limit_num\": {\n          \"description\": \"The maximum number of requests allowed within the `rate_limit_duration_secs` time window.\",\n          \"default\": 9223372036854775807,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"requests\",\n            \"docs::human_name\": \"Rate Limit Number\"\n          }\n        },\n        \"retry_attempts\": {\n          \"description\": \"The maximum number of retries to make for failed requests.\",\n          \"default\": 9223372036854775807,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"retries\",\n            \"docs::human_name\": \"Retry Attempts\"\n          }\n        },\n        \"retry_initial_backoff_secs\": {\n          \"title\": \"The amount of time to wait before attempting the first retry for a failed request.\",\n          \"description\": \"After the first retry has failed, the fibonacci sequence is used to select future backoffs.\",\n          \"default\": 1,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Retry Initial Backoff\"\n          }\n        },\n        \"retry_jitter_mode\": {\n          \"description\": \"The jitter mode to use for retry backoff behavior.\",\n          \"default\": \"Full\",\n          \"$ref\": \"#/definitions/vector::sinks::util::retries::JitterMode\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Retry Jitter Mode\"\n          }\n        },\n        \"retry_max_duration_secs\": {\n          \"description\": \"The maximum amount of time to wait between retries.\",\n          \"default\": 30,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Max Retry Duration\"\n          }\n        },\n        \"timeout_secs\": {\n          \"title\": \"The time a request can take before being aborted.\",\n          \"description\": \"Datadog highly recommends that you do not lower this value below the service's internal timeout, as this could\\ncreate orphaned requests, pile on retries, and result in duplicate data downstream.\",\n          \"default\": 60,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Timeout\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::advanced\": true\n      }\n    },\n    \"vector::sinks::util::service::concurrency::Concurrency\": {\n      \"description\": \"Configuration for outbound request concurrency.\\n\\nThis can be set either to one of the below enum values or to a positive integer, which denotes\\na fixed concurrency limit.\",\n      \"oneOf\": [\n        {\n          \"title\": \"A fixed concurrency of 1.\",\n          \"description\": \"Only one request can be outstanding at any given time.\",\n          \"const\": \"none\",\n          \"_metadata\": {\n            \"logical_name\": \"None\",\n            \"docs::human_name\": \"None\"\n          }\n        },\n        {\n          \"title\": \"Concurrency will be managed by Vector's [Adaptive Request Concurrency][arc] feature.\",\n          \"description\": \"[arc]: https://vector.dev/docs/about/under-the-hood/networking/arc/\",\n          \"const\": \"adaptive\",\n          \"_metadata\": {\n            \"logical_name\": \"Adaptive\",\n            \"docs::human_name\": \"Adaptive\"\n          }\n        },\n        {\n          \"description\": \"A fixed amount of concurrency will be allowed.\",\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"logical_name\": \"Fixed\",\n            \"docs::human_name\": \"Fixed\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"external\"\n      }\n    },\n    \"vector::sinks::util::service::net::HostAndPort\": {\n      \"title\": \"The address to connect to.\",\n      \"description\": \"Both IP addresses and hostnames/fully qualified domain names (FQDNs) are accepted formats.\\n\\nThe address _must_ include a port.\",\n      \"type\": \"string\",\n      \"_metadata\": {\n        \"docs::examples\": [\n          \"92.12.333.224:5000\",\n          \"somehost:5000\"\n        ]\n      }\n    },\n    \"vector::sinks::util::uri::UriSerde\": {\n      \"title\": \"The URI component of a request.\",\n      \"description\": \"\",\n      \"type\": \"string\"\n    },\n    \"vector::sinks::vector::config::VectorConfig\": {\n      \"description\": \"Configuration for the `vector` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The downstream Vector address to which to connect.\",\n          \"description\": \"Both IP address and hostname are accepted formats.\\n\\nThe address _must_ include a port.\",\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"92.12.333.224:6000\",\n              \"https://somehost:6000\"\n            ],\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"batch\": {\n          \"description\": \"Event batching behavior.\",\n          \"default\": {\n            \"max_bytes\": null,\n            \"max_events\": null,\n            \"timeout_secs\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"max_bytes\": {\n              \"title\": \"The maximum size of a batch that is processed by a sink.\",\n              \"description\": \"This is based on the uncompressed size of the batched events, before they are\\nserialized/compressed.\",\n              \"default\": null,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Bytes\"\n              }\n            },\n            \"max_events\": {\n              \"description\": \"The maximum size of a batch before it is flushed.\",\n              \"default\": 1000,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"events\",\n                \"docs::human_name\": \"Max Events\"\n              }\n            },\n            \"timeout_secs\": {\n              \"description\": \"The maximum age of a batch before it is flushed.\",\n              \"default\": 1.0,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Timeout\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Batch\"\n          }\n        },\n        \"compression\": {\n          \"title\": \"Whether or not to compress requests.\",\n          \"description\": \"If set to `true`, requests are compressed with [`gzip`][gzip_docs].\\n\\n[gzip_docs]: https://www.gzip.org/\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Compression\"\n          }\n        },\n        \"request\": {\n          \"title\": \"Middleware settings for outbound requests.\",\n          \"description\": \"Various settings can be configured, such as concurrency and rate limits, timeouts, retry behavior, etc.\\n\\nNote that the retry backoff policy follows the Fibonacci sequence.\",\n          \"default\": {\n            \"timeout_secs\": 60,\n            \"rate_limit_duration_secs\": 1,\n            \"rate_limit_num\": 9223372036854775807,\n            \"retry_attempts\": 9223372036854775807,\n            \"retry_max_duration_secs\": 30,\n            \"retry_initial_backoff_secs\": 1,\n            \"retry_jitter_mode\": \"Full\",\n            \"adaptive_concurrency\": {\n              \"initial_concurrency\": 1,\n              \"decrease_ratio\": 0.9,\n              \"ewma_alpha\": 0.4,\n              \"rtt_deviation_scale\": 2.5,\n              \"max_concurrency_limit\": 200\n            }\n          },\n          \"$ref\": \"#/definitions/vector::sinks::util::service::TowerRequestConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Request\"\n          }\n        },\n        \"tls\": {\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"version\": {\n          \"description\": \"Version of the configuration.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Marker type for the version two of the configuration for the `vector` sink.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Marker value for version two.\",\n                  \"const\": \"2\",\n                  \"_metadata\": {\n                    \"logical_name\": \"V2\",\n                    \"docs::human_name\": \"V2\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::hidden\": true,\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Version\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"vector\"\n      }\n    },\n    \"vector::sinks::webhdfs::config::WebHdfsConfig\": {\n      \"description\": \"Configuration for the `webhdfs` sink.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled for this sink.\",\n              \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Event batching behavior.\",\n              \"default\": {\n                \"max_bytes\": null,\n                \"max_events\": null,\n                \"timeout_secs\": null\n              },\n              \"$ref\": \"#/definitions/vector::sinks::util::batch::BatchConfig<vector::sinks::util::batch::BulkSizeBasedDefaultBatchSettings>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Batch\"\n              }\n            },\n            \"compression\": {\n              \"title\": \"Compression configuration.\",\n              \"description\": \"All compression algorithms use the default compression level unless otherwise specified.\",\n              \"default\": \"gzip\",\n              \"$ref\": \"#/definitions/vector::sinks::util::buffer::compression::Compression\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"endpoint\": {\n              \"title\": \"An HDFS cluster consists of a single NameNode, a master server that manages the file system namespace and regulates access to files by clients.\",\n              \"description\": \"The endpoint is the HDFS's web restful HTTP API endpoint.\\n\\nFor more information, see the [HDFS Architecture][hdfs_arch] documentation.\\n\\n[hdfs_arch]: https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#NameNode_and_DataNodes\",\n              \"default\": \"\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"http://127.0.0.1:9870\",\n                \"docs::human_name\": \"Endpoint\"\n              }\n            },\n            \"prefix\": {\n              \"title\": \"A prefix to apply to all keys.\",\n              \"description\": \"Prefixes are useful for partitioning objects, such as by creating a blob key that\\nstores blobs under a particular directory. If using a prefix for this purpose, it must end\\nin `/` to act as a directory path. A trailing `/` is **not** automatically added.\\n\\nThe final file path is in the format of `{root}/{prefix}{suffix}`.\",\n              \"default\": \"\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::templateable\": true,\n                \"docs::human_name\": \"Prefix\"\n              }\n            },\n            \"root\": {\n              \"title\": \"The root path for WebHDFS.\",\n              \"description\": \"Must be a valid directory.\\n\\nThe final file path is in the format of `{root}/{prefix}{suffix}`.\",\n              \"default\": \"\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Root\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Encoding configuration.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfigWithFraming\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"webhdfs\"\n      }\n    },\n    \"vector::sinks::websocket::config::WebSocketSinkConfig\": {\n      \"description\": \"Configuration for the `websocket` sink.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"encoding\",\n        \"uri\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled for this sink.\",\n          \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::AcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Configures how events are encoded into raw bytes.\",\n          \"$ref\": \"#/definitions/vector::codecs::encoding::config::EncodingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"ping_interval\": {\n          \"title\": \"The interval, in seconds, between sending [Ping][ping]s to the remote peer.\",\n          \"description\": \"If this option is not configured, pings are not sent on an interval.\\n\\nIf the `ping_timeout` is not set, pings are still sent but there is no expectation of pong\\nresponse times.\\n\\n[ping]: https://www.rfc-editor.org/rfc/rfc6455#section-5.5.2\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 1.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Ping Interval\"\n          }\n        },\n        \"ping_timeout\": {\n          \"title\": \"The number of seconds to wait for a [Pong][pong] response from the remote peer.\",\n          \"description\": \"If a response is not received within this time, the connection is re-established.\\n\\n[pong]: https://www.rfc-editor.org/rfc/rfc6455#section-5.5.3\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 1.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Ping Timeout\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"uri\": {\n          \"title\": \"The WebSocket URI to connect to.\",\n          \"description\": \"This should include the protocol and host, but can also include the port, path, and any other valid part of a URI.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"URI\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"sink\",\n        \"docs::component_name\": \"websocket\"\n      }\n    },\n    \"vector::sources::Sources\": {\n      \"description\": \"Configurable sources in Vector.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Collect events from AMQP 0.9.1 compatible brokers like RabbitMQ.\",\n          \"allOf\": [\n            {\n              \"title\": \"Configuration for the `amqp` source.\",\n              \"description\": \"Supports AMQP version 0.9.1\",\n              \"$ref\": \"#/definitions/vector::sources::amqp::AmqpSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect events from AMQP 0.9.1 compatible brokers like RabbitMQ.\",\n                  \"const\": \"amqp\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AMQP\",\n            \"logical_name\": \"AmqpSource\"\n          }\n        },\n        {\n          \"description\": \"Collect metrics from Apache's HTTPD server.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `apache_metrics` source.\",\n              \"$ref\": \"#/definitions/vector::sources::apache_metrics::ApacheMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect metrics from Apache's HTTPD server.\",\n                  \"const\": \"apache_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Apache Metrics\",\n            \"logical_name\": \"ApacheMetrics\"\n          }\n        },\n        {\n          \"description\": \"Collect Docker container stats for tasks running in AWS ECS and AWS Fargate.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_ecs_metrics` source.\",\n              \"$ref\": \"#/definitions/vector::sources::aws_ecs_metrics::AwsEcsMetricsSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect Docker container stats for tasks running in AWS ECS and AWS Fargate.\",\n                  \"const\": \"aws_ecs_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS ECS Metrics\",\n            \"logical_name\": \"AwsEcsMetricsSource\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from AWS Kinesis Firehose.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_kinesis_firehose` source.\",\n              \"$ref\": \"#/definitions/vector::sources::aws_kinesis_firehose::AwsKinesisFirehoseConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from AWS Kinesis Firehose.\",\n                  \"const\": \"aws_kinesis_firehose\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS Kinesis Firehose\",\n            \"logical_name\": \"AwsKinesisFirehose\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from AWS S3.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_s3` source.\",\n              \"$ref\": \"#/definitions/vector::sources::aws_s3::AwsS3Config\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from AWS S3.\",\n                  \"const\": \"aws_s3\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS S3\",\n            \"logical_name\": \"AwsS3\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from AWS SQS.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_sqs` source.\",\n              \"$ref\": \"#/definitions/vector::sources::aws_sqs::config::AwsSqsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from AWS SQS.\",\n                  \"const\": \"aws_sqs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS SQS\",\n            \"logical_name\": \"AwsSqs\"\n          }\n        },\n        {\n          \"description\": \"Receive logs, metrics, and traces collected by a Datadog Agent.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `datadog_agent` source.\",\n              \"$ref\": \"#/definitions/vector::sources::datadog_agent::DatadogAgentConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Receive logs, metrics, and traces collected by a Datadog Agent.\",\n                  \"const\": \"datadog_agent\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Datadog Agent\",\n            \"logical_name\": \"DatadogAgent\"\n          }\n        },\n        {\n          \"description\": \"Generate fake log events, which can be useful for testing and demos.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `demo_logs` source.\",\n              \"$ref\": \"#/definitions/vector::sources::demo_logs::DemoLogsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Generate fake log events, which can be useful for testing and demos.\",\n                  \"const\": \"demo_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Demo Logs\",\n            \"logical_name\": \"DemoLogs\"\n          }\n        },\n        {\n          \"description\": \"Collect DNS logs from a dnstap-compatible server.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `dnstap` source.\",\n              \"$ref\": \"#/definitions/vector::sources::dnstap::DnstapConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect DNS logs from a dnstap-compatible server.\",\n                  \"const\": \"dnstap\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Dnstap\",\n            \"logical_name\": \"Dnstap\"\n          }\n        },\n        {\n          \"description\": \"Collect container logs from a Docker Daemon.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `docker_logs` source.\",\n              \"$ref\": \"#/definitions/vector::sources::docker_logs::DockerLogsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect container logs from a Docker Daemon.\",\n                  \"const\": \"docker_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Docker Logs\",\n            \"logical_name\": \"DockerLogs\"\n          }\n        },\n        {\n          \"description\": \"Receive metrics from collected by a EventStoreDB.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `eventstoredb_metrics` source.\",\n              \"$ref\": \"#/definitions/vector::sources::eventstoredb_metrics::EventStoreDbConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Receive metrics from collected by a EventStoreDB.\",\n                  \"const\": \"eventstoredb_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"EventStoreDB Metrics\",\n            \"logical_name\": \"EventStoreDb\"\n          }\n        },\n        {\n          \"description\": \"Collect output from a process running on the host.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `exec` source.\",\n              \"$ref\": \"#/definitions/vector::sources::exec::ExecConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect output from a process running on the host.\",\n                  \"const\": \"exec\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Exec\",\n            \"logical_name\": \"Exec\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from files.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `file` source.\",\n              \"$ref\": \"#/definitions/vector::sources::file::FileConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from files.\",\n                  \"const\": \"file\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"File\",\n            \"logical_name\": \"File\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from a file descriptor.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `file_descriptor` source.\",\n              \"$ref\": \"#/definitions/vector::sources::file_descriptors::file_descriptor::FileDescriptorSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from a file descriptor.\",\n                  \"const\": \"file_descriptor\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"File Descriptor\",\n            \"logical_name\": \"FileDescriptorSource\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from a Fluentd or Fluent Bit agent.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `fluent` source.\",\n              \"$ref\": \"#/definitions/vector::sources::fluent::FluentConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from a Fluentd or Fluent Bit agent.\",\n                  \"const\": \"fluent\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Fluent\",\n            \"logical_name\": \"Fluent\"\n          }\n        },\n        {\n          \"description\": \"Fetch observability events from GCP's Pub/Sub messaging system.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `gcp_pubsub` source.\",\n              \"$ref\": \"#/definitions/vector::sources::gcp_pubsub::PubsubConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Fetch observability events from GCP's Pub/Sub messaging system.\",\n                  \"const\": \"gcp_pubsub\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"GCP Pub/Sub\",\n            \"logical_name\": \"Pubsub\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from Heroku's Logplex, the router responsible for receiving logs from your Heroku apps.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for `heroku_logs` source.\",\n              \"$ref\": \"#/definitions/vector::sources::heroku_logs::LogplexConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from Heroku's Logplex, the router responsible for receiving logs from your Heroku apps.\",\n                  \"const\": \"heroku_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Heroku Logs\",\n            \"logical_name\": \"Logplex\"\n          }\n        },\n        {\n          \"description\": \"Collect metric data from the local system.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `host_metrics` source.\",\n              \"$ref\": \"#/definitions/vector::sources::host_metrics::HostMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect metric data from the local system.\",\n                  \"const\": \"host_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Host Metrics\",\n            \"logical_name\": \"HostMetrics\"\n          }\n        },\n        {\n          \"description\": \"Host an HTTP endpoint to receive logs.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `http` source.\",\n              \"$ref\": \"#/definitions/vector::sources::http_server::HttpConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Host an HTTP endpoint to receive logs.\",\n                  \"const\": \"http\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"HTTP\",\n            \"logical_name\": \"Http\"\n          }\n        },\n        {\n          \"description\": \"Pull observability data from an HTTP server at a configured interval.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `http_client` source.\",\n              \"$ref\": \"#/definitions/vector::sources::http_client::client::HttpClientConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Pull observability data from an HTTP server at a configured interval.\",\n                  \"const\": \"http_client\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"HTTP Client\",\n            \"logical_name\": \"HttpClient\"\n          }\n        },\n        {\n          \"description\": \"Host an HTTP endpoint to receive logs.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `http_server` source.\",\n              \"$ref\": \"#/definitions/vector::sources::http_server::SimpleHttpConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Host an HTTP endpoint to receive logs.\",\n                  \"const\": \"http_server\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"HTTP Server\",\n            \"logical_name\": \"SimpleHttp\"\n          }\n        },\n        {\n          \"description\": \"Expose internal log messages emitted by the running Vector instance.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `internal_logs` source.\",\n              \"$ref\": \"#/definitions/vector::sources::internal_logs::InternalLogsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Expose internal log messages emitted by the running Vector instance.\",\n                  \"const\": \"internal_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Internal Logs\",\n            \"logical_name\": \"InternalLogs\"\n          }\n        },\n        {\n          \"description\": \"Expose internal metrics emitted by the running Vector instance.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `internal_metrics` source.\",\n              \"$ref\": \"#/definitions/vector::sources::internal_metrics::InternalMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Expose internal metrics emitted by the running Vector instance.\",\n                  \"const\": \"internal_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Internal Metrics\",\n            \"logical_name\": \"InternalMetrics\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from JournalD.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `journald` source.\",\n              \"$ref\": \"#/definitions/vector::sources::journald::JournaldConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from JournalD.\",\n                  \"const\": \"journald\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"JournalD\",\n            \"logical_name\": \"Journald\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from Apache Kafka.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `kafka` source.\",\n              \"$ref\": \"#/definitions/vector::sources::kafka::KafkaSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from Apache Kafka.\",\n                  \"const\": \"kafka\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Kafka\",\n            \"logical_name\": \"KafkaSource\"\n          }\n        },\n        {\n          \"description\": \"Collect Pod logs from Kubernetes Nodes.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `kubernetes_logs` source.\",\n              \"$ref\": \"#/definitions/vector::sources::kubernetes_logs::Config\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect Pod logs from Kubernetes Nodes.\",\n                  \"const\": \"kubernetes_logs\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Kubernetes Logs\",\n            \"logical_name\": \"\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from a Logstash agent.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `logstash` source.\",\n              \"$ref\": \"#/definitions/vector::sources::logstash::LogstashConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from a Logstash agent.\",\n                  \"const\": \"logstash\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Logstash\",\n            \"logical_name\": \"Logstash\"\n          }\n        },\n        {\n          \"description\": \"Collect metrics from the MongoDB database.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `mongodb_metrics` source.\",\n              \"$ref\": \"#/definitions/vector::sources::mongodb_metrics::MongoDbMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect metrics from the MongoDB database.\",\n                  \"const\": \"mongodb_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"MongoDB Metrics\",\n            \"logical_name\": \"MongoDbMetrics\"\n          }\n        },\n        {\n          \"description\": \"Read observability data from subjects on the NATS messaging system.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `nats` source.\",\n              \"$ref\": \"#/definitions/vector::sources::nats::NatsSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Read observability data from subjects on the NATS messaging system.\",\n                  \"const\": \"nats\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"NATS\",\n            \"logical_name\": \"NatsSource\"\n          }\n        },\n        {\n          \"description\": \"Collect metrics from NGINX.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `nginx_metrics` source.\",\n              \"$ref\": \"#/definitions/vector::sources::nginx_metrics::NginxMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect metrics from NGINX.\",\n                  \"const\": \"nginx_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"NGINX Metrics\",\n            \"logical_name\": \"NginxMetrics\"\n          }\n        },\n        {\n          \"description\": \"Receive OTLP data through gRPC or HTTP.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `opentelemetry` source.\",\n              \"$ref\": \"#/definitions/vector::sources::opentelemetry::OpentelemetryConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Receive OTLP data through gRPC or HTTP.\",\n                  \"const\": \"opentelemetry\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"OpenTelemetry\",\n            \"logical_name\": \"Opentelemetry\"\n          }\n        },\n        {\n          \"description\": \"Collect metrics from the PostgreSQL database.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `postgresql_metrics` source.\",\n              \"$ref\": \"#/definitions/vector::sources::postgresql_metrics::PostgresqlMetricsConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect metrics from the PostgreSQL database.\",\n                  \"const\": \"postgresql_metrics\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"PostgreSQL Metrics\",\n            \"logical_name\": \"PostgresqlMetrics\"\n          }\n        },\n        {\n          \"description\": \"Receive metrics via the Prometheus Pushgateway protocol.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `prometheus_pushgateway` source.\",\n              \"$ref\": \"#/definitions/vector::sources::prometheus::pushgateway::PrometheusPushgatewayConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Receive metrics via the Prometheus Pushgateway protocol.\",\n                  \"const\": \"prometheus_pushgateway\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Prometheus Pushgateway\",\n            \"logical_name\": \"PrometheusPushgateway\"\n          }\n        },\n        {\n          \"description\": \"Receive metric via the Prometheus Remote Write protocol.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `prometheus_remote_write` source.\",\n              \"$ref\": \"#/definitions/vector::sources::prometheus::remote_write::PrometheusRemoteWriteConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Receive metric via the Prometheus Remote Write protocol.\",\n                  \"const\": \"prometheus_remote_write\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Prometheus Remote Write\",\n            \"logical_name\": \"PrometheusRemoteWrite\"\n          }\n        },\n        {\n          \"description\": \"Collect metrics from Prometheus exporters.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `prometheus_scrape` source.\",\n              \"$ref\": \"#/definitions/vector::sources::prometheus::scrape::PrometheusScrapeConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect metrics from Prometheus exporters.\",\n                  \"const\": \"prometheus_scrape\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Prometheus Scrape\",\n            \"logical_name\": \"PrometheusScrape\"\n          }\n        },\n        {\n          \"description\": \"Collect logs from Apache Pulsar.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `pulsar` source.\",\n              \"$ref\": \"#/definitions/vector::sources::pulsar::PulsarSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs from Apache Pulsar.\",\n                  \"const\": \"pulsar\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Pulsar\",\n            \"logical_name\": \"PulsarSource\"\n          }\n        },\n        {\n          \"description\": \"Collect observability data from Redis.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `redis` source.\",\n              \"$ref\": \"#/definitions/vector::sources::redis::RedisSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect observability data from Redis.\",\n                  \"const\": \"redis\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Redis\",\n            \"logical_name\": \"RedisSource\"\n          }\n        },\n        {\n          \"description\": \"Collect logs over a socket.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `socket` source.\",\n              \"$ref\": \"#/definitions/vector::sources::socket::SocketConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs over a socket.\",\n                  \"const\": \"socket\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Socket\",\n            \"logical_name\": \"Socket\"\n          }\n        },\n        {\n          \"description\": \"Receive logs from Splunk.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `splunk_hec` source.\",\n              \"$ref\": \"#/definitions/vector::sources::splunk_hec::SplunkConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Receive logs from Splunk.\",\n                  \"const\": \"splunk_hec\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Splunk HEC\",\n            \"logical_name\": \"Splunk\"\n          }\n        },\n        {\n          \"description\": \"Collect metrics emitted by the StatsD aggregator.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `statsd` source.\",\n              \"$ref\": \"#/definitions/vector::sources::statsd::StatsdConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect metrics emitted by the StatsD aggregator.\",\n                  \"const\": \"statsd\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"StatsD\",\n            \"logical_name\": \"Statsd\"\n          }\n        },\n        {\n          \"description\": \"Collect logs sent via stdin.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `stdin` source.\",\n              \"$ref\": \"#/definitions/vector::sources::file_descriptors::stdin::StdinConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs sent via stdin.\",\n                  \"const\": \"stdin\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Stdin\",\n            \"logical_name\": \"Stdin\"\n          }\n        },\n        {\n          \"description\": \"Collect logs sent via Syslog.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `syslog` source.\",\n              \"$ref\": \"#/definitions/vector::sources::syslog::SyslogConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect logs sent via Syslog.\",\n                  \"const\": \"syslog\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Syslog\",\n            \"logical_name\": \"Syslog\"\n          }\n        },\n        {\n          \"description\": \"Unit test.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `unit_test` source.\",\n              \"$ref\": \"#/definitions/vector::config::unit_test::unit_test_components::UnitTestSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Unit test.\",\n                  \"const\": \"unit_test\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Unit Test\",\n            \"logical_name\": \"UnitTestSource\"\n          }\n        },\n        {\n          \"description\": \"Unit test stream.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `unit_test_stream` source.\",\n              \"$ref\": \"#/definitions/vector::config::unit_test::unit_test_components::UnitTestStreamSourceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Unit test stream.\",\n                  \"const\": \"unit_test_stream\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Unit Test Stream\",\n            \"logical_name\": \"UnitTestStreamSource\"\n          }\n        },\n        {\n          \"description\": \"Collect observability data from a Vector instance.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `vector` source.\",\n              \"$ref\": \"#/definitions/vector::sources::vector::VectorConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collect observability data from a Vector instance.\",\n                  \"const\": \"vector\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Vector\",\n            \"logical_name\": \"Vector\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"internal\",\n        \"docs::enum_tag_field\": \"type\"\n      }\n    },\n    \"vector::sources::amqp::AmqpSourceConfig\": {\n      \"title\": \"Configuration for the `amqp` source.\",\n      \"description\": \"Supports AMQP version 0.9.1\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled by this source.\",\n              \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"consumer\": {\n              \"description\": \"The identifier for the consumer.\",\n              \"default\": \"vector\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"consumer-group-name\",\n                \"docs::human_name\": \"Consumer\"\n              }\n            },\n            \"decoding\": {\n              \"description\": \"Configures how events are decoded from raw bytes.\",\n              \"default\": {\n                \"codec\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Decoding\"\n              }\n            },\n            \"exchange_key\": {\n              \"description\": \"The `AMQP` exchange key.\",\n              \"default\": \"exchange\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Exchange Key\"\n              }\n            },\n            \"framing\": {\n              \"title\": \"Framing configuration.\",\n              \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n              \"default\": {\n                \"method\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Framing\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n              \"default\": null,\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            },\n            \"offset_key\": {\n              \"description\": \"The `AMQP` offset key.\",\n              \"default\": \"offset\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Offset Key\"\n              }\n            },\n            \"queue\": {\n              \"description\": \"The name of the queue to consume.\",\n              \"default\": \"vector\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Queue\"\n              }\n            },\n            \"routing_key_field\": {\n              \"description\": \"The `AMQP` routing key.\",\n              \"default\": \"routing\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Routing Key Field\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"AMQP connection options.\",\n          \"$ref\": \"#/definitions/vector::amqp::AmqpConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"amqp\"\n      }\n    },\n    \"vector::sources::apache_metrics::ApacheMetricsConfig\": {\n      \"description\": \"Configuration for the `apache_metrics` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoints\"\n      ],\n      \"properties\": {\n        \"endpoints\": {\n          \"description\": \"The list of `mod_status` endpoints to scrape metrics from.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"http://localhost:8080/server-status/?auto\",\n            \"docs::human_name\": \"Endpoints\"\n          }\n        },\n        \"namespace\": {\n          \"title\": \"The namespace of the metric.\",\n          \"description\": \"Disabled if empty.\",\n          \"default\": \"apache\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Namespace\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between scrapes.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"apache_metrics\"\n      }\n    },\n    \"vector::sources::aws_ecs_metrics::AwsEcsMetricsSourceConfig\": {\n      \"description\": \"Configuration for the `aws_ecs_metrics` source.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"endpoint\": {\n          \"title\": \"Base URI of the task metadata endpoint.\",\n          \"description\": \"If empty, the URI is automatically discovered based on the latest version detected.\\n\\nBy default:\\n- The version 4 endpoint base URI is stored in the environment variable `ECS_CONTAINER_METADATA_URI_V4`.\\n- The version 3 endpoint base URI is stored in the environment variable `ECS_CONTAINER_METADATA_URI`.\\n- The version 2 endpoint base URI is `169.254.170.2/v2/`.\",\n          \"default\": \"http://169.254.170.2/v2\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"namespace\": {\n          \"title\": \"The namespace of the metric.\",\n          \"description\": \"Disabled if empty.\",\n          \"default\": \"awsecs\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Namespace\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between scrapes, in seconds.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        },\n        \"version\": {\n          \"title\": \"The version of the task metadata endpoint to use.\",\n          \"description\": \"If empty, the version is automatically discovered based on environment variables.\\n\\nBy default:\\n- Version 4 is used if the environment variable `ECS_CONTAINER_METADATA_URI_V4` is defined.\\n- Version 3 is used if the environment variable `ECS_CONTAINER_METADATA_URI_V4` is not defined, but the\\n  environment variable `ECS_CONTAINER_METADATA_URI` _is_ defined.\\n- Version 2 is used if neither of the environment variables `ECS_CONTAINER_METADATA_URI_V4` or\\n  `ECS_CONTAINER_METADATA_URI` are defined.\",\n          \"default\": \"v2\",\n          \"oneOf\": [\n            {\n              \"title\": \"Version 2.\",\n              \"description\": \"More information about version 2 of the task metadata endpoint can be found [here][endpoint_v2].\\n\\n[endpoint_v2]: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v2.html\",\n              \"const\": \"v2\",\n              \"_metadata\": {\n                \"logical_name\": \"V2\",\n                \"docs::human_name\": \"V2\"\n              }\n            },\n            {\n              \"title\": \"Version 3.\",\n              \"description\": \"More information about version 3 of the task metadata endpoint can be found [here][endpoint_v3].\\n\\n[endpoint_v3]: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v3.html\",\n              \"const\": \"v3\",\n              \"_metadata\": {\n                \"logical_name\": \"V3\",\n                \"docs::human_name\": \"V3\"\n              }\n            },\n            {\n              \"title\": \"Version 4.\",\n              \"description\": \"More information about version 4 of the task metadata endpoint can be found [here][endpoint_v4].\\n\\n[endpoint_v4]: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v4.html\",\n              \"const\": \"v4\",\n              \"_metadata\": {\n                \"logical_name\": \"V4\",\n                \"docs::human_name\": \"V4\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Version\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"aws_ecs_metrics\"\n      }\n    },\n    \"vector::sources::aws_kinesis_firehose::AwsKinesisFirehoseConfig\": {\n      \"description\": \"Configuration for the `aws_kinesis_firehose` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\",\n        \"store_access_key\"\n      ],\n      \"properties\": {\n        \"access_key\": {\n          \"title\": \"An access key to authenticate requests against.\",\n          \"description\": \"AWS Kinesis Firehose can be configured to pass along a user-configurable access key with each request. If\\nconfigured, `access_key` should be set to the same value. Otherwise, all requests are allowed.\",\n          \"deprecated\": true,\n          \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n          \"_metadata\": {\n            \"deprecated_message\": \"This option has been deprecated, use `access_keys` instead.\",\n            \"docs::examples\": \"A94A8FE5CCB19BA61C4C08\",\n            \"docs::human_name\": \"Access Key\"\n          }\n        },\n        \"access_keys\": {\n          \"title\": \"A list of access keys to authenticate requests against.\",\n          \"description\": \"AWS Kinesis Firehose can be configured to pass along a user-configurable access key with each request. If\\nconfigured, `access_keys` should be set to the same value. Otherwise, all requests are allowed.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\"\n          },\n          \"_metadata\": {\n            \"sensitive\": true,\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"A94A8FE5CCB19BA61C4C08\",\n              \"B94B8FE5CCB19BA61C4C12\"\n            ],\n            \"docs::human_name\": \"Access Keys\"\n          }\n        },\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"description\": \"The socket address to listen for connections on.\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"0.0.0.0:443\",\n              \"localhost:443\"\n            ],\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"framing\": {\n          \"title\": \"Framing configuration.\",\n          \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n          \"default\": {\n            \"method\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"keepalive\": {\n          \"description\": \"Configuration of HTTP server keepalive parameters.\",\n          \"default\": {\n            \"max_connection_age_secs\": 300,\n            \"max_connection_age_jitter_factor\": 0.1\n          },\n          \"$ref\": \"#/definitions/vector::http::KeepaliveConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"record_compression\": {\n          \"title\": \"The compression scheme to use for decompressing records within the Firehose message.\",\n          \"description\": \"Some services, like AWS CloudWatch Logs, [compresses the events with gzip][events_with_gzip],\\nbefore sending them AWS Kinesis Firehose. This option can be used to automatically decompress\\nthem before forwarding them to the next component.\\n\\nNote that this is different from [Content encoding option][encoding_option] of the\\nFirehose HTTP endpoint destination. That option controls the content encoding of the entire HTTP request.\\n\\n[events_with_gzip]: https://docs.aws.amazon.com/firehose/latest/dev/writing-with-cloudwatch-logs.html\\n[encoding_option]: https://docs.aws.amazon.com/firehose/latest/dev/create-destination.html#create-destination-http\",\n          \"default\": \"auto\",\n          \"oneOf\": [\n            {\n              \"title\": \"Automatically attempt to determine the compression scheme.\",\n              \"description\": \"The compression scheme of the object is determined by looking at its file signature, also known\\nas [magic bytes][magic_bytes].\\n\\nIf the record fails to decompress with the discovered format, the record is forwarded as is.\\nThus, if you know the records are always gzip encoded (for example, if they are coming from AWS CloudWatch Logs),\\nset `gzip` in this field so that any records that are not-gzipped are rejected.\\n\\n[magic_bytes]: https://en.wikipedia.org/wiki/List_of_file_signatures\",\n              \"const\": \"auto\",\n              \"_metadata\": {\n                \"logical_name\": \"Auto\",\n                \"docs::human_name\": \"Auto\"\n              }\n            },\n            {\n              \"description\": \"Uncompressed.\",\n              \"const\": \"none\",\n              \"_metadata\": {\n                \"logical_name\": \"None\",\n                \"docs::human_name\": \"None\"\n              }\n            },\n            {\n              \"description\": \"GZIP.\",\n              \"const\": \"gzip\",\n              \"_metadata\": {\n                \"logical_name\": \"Gzip\",\n                \"docs::human_name\": \"Gzip\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Record Compression\"\n          }\n        },\n        \"store_access_key\": {\n          \"title\": \"Whether or not to store the AWS Firehose Access Key in event secrets.\",\n          \"description\": \"If set to `true`, when incoming requests contains an access key sent by AWS Firehose, it is kept in the\\nevent secrets as \\\"aws_kinesis_firehose_access_key\\\".\",\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Store Access Key\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"aws_kinesis_firehose\"\n      }\n    },\n    \"vector::sources::aws_s3::AwsS3Config\": {\n      \"description\": \"Configuration for the `aws_s3` source.\",\n      \"default\": {\n        \"region\": null,\n        \"endpoint\": null,\n        \"compression\": \"auto\",\n        \"strategy\": \"sqs\",\n        \"sqs\": null,\n        \"assume_role\": null,\n        \"auth\": {\n          \"load_timeout_secs\": null,\n          \"imds\": {\n            \"max_attempts\": 4,\n            \"connect_timeout_seconds\": 1,\n            \"read_timeout_seconds\": 1\n          },\n          \"region\": null\n        },\n        \"multiline\": null,\n        \"acknowledgements\": {\n          \"enabled\": null\n        },\n        \"tls_options\": null,\n        \"log_namespace\": null,\n        \"framing\": {\n          \"method\": \"newline_delimited\"\n        },\n        \"decoding\": {\n          \"codec\": \"bytes\"\n        }\n      },\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled by this source.\",\n              \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"assume_role\": {\n              \"title\": \"The ARN of an [IAM role][iam_role] to assume at startup.\",\n              \"description\": \"[iam_role]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\",\n              \"deprecated\": true,\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Assume Role\"\n              }\n            },\n            \"auth\": {\n              \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n              \"default\": {\n                \"load_timeout_secs\": null,\n                \"imds\": {\n                  \"max_attempts\": 4,\n                  \"connect_timeout_seconds\": 1,\n                  \"read_timeout_seconds\": 1\n                },\n                \"region\": null\n              },\n              \"$ref\": \"#/definitions/vector::aws::auth::AwsAuthentication\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Auth\"\n              }\n            },\n            \"compression\": {\n              \"description\": \"The compression scheme used for decompressing objects retrieved from S3.\",\n              \"oneOf\": [\n                {\n                  \"title\": \"Automatically attempt to determine the compression scheme.\",\n                  \"description\": \"The compression scheme of the object is determined from its `Content-Encoding` and\\n`Content-Type` metadata, as well as the key suffix (for example, `.gz`).\\n\\nIt is set to `none` if the compression scheme cannot be determined.\",\n                  \"const\": \"auto\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Auto\",\n                    \"docs::human_name\": \"Auto\"\n                  }\n                },\n                {\n                  \"description\": \"Uncompressed.\",\n                  \"const\": \"none\",\n                  \"_metadata\": {\n                    \"logical_name\": \"None\",\n                    \"docs::human_name\": \"None\"\n                  }\n                },\n                {\n                  \"description\": \"GZIP.\",\n                  \"const\": \"gzip\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Gzip\",\n                    \"docs::human_name\": \"Gzip\"\n                  }\n                },\n                {\n                  \"description\": \"ZSTD.\",\n                  \"const\": \"zstd\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Zstd\",\n                    \"docs::human_name\": \"Zstd\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Compression\"\n              }\n            },\n            \"decoding\": {\n              \"description\": \"Configures how events are decoded from raw bytes.\",\n              \"default\": {\n                \"codec\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Decoding\"\n              }\n            },\n            \"framing\": {\n              \"title\": \"Framing configuration.\",\n              \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n              \"default\": {\n                \"method\": \"newline_delimited\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Framing\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n              \"default\": null,\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            },\n            \"multiline\": {\n              \"title\": \"Multiline aggregation configuration.\",\n              \"description\": \"If not specified, multiline aggregation is disabled.\",\n              \"$ref\": \"#/definitions/core::option::Option<vector::sources::util::multiline_config::MultilineConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Multiline\"\n              }\n            },\n            \"sqs\": {\n              \"description\": \"Configuration options for SQS.\",\n              \"oneOf\": [\n                {\n                  \"type\": \"null\"\n                },\n                {\n                  \"description\": \"SQS configuration options.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"queue_url\"\n                  ],\n                  \"properties\": {\n                    \"client_concurrency\": {\n                      \"title\": \"Number of concurrent tasks to create for polling the queue for messages.\",\n                      \"description\": \"Defaults to the number of available CPUs on the system.\\n\\nShould not typically need to be changed, but it can sometimes be beneficial to raise this\\nvalue when there is a high rate of messages being pushed into the queue and the objects\\nbeing fetched are small. In these cases, system resources may not be fully utilized without\\nfetching more messages per second, as the SQS message consumption rate affects the S3 object\\nretrieval rate.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 1.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"tasks\",\n                        \"docs::examples\": 5,\n                        \"docs::human_name\": \"Client Concurrency\"\n                      }\n                    },\n                    \"delete_failed_message\": {\n                      \"title\": \"Whether to delete non-retryable messages.\",\n                      \"description\": \"If a message is rejected by the sink and not retryable, it is deleted from the queue.\",\n                      \"default\": true,\n                      \"type\": \"boolean\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Delete Failed Message\"\n                      }\n                    },\n                    \"delete_message\": {\n                      \"title\": \"Whether to delete the message once it is processed.\",\n                      \"description\": \"It can be useful to set this to `false` for debugging or during the initial setup.\",\n                      \"default\": true,\n                      \"type\": \"boolean\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Delete Message\"\n                      }\n                    },\n                    \"max_number_of_messages\": {\n                      \"title\": \"Maximum number of messages to poll from SQS in a batch\",\n                      \"description\": \"Defaults to 10\\n\\nShould be set to a smaller value when the files are large to help prevent the ingestion of\\none file from causing the other files to exceed the visibility_timeout. Valid values are 1 - 10\",\n                      \"default\": 10,\n                      \"type\": \"integer\",\n                      \"maximum\": 4294967295.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::human_name\": \"Max Messages\",\n                        \"docs::examples\": 1\n                      }\n                    },\n                    \"poll_secs\": {\n                      \"title\": \"How long to wait while polling the queue for new messages, in seconds.\",\n                      \"description\": \"Generally, this should not be changed unless instructed to do so, as if messages are available,\\nthey are always consumed, regardless of the value of `poll_secs`.\",\n                      \"default\": 15,\n                      \"type\": \"integer\",\n                      \"maximum\": 4294967295.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::type_unit\": \"seconds\",\n                        \"docs::human_name\": \"Poll Secs\"\n                      }\n                    },\n                    \"queue_url\": {\n                      \"description\": \"The URL of the SQS queue to poll for bucket notifications.\",\n                      \"type\": \"string\",\n                      \"format\": \"uri\",\n                      \"_metadata\": {\n                        \"docs::examples\": \"https://sqs.us-east-2.amazonaws.com/123456789012/MyQueue\",\n                        \"docs::human_name\": \"Queue URL\"\n                      }\n                    },\n                    \"tls_options\": {\n                      \"default\": null,\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"TLS Options\"\n                      }\n                    },\n                    \"visibility_timeout_secs\": {\n                      \"title\": \"The visibility timeout to use for messages, in seconds.\",\n                      \"description\": \"This controls how long a message is left unavailable after it is received. If a message is received, and\\ntakes longer than `visibility_timeout_secs` to process and delete the message from the queue, it is made available again for another consumer.\\n\\nThis can happen if there is an issue between consuming a message and deleting it.\",\n                      \"default\": 300,\n                      \"type\": \"integer\",\n                      \"maximum\": 4294967295.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::type_unit\": \"seconds\",\n                        \"docs::human_name\": \"Visibility Timeout\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"SQS\"\n              }\n            },\n            \"strategy\": {\n              \"description\": \"The strategy to use to consume objects from S3.\",\n              \"oneOf\": [\n                {\n                  \"title\": \"Consumes objects by processing bucket notification events sent to an [AWS SQS queue][aws_sqs].\",\n                  \"description\": \"[aws_sqs]: https://aws.amazon.com/sqs/\",\n                  \"const\": \"sqs\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Sqs\",\n                    \"docs::human_name\": \"SQS\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::hidden\": true,\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Strategy\"\n              }\n            },\n            \"tls_options\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS Options\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"aws_s3\"\n      }\n    },\n    \"vector::sources::aws_sqs::config::AwsSqsConfig\": {\n      \"description\": \"Configuration for the `aws_sqs` source.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"queue_url\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled by this source.\",\n              \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"auth\": {\n              \"description\": \"Configuration of the authentication strategy for interacting with AWS services.\",\n              \"default\": {\n                \"load_timeout_secs\": null,\n                \"imds\": {\n                  \"max_attempts\": 4,\n                  \"connect_timeout_seconds\": 1,\n                  \"read_timeout_seconds\": 1\n                },\n                \"region\": null\n              },\n              \"$ref\": \"#/definitions/vector::aws::auth::AwsAuthentication\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Auth\"\n              }\n            },\n            \"client_concurrency\": {\n              \"title\": \"Number of concurrent tasks to create for polling the queue for messages.\",\n              \"description\": \"Defaults to the number of available CPUs on the system.\\n\\nShould not typically need to be changed, but it can sometimes be beneficial to raise this\\nvalue when there is a high rate of messages being pushed into the queue and the messages\\nbeing fetched are small. In these cases, system resources may not be fully utilized without\\nfetching more messages per second, as it spends more time fetching the messages than\\nprocessing them.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Client Concurrency\"\n              }\n            },\n            \"decoding\": {\n              \"description\": \"Configures how events are decoded from raw bytes.\",\n              \"default\": {\n                \"codec\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Decoding\"\n              }\n            },\n            \"delete_message\": {\n              \"title\": \"Whether to delete the message once it is processed.\",\n              \"description\": \"It can be useful to set this to `false` for debugging or during the initial setup.\",\n              \"default\": true,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Delete Message\"\n              }\n            },\n            \"framing\": {\n              \"title\": \"Framing configuration.\",\n              \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n              \"default\": {\n                \"method\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Framing\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n              \"default\": null,\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            },\n            \"poll_secs\": {\n              \"title\": \"How long to wait while polling the queue for new messages, in seconds.\",\n              \"description\": \"Generally, this should not be changed unless instructed to do so, as if messages are available,\\nthey are always consumed, regardless of the value of `poll_secs`.\",\n              \"default\": 15,\n              \"type\": \"integer\",\n              \"maximum\": 4294967295.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Poll Wait Time\"\n              }\n            },\n            \"queue_url\": {\n              \"description\": \"The URL of the SQS queue to poll for messages.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"https://sqs.us-east-2.amazonaws.com/123456789012/MyQueue\",\n                \"docs::human_name\": \"Queue URL\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            },\n            \"visibility_timeout_secs\": {\n              \"title\": \"The visibility timeout to use for messages, in seconds.\",\n              \"description\": \"This controls how long a message is left unavailable after it is received. If a message is received, and\\ntakes longer than `visibility_timeout_secs` to process and delete the message from the queue, it is made available again for another consumer.\\n\\nThis can happen if there is an issue between consuming a message and deleting it.\",\n              \"default\": 300,\n              \"type\": \"integer\",\n              \"maximum\": 4294967295.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"seconds\",\n                \"docs::human_name\": \"Visibility Timeout\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the region/endpoint to use when interacting with an AWS service.\",\n          \"$ref\": \"#/definitions/vector::aws::region::RegionOrEndpoint\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"aws_sqs\"\n      }\n    },\n    \"vector::sources::datadog_agent::DatadogAgentConfig\": {\n      \"description\": \"Configuration for the `datadog_agent` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The socket address to accept connections on.\",\n          \"description\": \"It _must_ include a port.\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"0.0.0.0:80\",\n              \"localhost:80\"\n            ],\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"disable_logs\": {\n          \"description\": \"If this is set to `true`, logs are not accepted by the component.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Disable Logs\"\n          }\n        },\n        \"disable_metrics\": {\n          \"description\": \"If this is set to `true`, metrics (beta) are not accepted by the component.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Disable Metrics\"\n          }\n        },\n        \"disable_traces\": {\n          \"description\": \"If this is set to `true`, traces (alpha) are not accepted by the component.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Disable Traces\"\n          }\n        },\n        \"framing\": {\n          \"title\": \"Framing configuration.\",\n          \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n          \"default\": {\n            \"method\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"keepalive\": {\n          \"description\": \"Configuration of HTTP server keepalive parameters.\",\n          \"default\": {\n            \"max_connection_age_secs\": 300,\n            \"max_connection_age_jitter_factor\": 0.1\n          },\n          \"$ref\": \"#/definitions/vector::http::KeepaliveConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"multiple_outputs\": {\n          \"title\": \"If this is set to `true`, logs, metrics (beta), and traces (alpha) are sent to different outputs.\",\n          \"description\": \"For a source component named `agent`, the received logs, metrics (beta), and traces (alpha) can then be\\nconfigured as input to other components by specifying `agent.logs`, `agent.metrics`, and\\n`agent.traces`, respectively.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Multiple Outputs\"\n          }\n        },\n        \"parse_ddtags\": {\n          \"description\": \"If this is set to `true`, when log events contain the field `ddtags`, the string value that\\ncontains a list of key:value pairs set by the Agent is parsed and expanded into an array.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Parse Ddtags\"\n          }\n        },\n        \"store_api_key\": {\n          \"description\": \"If this is set to `true`, when incoming events contain a Datadog API key, it is\\nstored in the event metadata and used if the event is sent to a Datadog sink.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Store API Key\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"datadog_agent\"\n      }\n    },\n    \"vector::sources::demo_logs::DemoLogsConfig\": {\n      \"description\": \"Configuration for the `demo_logs` source.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"count\": {\n              \"title\": \"The total number of lines to output.\",\n              \"description\": \"By default, the source continuously prints logs (infinitely).\",\n              \"default\": 9223372036854775807,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Count\"\n              }\n            },\n            \"decoding\": {\n              \"description\": \"Configures how events are decoded from raw bytes.\",\n              \"default\": {\n                \"codec\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Decoding\"\n              }\n            },\n            \"framing\": {\n              \"title\": \"Framing configuration.\",\n              \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n              \"default\": {\n                \"method\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Framing\"\n              }\n            },\n            \"interval\": {\n              \"title\": \"The amount of time, in seconds, to pause between each batch of output lines.\",\n              \"description\": \"The default is one batch per second. To remove the delay and output batches as quickly as possible, set\\n`interval` to `0.0`.\",\n              \"default\": 1.0,\n              \"$ref\": \"#/definitions/serde_with::DurationFractionalSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  1.0,\n                  0.1,\n                  0.01\n                ],\n                \"docs::human_name\": \"Interval\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n              \"default\": null,\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Output format configuration.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Lines are chosen at random from the list specified using `lines`.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"format\",\n                \"lines\"\n              ],\n              \"properties\": {\n                \"format\": {\n                  \"description\": \"Lines are chosen at random from the list specified using `lines`.\",\n                  \"const\": \"shuffle\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Format\"\n                  }\n                },\n                \"lines\": {\n                  \"description\": \"The list of lines to output.\",\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"string\"\n                  },\n                  \"_metadata\": {\n                    \"docs::examples\": [\n                      \"line1\",\n                      \"line2\"\n                    ],\n                    \"docs::human_name\": \"Lines\"\n                  }\n                },\n                \"sequence\": {\n                  \"description\": \"If `true`, each output line starts with an increasing sequence number, beginning with 0.\",\n                  \"default\": false,\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Sequence\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Shuffle\",\n                \"docs::human_name\": \"Shuffle\"\n              }\n            },\n            {\n              \"title\": \"Randomly generated logs in [Apache common][apache_common] format.\",\n              \"description\": \"[apache_common]: https://httpd.apache.org/docs/current/logs.html#common\",\n              \"type\": \"object\",\n              \"required\": [\n                \"format\"\n              ],\n              \"properties\": {\n                \"format\": {\n                  \"title\": \"Randomly generated logs in [Apache common][apache_common] format.\",\n                  \"description\": \"[apache_common]: https://httpd.apache.org/docs/current/logs.html#common\",\n                  \"const\": \"apache_common\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Format\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"ApacheCommon\",\n                \"docs::human_name\": \"Apache Common\"\n              }\n            },\n            {\n              \"title\": \"Randomly generated logs in [Apache error][apache_error] format.\",\n              \"description\": \"[apache_error]: https://httpd.apache.org/docs/current/logs.html#errorlog\",\n              \"type\": \"object\",\n              \"required\": [\n                \"format\"\n              ],\n              \"properties\": {\n                \"format\": {\n                  \"title\": \"Randomly generated logs in [Apache error][apache_error] format.\",\n                  \"description\": \"[apache_error]: https://httpd.apache.org/docs/current/logs.html#errorlog\",\n                  \"const\": \"apache_error\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Format\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"ApacheError\",\n                \"docs::human_name\": \"Apache Error\"\n              }\n            },\n            {\n              \"title\": \"Randomly generated logs in Syslog format ([RFC 5424][syslog_5424]).\",\n              \"description\": \"[syslog_5424]: https://tools.ietf.org/html/rfc5424\",\n              \"type\": \"object\",\n              \"required\": [\n                \"format\"\n              ],\n              \"properties\": {\n                \"format\": {\n                  \"title\": \"Randomly generated logs in Syslog format ([RFC 5424][syslog_5424]).\",\n                  \"description\": \"[syslog_5424]: https://tools.ietf.org/html/rfc5424\",\n                  \"const\": \"syslog\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Format\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Syslog\",\n                \"docs::human_name\": \"Syslog\"\n              }\n            },\n            {\n              \"title\": \"Randomly generated logs in Syslog format ([RFC 3164][syslog_3164]).\",\n              \"description\": \"[syslog_3164]: https://tools.ietf.org/html/rfc3164\",\n              \"type\": \"object\",\n              \"required\": [\n                \"format\"\n              ],\n              \"properties\": {\n                \"format\": {\n                  \"title\": \"Randomly generated logs in Syslog format ([RFC 3164][syslog_3164]).\",\n                  \"description\": \"[syslog_3164]: https://tools.ietf.org/html/rfc3164\",\n                  \"const\": \"bsd_syslog\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Format\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"BsdSyslog\",\n                \"docs::human_name\": \"BSD Syslog\"\n              }\n            },\n            {\n              \"title\": \"Randomly generated HTTP server logs in [JSON][json] format.\",\n              \"description\": \"[json]: https://en.wikipedia.org/wiki/JSON\",\n              \"type\": \"object\",\n              \"required\": [\n                \"format\"\n              ],\n              \"properties\": {\n                \"format\": {\n                  \"title\": \"Randomly generated HTTP server logs in [JSON][json] format.\",\n                  \"description\": \"[json]: https://en.wikipedia.org/wiki/JSON\",\n                  \"const\": \"json\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Format\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Json\",\n                \"docs::human_name\": \"JSON\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The format of the randomly generated output.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"format\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"demo_logs\"\n      }\n    },\n    \"vector::sources::dnstap::DnstapConfig\": {\n      \"description\": \"Configuration for the `dnstap` source.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"host_key\": {\n              \"title\": \"Overrides the name of the log field used to add the source path to each event.\",\n              \"description\": \"The value is the socket path itself.\\n\\nBy default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Host Key\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"The namespace to use for logs. This overrides the global settings.\",\n              \"default\": null,\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            },\n            \"lowercase_hostnames\": {\n              \"description\": \"Whether to downcase all DNSTAP hostnames received for consistency\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Lowercase Hostnames\"\n              }\n            },\n            \"max_frame_handling_tasks\": {\n              \"description\": \"Maximum number of frames that can be processed concurrently.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 4294967295.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Max Frame Handling Tasks\"\n              }\n            },\n            \"max_frame_length\": {\n              \"title\": \"Maximum DNSTAP frame length that the source accepts.\",\n              \"description\": \"If any frame is longer than this, it is discarded.\",\n              \"default\": 102400,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Frame Length\"\n              }\n            },\n            \"multithreaded\": {\n              \"description\": \"Whether or not to concurrently process DNSTAP frames.\",\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Multithreaded\"\n              }\n            },\n            \"raw_data_only\": {\n              \"title\": \"Whether or not to skip parsing or decoding of DNSTAP frames.\",\n              \"description\": \"If set to `true`, frames are not parsed or decoded. The raw frame data is set as a field on the event\\n(called `rawData`) and encoded as a base64 string.\",\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Raw Data Only\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Listening mode for the `dnstap` source.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Listen on TCP.\",\n              \"allOf\": [\n                {\n                  \"description\": \"TCP configuration for the `dnstap` source.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"address\"\n                  ],\n                  \"properties\": {\n                    \"address\": {\n                      \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n                      \"description\": \"If a socket address is used, it _must_ include a port.\",\n                      \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Address\"\n                      }\n                    },\n                    \"connection_limit\": {\n                      \"description\": \"The maximum number of TCP connections that are allowed at any given time.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 4294967295.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"connections\",\n                        \"docs::human_name\": \"Connection Limit\"\n                      }\n                    },\n                    \"keepalive\": {\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Keepalive\"\n                      }\n                    },\n                    \"max_connection_duration_secs\": {\n                      \"title\": \"Maximum duration to keep each connection open. Connections open for longer than this duration are closed.\",\n                      \"description\": \"This is helpful for load balancing long-lived connections.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"seconds\",\n                        \"docs::human_name\": \"Max Connection Duration Secs\"\n                      }\n                    },\n                    \"permit_origin\": {\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::ipallowlist::IpAllowlistConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Permit Origin\"\n                      }\n                    },\n                    \"port_key\": {\n                      \"title\": \"Overrides the name of the log field used to add the peer host's port to each event.\",\n                      \"description\": \"The value will be the peer host's port i.e. `9000`.\\n\\nBy default, `\\\"port\\\"` is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\",\n                      \"default\": \"port\",\n                      \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Port Key\"\n                      }\n                    },\n                    \"receive_buffer_bytes\": {\n                      \"description\": \"The size of the receive buffer used for each connection.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::human_name\": \"Receive Buffer Bytes\"\n                      }\n                    },\n                    \"shutdown_timeout_secs\": {\n                      \"description\": \"The timeout before a connection is forcefully closed during shutdown.\",\n                      \"default\": 30,\n                      \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Shutdown Timeout\"\n                      }\n                    },\n                    \"tls\": {\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsSourceConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"TLS\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Listen on TCP.\",\n                      \"const\": \"tcp\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Tcp\",\n                \"docs::human_name\": \"TCP\"\n              }\n            },\n            {\n              \"description\": \"Listen on a Unix domain socket\",\n              \"allOf\": [\n                {\n                  \"description\": \"Unix domain socket configuration for the `dnstap` source.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"socket_path\"\n                  ],\n                  \"properties\": {\n                    \"socket_file_mode\": {\n                      \"title\": \"Unix file mode bits to be applied to the unix socket file as its designated file permissions.\",\n                      \"description\": \"Note: The file mode value can be specified in any numeric format supported by your configuration\\nlanguage, but it is most intuitive to use an octal number.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 4294967295.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::human_name\": \"Socket File Mode\"\n                      }\n                    },\n                    \"socket_path\": {\n                      \"title\": \"Absolute path to the socket file to read DNSTAP data from.\",\n                      \"description\": \"The DNS server must be configured to send its DNSTAP data to this socket file. The socket file is created\\nif it doesn't already exist when the source first starts.\",\n                      \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Socket Path\"\n                      }\n                    },\n                    \"socket_receive_buffer_size\": {\n                      \"title\": \"The size, in bytes, of the receive buffer used for the socket.\",\n                      \"description\": \"This should not typically needed to be changed.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::human_name\": \"Socket Receive Buffer Size\"\n                      }\n                    },\n                    \"socket_send_buffer_size\": {\n                      \"title\": \"The size, in bytes, of the send buffer used for the socket.\",\n                      \"description\": \"This should not typically needed to be changed.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::human_name\": \"Socket Send Buffer Size\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Listen on a Unix domain socket\",\n                      \"const\": \"unix\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Unix\",\n                \"docs::human_name\": \"Unix\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The type of dnstap socket to use.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"mode\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"dnstap\"\n      }\n    },\n    \"vector::sources::docker_logs::DockerLogsConfig\": {\n      \"description\": \"Configuration for the `docker_logs` source.\",\n      \"default\": {\n        \"host_key\": \"host\",\n        \"docker_host\": null,\n        \"exclude_containers\": null,\n        \"include_containers\": null,\n        \"include_labels\": null,\n        \"include_images\": null,\n        \"partial_event_marker_field\": \"_partial\",\n        \"auto_partial_merge\": true,\n        \"retry_backoff_secs\": 2,\n        \"multiline\": null,\n        \"tls\": null,\n        \"log_namespace\": null\n      },\n      \"type\": \"object\",\n      \"properties\": {\n        \"auto_partial_merge\": {\n          \"description\": \"Enables automatic merging of partial events.\",\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auto Partial Merge\"\n          }\n        },\n        \"docker_host\": {\n          \"title\": \"Docker host to connect to.\",\n          \"description\": \"Use an HTTPS URL to enable TLS encryption.\\n\\nIf absent, the `DOCKER_HOST` environment variable is used. If `DOCKER_HOST` is also absent,\\nthe default Docker local socket (`/var/run/docker.sock` on Unix platforms,\\n`//./pipe/docker_engine` on Windows) is used.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"http://localhost:2375\",\n              \"https://localhost:2376\",\n              \"unix:///var/run/docker.sock\",\n              \"npipe:////./pipe/docker_engine\",\n              \"/var/run/docker.sock\",\n              \"//./pipe/docker_engine\"\n            ],\n            \"docs::human_name\": \"Docker Host\"\n          }\n        },\n        \"exclude_containers\": {\n          \"title\": \"A list of container IDs or names of containers to exclude from log collection.\",\n          \"description\": \"Matching is prefix first, so specifying a value of `foo` would match any container named `foo` as well as any\\ncontainer whose name started with `foo`. This applies equally whether matching container IDs or names.\\n\\nBy default, the source collects logs for all containers. If `exclude_containers` is configured, any\\ncontainer that matches a configured exclusion is excluded even if it is also included with\\n`include_containers`, so care should be taken when using prefix matches as they cannot be overridden by a\\ncorresponding entry in `include_containers`, for example, excluding `foo` by attempting to include `foo-specific-id`.\\n\\nThis can be used in conjunction with `include_containers`.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"exclude_\",\n              \"exclude_me_0\",\n              \"ad08cc418cf9\"\n            ],\n            \"docs::human_name\": \"Exclude Containers\"\n          }\n        },\n        \"host_key\": {\n          \"title\": \"Overrides the name of the log field used to add the current hostname to each event.\",\n          \"description\": \"By default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n          \"default\": \"host\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"include_containers\": {\n          \"title\": \"A list of container IDs or names of containers to include in log collection.\",\n          \"description\": \"Matching is prefix first, so specifying a value of `foo` would match any container named `foo` as well as any\\ncontainer whose name started with `foo`. This applies equally whether matching container IDs or names.\\n\\nBy default, the source collects logs for all containers. If `include_containers` is configured, only\\ncontainers that match a configured inclusion and are also not excluded get matched.\\n\\nThis can be used in conjunction with `exclude_containers`.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"include_\",\n              \"include_me_0\",\n              \"ad08cc418cf9\"\n            ],\n            \"docs::human_name\": \"Include Containers\"\n          }\n        },\n        \"include_images\": {\n          \"title\": \"A list of image names to match against.\",\n          \"description\": \"If not provided, all images are included.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"httpd\",\n              \"redis\"\n            ],\n            \"docs::human_name\": \"Include Images\"\n          }\n        },\n        \"include_labels\": {\n          \"title\": \"A list of container object labels to match against when filtering running containers.\",\n          \"description\": \"Labels should follow the syntax described in the [Docker object labels](https://docs.docker.com/config/labels-custom-metadata/) documentation.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"org.opencontainers.image.vendor=Vector\",\n              \"com.mycorp.internal.animal=fish\"\n            ],\n            \"docs::human_name\": \"Include Labels\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"multiline\": {\n          \"title\": \"Multiline aggregation configuration.\",\n          \"description\": \"If not specified, multiline aggregation is disabled.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::sources::util::multiline_config::MultilineConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Multiline\"\n          }\n        },\n        \"partial_event_marker_field\": {\n          \"title\": \"Overrides the name of the log field used to mark an event as partial.\",\n          \"description\": \"If `auto_partial_merge` is disabled, partial events are emitted with a log field, set by this\\nconfiguration value, indicating that the event is not complete.\",\n          \"default\": \"_partial\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Partial Event Marker Field\"\n          }\n        },\n        \"retry_backoff_secs\": {\n          \"description\": \"The amount of time to wait before retrying after an error.\",\n          \"default\": 2,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Retry Backoff\"\n          }\n        },\n        \"tls\": {\n          \"title\": \"Configuration of TLS when connecting to the Docker daemon.\",\n          \"description\": \"Only relevant when connecting to Docker with an HTTPS URL.\\n\\nIf not configured, the environment variable `DOCKER_CERT_PATH` is used. If `DOCKER_CERT_PATH` is absent, then` DOCKER_CONFIG` is used. If both environment variables are absent, the certificates in `~/.docker/` are read.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"title\": \"Configuration of TLS when connecting to the Docker daemon.\",\n              \"description\": \"Only relevant when connecting to Docker with an HTTPS URL.\\n\\nIf not configured, the environment variable `DOCKER_CERT_PATH` is used. If `DOCKER_CERT_PATH` is absent, then` DOCKER_CONFIG` is used. If both environment variables are absent, the certificates in `~/.docker/` are read.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"ca_file\",\n                \"crt_file\",\n                \"key_file\"\n              ],\n              \"properties\": {\n                \"ca_file\": {\n                  \"description\": \"Path to the CA certificate file.\",\n                  \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Ca File\"\n                  }\n                },\n                \"crt_file\": {\n                  \"description\": \"Path to the TLS certificate file.\",\n                  \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Crt File\"\n                  }\n                },\n                \"key_file\": {\n                  \"description\": \"Path to the TLS key file.\",\n                  \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Key File\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"docker_logs\"\n      }\n    },\n    \"vector::sources::eventstoredb_metrics::EventStoreDbConfig\": {\n      \"description\": \"Configuration for the `eventstoredb_metrics` source.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"default_namespace\": {\n          \"title\": \"Overrides the default namespace for the metrics emitted by the source.\",\n          \"description\": \"By default, `eventstoredb` is used.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"eventstoredb\",\n            \"docs::human_name\": \"Default Namespace\"\n          }\n        },\n        \"endpoint\": {\n          \"description\": \"Endpoint to scrape stats from.\",\n          \"default\": \"https://localhost:2113/stats\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"https://localhost:2113/stats\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between scrapes, in seconds.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"eventstoredb_metrics\"\n      }\n    },\n    \"vector::sources::exec::ExecConfig\": {\n      \"description\": \"Configuration for the `exec` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"command\",\n        \"mode\"\n      ],\n      \"properties\": {\n        \"clear_environment\": {\n          \"description\": \"Whether or not to clear the environment before setting custom environment variables.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Clear Environment\"\n          }\n        },\n        \"command\": {\n          \"description\": \"The command to run, plus any arguments required.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"echo\",\n              \"Hello World!\"\n            ],\n            \"docs::human_name\": \"Command\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"environment\": {\n          \"description\": \"Custom environment variables to set or update when running the command.\\nIf a variable name already exists in the environment, its value is replaced.\",\n          \"default\": null,\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::additional_props_description\": \"An environment variable.\",\n            \"docs::examples\": {\n              \"LANG\": \"es_ES.UTF-8\",\n              \"TZ\": \"Etc/UTC\",\n              \"PATH\": \"/bin:/usr/bin:/usr/local/bin\"\n            },\n            \"docs::human_name\": \"Environment\"\n          }\n        },\n        \"framing\": {\n          \"$ref\": \"#/definitions/core::option::Option<codecs::decoding::FramingConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"include_stderr\": {\n          \"description\": \"Whether or not the output from stderr should be included when generating events.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Include Stderr\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"maximum_buffer_size_bytes\": {\n          \"description\": \"The maximum buffer size allowed before a log event is generated.\",\n          \"default\": 1000000,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Maximum Buffer Size Bytes\"\n          }\n        },\n        \"mode\": {\n          \"description\": \"Mode of operation for running the command.\",\n          \"oneOf\": [\n            {\n              \"description\": \"The command is run on a schedule.\",\n              \"const\": \"scheduled\",\n              \"_metadata\": {\n                \"logical_name\": \"Scheduled\",\n                \"docs::human_name\": \"Scheduled\"\n              }\n            },\n            {\n              \"description\": \"The command is run until it exits, potentially being restarted.\",\n              \"const\": \"streaming\",\n              \"_metadata\": {\n                \"logical_name\": \"Streaming\",\n                \"docs::human_name\": \"Streaming\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Mode\"\n          }\n        },\n        \"scheduled\": {\n          \"description\": \"Configuration options for scheduled commands.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Configuration options for scheduled commands.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"exec_interval_secs\": {\n                  \"title\": \"The interval, in seconds, between scheduled command runs.\",\n                  \"description\": \"If the command takes longer than `exec_interval_secs` to run, it is killed.\",\n                  \"default\": 60,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::human_name\": \"Exec Interval Secs\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Scheduled\"\n          }\n        },\n        \"streaming\": {\n          \"description\": \"Configuration options for streaming commands.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Configuration options for streaming commands.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"respawn_interval_secs\": {\n                  \"description\": \"The amount of time, in seconds, before rerunning a streaming command that exited.\",\n                  \"default\": 5,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::human_name\": \"Respawn Interval\"\n                  }\n                },\n                \"respawn_on_exit\": {\n                  \"description\": \"Whether or not the command should be rerun if the command exits.\",\n                  \"default\": true,\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Respawn On Exit\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Streaming\"\n          }\n        },\n        \"working_directory\": {\n          \"description\": \"The directory in which to run the command.\",\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Working Directory\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"exec\"\n      }\n    },\n    \"vector::sources::file::FileConfig\": {\n      \"description\": \"Configuration for the `file` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"include\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"data_dir\": {\n          \"title\": \"The directory used to persist file checkpoint positions.\",\n          \"description\": \"By default, the [global `data_dir` option][global_data_dir] is used.\\nMake sure the running user has write permissions to this directory.\\n\\nIf this directory is specified, then Vector will attempt to create it.\\n\\n[global_data_dir]: https://vector.dev/docs/reference/configuration/global-options/#data_dir\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::examples\": \"/var/local/lib/vector/\",\n            \"docs::human_name\": \"Data Directory\"\n          }\n        },\n        \"encoding\": {\n          \"description\": \"Character set encoding.\",\n          \"default\": null,\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Character set encoding.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"charset\"\n              ],\n              \"properties\": {\n                \"charset\": {\n                  \"title\": \"Encoding of the source messages.\",\n                  \"description\": \"Takes one of the encoding [label strings](https://encoding.spec.whatwg.org/#concept-encoding-get) defined as\\npart of the [Encoding Standard](https://encoding.spec.whatwg.org/).\\n\\nWhen set, the messages are transcoded from the specified encoding to UTF-8, which is the encoding that is\\nassumed internally for string-like data. Enable this transcoding operation if you need your data to\\nbe in UTF-8 for further processing. At the time of transcoding, any malformed sequences (that can't be mapped to\\nUTF-8) is replaced with the Unicode [REPLACEMENT\\nCHARACTER](https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character) and warnings are\\nlogged.\",\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::examples\": [\n                      \"utf-16le\",\n                      \"utf-16be\"\n                    ],\n                    \"docs::human_name\": \"Charset\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"exclude\": {\n          \"title\": \"Array of file patterns to exclude. [Globbing](https://vector.dev/docs/reference/configuration/sources/file/#globbing) is supported.\",\n          \"description\": \"Takes precedence over the `include` option. Note: The `exclude` patterns are applied _after_ the attempt to glob everything\\nin `include`. This means that all files are first matched by `include` and then filtered by the `exclude`\\npatterns. This can be impactful if `include` contains directories with contents that are not accessible.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/stdlib::PathBuf\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"/var/log/binary-file.log\",\n            \"docs::human_name\": \"Exclude\"\n          }\n        },\n        \"file_key\": {\n          \"title\": \"Overrides the name of the log field used to add the file path to each event.\",\n          \"description\": \"The value is the full path to the file where the event was read message.\\n\\nSet to `\\\"\\\"` to suppress this key.\",\n          \"default\": \"file\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::examples\": \"path\",\n            \"docs::human_name\": \"File Key\"\n          }\n        },\n        \"fingerprint\": {\n          \"title\": \"Configuration for how files should be identified.\",\n          \"description\": \"This is important for `checkpointing` when file rotation is used.\",\n          \"default\": {\n            \"strategy\": \"checksum\",\n            \"bytes\": null,\n            \"ignored_header_bytes\": 0,\n            \"lines\": 1\n          },\n          \"oneOf\": [\n            {\n              \"description\": \"Read lines from the beginning of the file and compute a checksum over them.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"strategy\"\n              ],\n              \"properties\": {\n                \"bytes\": {\n                  \"description\": \"Maximum number of bytes to use, from the lines that are read, for generating the checksum.\",\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::hidden\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Bytes\"\n                  }\n                },\n                \"ignored_header_bytes\": {\n                  \"title\": \"The number of bytes to skip ahead (or ignore) when reading the data used for generating the checksum.\",\n                  \"description\": \"This can be helpful if all files share a common header that should be skipped.\",\n                  \"default\": 0,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Ignored Header Bytes\"\n                  }\n                },\n                \"lines\": {\n                  \"title\": \"The number of lines to read for generating the checksum.\",\n                  \"description\": \"If your files share a common header that is not always a fixed size,\\n\\nIf the file has less than this amount of lines, it won’t be read at all.\",\n                  \"default\": 1,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::type_unit\": \"lines\",\n                    \"docs::human_name\": \"Lines\"\n                  }\n                },\n                \"strategy\": {\n                  \"description\": \"Read lines from the beginning of the file and compute a checksum over them.\",\n                  \"const\": \"checksum\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strategy\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Checksum\",\n                \"docs::human_name\": \"Checksum\"\n              }\n            },\n            {\n              \"title\": \"Use the [device and inode][inode] as the identifier.\",\n              \"description\": \"[inode]: https://en.wikipedia.org/wiki/Inode\",\n              \"type\": \"object\",\n              \"required\": [\n                \"strategy\"\n              ],\n              \"properties\": {\n                \"strategy\": {\n                  \"title\": \"Use the [device and inode][inode] as the identifier.\",\n                  \"description\": \"[inode]: https://en.wikipedia.org/wiki/Inode\",\n                  \"const\": \"device_and_inode\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Strategy\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"DevInode\",\n                \"docs::human_name\": \"Dev Inode\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The strategy used to uniquely identify files.\\n\\nThis is important for checkpointing when file rotation is used.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"strategy\",\n            \"docs::human_name\": \"Fingerprint\"\n          }\n        },\n        \"glob_minimum_cooldown_ms\": {\n          \"title\": \"The delay between file discovery calls.\",\n          \"description\": \"This controls the interval at which files are searched. A higher value results in greater\\nchances of some short-lived files being missed between searches, but a lower value increases\\nthe performance impact of file discovery.\",\n          \"default\": 1000,\n          \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n          \"_metadata\": {\n            \"docs::type_unit\": \"milliseconds\",\n            \"docs::human_name\": \"Glob Minimum Cooldown\"\n          }\n        },\n        \"host_key\": {\n          \"title\": \"Overrides the name of the log field used to add the current hostname to each event.\",\n          \"description\": \"By default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n          \"default\": \"host\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::examples\": \"hostname\",\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"ignore_checkpoints\": {\n          \"title\": \"Whether or not to ignore existing checkpoints when determining where to start reading a file.\",\n          \"description\": \"Checkpoints are still written normally.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Ignore Checkpoints\"\n          }\n        },\n        \"ignore_not_found\": {\n          \"title\": \"Ignore missing files when fingerprinting.\",\n          \"description\": \"This may be useful when used with source directories containing dangling symlinks.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Ignore Not Found\"\n          }\n        },\n        \"ignore_older_secs\": {\n          \"description\": \"Ignore files with a data modification date older than the specified number of seconds.\",\n          \"default\": null,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::examples\": 600,\n            \"docs::human_name\": \"Ignore Older Files\"\n          }\n        },\n        \"include\": {\n          \"description\": \"Array of file patterns to include. [Globbing](https://vector.dev/docs/reference/configuration/sources/file/#globbing) is supported.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/stdlib::PathBuf\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"/var/log/**/*.log\",\n            \"docs::human_name\": \"Include\"\n          }\n        },\n        \"internal_metrics\": {\n          \"description\": \"Configuration of internal metrics for file-based components.\",\n          \"default\": {\n            \"include_file_tag\": false\n          },\n          \"$ref\": \"#/definitions/vector::internal_events::file::FileInternalMetricsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Internal Metrics\"\n          }\n        },\n        \"line_delimiter\": {\n          \"description\": \"String sequence used to separate one file line from another.\",\n          \"default\": \"\\n\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"\\r\\n\",\n            \"docs::human_name\": \"Line Delimiter\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"max_line_bytes\": {\n          \"title\": \"The maximum size of a line before it is discarded.\",\n          \"description\": \"This protects against malformed lines or tailing incorrect files.\",\n          \"default\": 102400,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Line Bytes\"\n          }\n        },\n        \"max_read_bytes\": {\n          \"title\": \"Max amount of bytes to read from a single file before switching over to the next file.\\n**Note:** This does not apply when `oldest_first` is `true`.\",\n          \"description\": \"This allows distributing the reads more or less evenly across\\nthe files.\",\n          \"default\": 2048,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Read Bytes\"\n          }\n        },\n        \"message_start_indicator\": {\n          \"description\": \"String value used to identify the start of a multi-line message.\",\n          \"default\": null,\n          \"deprecated\": true,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"deprecated_message\": \"This option has been deprecated, use `multiline` instead.\",\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Message Start Indicator\"\n          }\n        },\n        \"multi_line_timeout\": {\n          \"description\": \"How long to wait for more data when aggregating a multi-line message, in milliseconds.\",\n          \"default\": 1000,\n          \"deprecated\": true,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"deprecated_message\": \"This option has been deprecated, use `multiline` instead.\",\n            \"docs::numeric_type\": \"uint\",\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Multi Line Timeout\"\n          }\n        },\n        \"multiline\": {\n          \"title\": \"Multiline aggregation configuration.\",\n          \"description\": \"If not specified, multiline aggregation is disabled.\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector::sources::util::multiline_config::MultilineConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Multiline\"\n          }\n        },\n        \"offset_key\": {\n          \"title\": \"Enables adding the file offset to each event and sets the name of the log field used.\",\n          \"description\": \"The value is the byte offset of the start of the line within the file.\\n\\nOff by default, the offset is only added to the event if this is set.\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n          \"_metadata\": {\n            \"docs::examples\": \"offset\",\n            \"docs::human_name\": \"Offset Key\"\n          }\n        },\n        \"oldest_first\": {\n          \"description\": \"Instead of balancing read capacity fairly across all watched files, prioritize draining the oldest files before moving on to read data from more recent files.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Oldest First\"\n          }\n        },\n        \"read_from\": {\n          \"description\": \"File position to use when reading a new file.\",\n          \"default\": \"beginning\",\n          \"$ref\": \"#/definitions/file_source::ReadFromConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Read From\"\n          }\n        },\n        \"remove_after_secs\": {\n          \"title\": \"After reaching EOF, the number of seconds to wait before removing the file, unless new data is written.\",\n          \"description\": \"If not specified, files are not removed.\",\n          \"default\": null,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::examples\": [\n              0,\n              5,\n              60\n            ],\n            \"docs::human_name\": \"Wait Time Before Removing File\"\n          }\n        },\n        \"rotate_wait_secs\": {\n          \"description\": \"How long to keep an open handle to a rotated log file.\\nThe default value represents \\\"no limit\\\"\",\n          \"default\": 9223372036854775807,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Rotate Wait Secs\"\n          }\n        },\n        \"start_at_beginning\": {\n          \"description\": \"Whether or not to start reading from the beginning of a new file.\",\n          \"default\": null,\n          \"deprecated\": true,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"deprecated_message\": \"This option has been deprecated, use `ignore_checkpoints`/`read_from` instead.\",\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Start At Beginning\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"file\"\n      }\n    },\n    \"vector::sources::file_descriptors::file_descriptor::FileDescriptorSourceConfig\": {\n      \"description\": \"Configuration for the `file_descriptor` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"fd\"\n      ],\n      \"properties\": {\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"fd\": {\n          \"description\": \"The file descriptor number to read from.\",\n          \"type\": \"integer\",\n          \"maximum\": 4294967295.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::examples\": 10,\n            \"docs::human_name\": \"File Descriptor Number\"\n          }\n        },\n        \"framing\": {\n          \"$ref\": \"#/definitions/core::option::Option<codecs::decoding::FramingConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"host_key\": {\n          \"title\": \"Overrides the name of the log field used to add the current hostname to each event.\",\n          \"description\": \"By default, the [global `host_key` option](https://vector.dev/docs/reference/configuration//global-options#log_schema.host_key) is used.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"max_length\": {\n          \"title\": \"The maximum buffer size, in bytes, of incoming messages.\",\n          \"description\": \"Messages larger than this are truncated.\",\n          \"default\": 102400,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Length\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"file_descriptor\"\n      }\n    },\n    \"vector::sources::file_descriptors::stdin::StdinConfig\": {\n      \"description\": \"Configuration for the `stdin` source.\",\n      \"default\": {\n        \"max_length\": 102400,\n        \"host_key\": null,\n        \"framing\": null,\n        \"decoding\": {\n          \"codec\": \"bytes\"\n        },\n        \"log_namespace\": null\n      },\n      \"type\": \"object\",\n      \"properties\": {\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"framing\": {\n          \"$ref\": \"#/definitions/core::option::Option<codecs::decoding::FramingConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"host_key\": {\n          \"title\": \"Overrides the name of the log field used to add the current hostname to each event.\",\n          \"description\": \"By default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"max_length\": {\n          \"title\": \"The maximum buffer size, in bytes, of incoming messages.\",\n          \"description\": \"Messages larger than this are truncated.\",\n          \"default\": 102400,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Length\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"stdin\"\n      }\n    },\n    \"vector::sources::fluent::FluentConfig\": {\n      \"description\": \"Configuration for the `fluent` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n          \"description\": \"If a socket address is used, it _must_ include a port.\",\n          \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"connection_limit\": {\n          \"description\": \"The maximum number of TCP connections that are allowed at any given time.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 4294967295.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"connections\",\n            \"docs::human_name\": \"Connection Limit\"\n          }\n        },\n        \"keepalive\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"permit_origin\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::ipallowlist::IpAllowlistConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Permit Origin\"\n          }\n        },\n        \"receive_buffer_bytes\": {\n          \"title\": \"The size of the receive buffer used for each connection.\",\n          \"description\": \"This generally should not need to be changed.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"bytes\",\n            \"docs::examples\": 65536,\n            \"docs::human_name\": \"Receive Buffer Bytes\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsSourceConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"fluent\"\n      }\n    },\n    \"vector::sources::gcp_pubsub::PubsubConfig\": {\n      \"description\": \"Configuration for the `gcp_pubsub` source.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"project\",\n            \"subscription\"\n          ],\n          \"properties\": {\n            \"ack_deadline_seconds\": {\n              \"title\": \"The acknowledgement deadline, in seconds, to use for this stream.\",\n              \"description\": \"Messages that are not acknowledged when this deadline expires may be retransmitted.\",\n              \"deprecated\": true,\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 65535.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"deprecated_message\": \"This option has been deprecated, use `ack_deadline_secs` instead.\",\n                \"docs::human_name\": \"Ack Deadline Seconds\"\n              }\n            },\n            \"ack_deadline_secs\": {\n              \"title\": \"The acknowledgement deadline, in seconds, to use for this stream.\",\n              \"description\": \"Messages that are not acknowledged when this deadline expires may be retransmitted.\",\n              \"default\": 600,\n              \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgement Deadline\"\n              }\n            },\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled by this source.\",\n              \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"decoding\": {\n              \"description\": \"Configures how events are decoded from raw bytes.\",\n              \"default\": {\n                \"codec\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Decoding\"\n              }\n            },\n            \"endpoint\": {\n              \"description\": \"The endpoint from which to pull data.\",\n              \"default\": \"https://pubsub.googleapis.com\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"https://us-central1-pubsub.googleapis.com\",\n                \"docs::human_name\": \"Endpoint\"\n              }\n            },\n            \"framing\": {\n              \"title\": \"Framing configuration.\",\n              \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n              \"default\": {\n                \"method\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Framing\"\n              }\n            },\n            \"full_response_size\": {\n              \"title\": \"The number of messages in a response to mark a stream as\\n\\\"busy\\\". This is used to determine if more streams should be\\nstarted.\",\n              \"description\": \"The GCP Pub/Sub servers send responses with 100 or more messages when\\nthe subscription is busy.\",\n              \"default\": 100,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Full Response Size\"\n              }\n            },\n            \"keepalive_secs\": {\n              \"description\": \"The amount of time, in seconds, with no received activity\\nbefore sending a keepalive request. If this is set larger than\\n`60`, you may see periodic errors sent from the server.\",\n              \"default\": 60.0,\n              \"$ref\": \"#/definitions/serde_with::DurationFractionalSeconds\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Keepalive\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n              \"default\": null,\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            },\n            \"max_concurrency\": {\n              \"description\": \"The maximum number of concurrent stream connections to open at once.\",\n              \"default\": 10,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Max Concurrency\"\n              }\n            },\n            \"poll_time_seconds\": {\n              \"description\": \"How often to poll the currently active streams to see if they\\nare all busy and so open a new stream.\",\n              \"default\": 2.0,\n              \"$ref\": \"#/definitions/serde_with::DurationFractionalSeconds\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Poll Time\"\n              }\n            },\n            \"project\": {\n              \"description\": \"The project name from which to pull logs.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"my-log-source-project\",\n                \"docs::human_name\": \"Project\"\n              }\n            },\n            \"retry_delay_seconds\": {\n              \"description\": \"The amount of time, in seconds, to wait between retry attempts after an error.\",\n              \"deprecated\": true,\n              \"type\": [\n                \"number\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": -9007199254740991.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"float\",\n                \"docs::optional\": true,\n                \"deprecated_message\": \"This option has been deprecated, use `retry_delay_secs` instead.\",\n                \"docs::human_name\": \"Retry Delay Seconds\"\n              }\n            },\n            \"retry_delay_secs\": {\n              \"description\": \"The amount of time, in seconds, to wait between retry attempts after an error.\",\n              \"default\": 1.0,\n              \"$ref\": \"#/definitions/serde_with::DurationFractionalSeconds\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Retry Delay\"\n              }\n            },\n            \"subscription\": {\n              \"description\": \"The subscription within the project which is configured to receive logs.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"my-vector-source-subscription\",\n                \"docs::human_name\": \"Subscription\"\n              }\n            },\n            \"tls\": {\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Configuration of the authentication strategy for interacting with GCP services.\",\n          \"$ref\": \"#/definitions/vector::gcp::GcpAuthConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"gcp_pubsub\"\n      }\n    },\n    \"vector::sources::heroku_logs::LogplexConfig\": {\n      \"description\": \"Configuration for `heroku_logs` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"description\": \"The socket address to listen for connections on.\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"0.0.0.0:80\",\n              \"localhost:80\"\n            ],\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::sources::util::http::auth::HttpSourceAuthConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"framing\": {\n          \"title\": \"Framing configuration.\",\n          \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n          \"default\": {\n            \"method\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"keepalive\": {\n          \"description\": \"Configuration of HTTP server keepalive parameters.\",\n          \"default\": {\n            \"max_connection_age_secs\": 300,\n            \"max_connection_age_jitter_factor\": 0.1\n          },\n          \"$ref\": \"#/definitions/vector::http::KeepaliveConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"query_parameters\": {\n          \"title\": \"A list of URL query parameters to include in the log event.\",\n          \"description\": \"These override any values included in the body with conflicting names.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"application\",\n              \"source\"\n            ],\n            \"docs::human_name\": \"Query Parameters\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"heroku_logs\"\n      }\n    },\n    \"vector::sources::host_metrics::FilterList\": {\n      \"description\": \"Filtering configuration.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"excludes\": {\n          \"title\": \"Any patterns which should be excluded.\",\n          \"description\": \"The patterns are matched using globbing.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"title\": \"A compiled Unix shell-style pattern.\",\n            \"description\": \"- `?` matches any single character.\\n- `*` matches any (possibly empty) sequence of characters.\\n- `**` matches the current directory and arbitrary subdirectories. This sequence must form a single path component,\\n  so both `**a` and `b**` are invalid and will result in an error. A sequence of more than two consecutive `*`\\n  characters is also invalid.\\n- `[...]` matches any character inside the brackets. Character sequences can also specify ranges of characters, as\\n  ordered by Unicode, so e.g. `[0-9]` specifies any character between 0 and 9 inclusive. An unclosed bracket is\\n  invalid.\\n- `[!...]` is the negation of `[...]`, i.e. it matches any characters not in the brackets.\\n\\nThe metacharacters `?`, `*`, `[`, `]` can be matched by using brackets (e.g. `[?]`). When a `]` occurs immediately\\nfollowing `[` or `[!` then it is interpreted as being part of, rather then ending, the character set, so `]` and NOT\\n`]` can be matched by `[]]` and `[!]]` respectively. The `-` character can be specified inside a character sequence\\npattern by placing it at the start or the end, e.g. `[abc-]`.\",\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Excludes\"\n          }\n        },\n        \"includes\": {\n          \"title\": \"Any patterns which should be included.\",\n          \"description\": \"The patterns are matched using globbing.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"title\": \"A compiled Unix shell-style pattern.\",\n            \"description\": \"- `?` matches any single character.\\n- `*` matches any (possibly empty) sequence of characters.\\n- `**` matches the current directory and arbitrary subdirectories. This sequence must form a single path component,\\n  so both `**a` and `b**` are invalid and will result in an error. A sequence of more than two consecutive `*`\\n  characters is also invalid.\\n- `[...]` matches any character inside the brackets. Character sequences can also specify ranges of characters, as\\n  ordered by Unicode, so e.g. `[0-9]` specifies any character between 0 and 9 inclusive. An unclosed bracket is\\n  invalid.\\n- `[!...]` is the negation of `[...]`, i.e. it matches any characters not in the brackets.\\n\\nThe metacharacters `?`, `*`, `[`, `]` can be matched by using brackets (e.g. `[?]`). When a `]` occurs immediately\\nfollowing `[` or `[!` then it is interpreted as being part of, rather then ending, the character set, so `]` and NOT\\n`]` can be matched by `[]]` and `[!]]` respectively. The `-` character can be specified inside a character sequence\\npattern by placing it at the start or the end, e.g. `[abc-]`.\",\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Includes\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"vector::sources::host_metrics::HostMetricsConfig\": {\n      \"description\": \"Configuration for the `host_metrics` source.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"cgroups\": {\n          \"title\": \"Options for the cgroups (controller groups) metrics collector.\",\n          \"description\": \"This collector is only available on Linux systems, and only supports either version 2 or hybrid cgroups.\",\n          \"default\": {\n            \"levels\": 100,\n            \"base\": null,\n            \"groups\": {\n              \"includes\": null,\n              \"excludes\": null\n            }\n          },\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"title\": \"Options for the cgroups (controller groups) metrics collector.\",\n              \"description\": \"This collector is only available on Linux systems, and only supports either version 2 or hybrid cgroups.\",\n              \"default\": {\n                \"levels\": 100,\n                \"base\": null,\n                \"groups\": {\n                  \"includes\": null,\n                  \"excludes\": null\n                }\n              },\n              \"type\": \"object\",\n              \"properties\": {\n                \"base\": {\n                  \"description\": \"The base cgroup name to provide metrics for.\",\n                  \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n                  \"_metadata\": {\n                    \"docs::examples\": [\n                      \"/\",\n                      \"system.slice/snapd.service\"\n                    ],\n                    \"docs::human_name\": \"Base\"\n                  }\n                },\n                \"base_dir\": {\n                  \"description\": \"Base cgroup directory, for testing use only\",\n                  \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n                  \"_metadata\": {\n                    \"docs::hidden\": true,\n                    \"docs::human_name\": \"Base Directory\"\n                  }\n                },\n                \"groups\": {\n                  \"description\": \"Lists of cgroup name patterns to include or exclude in gathering\\nusage metrics.\",\n                  \"default\": {\n                    \"includes\": [\n                      \"*\"\n                    ],\n                    \"excludes\": null\n                  },\n                  \"$ref\": \"#/definitions/vector::sources::host_metrics::FilterList\",\n                  \"_metadata\": {\n                    \"docs::examples\": {\n                      \"includes\": [\n                        \"user.slice/*\"\n                      ],\n                      \"excludes\": [\n                        \"*.service\"\n                      ]\n                    },\n                    \"docs::human_name\": \"Groups\"\n                  }\n                },\n                \"levels\": {\n                  \"title\": \"The number of levels of the cgroups hierarchy for which to report metrics.\",\n                  \"description\": \"A value of `1` means the root or named cgroup.\",\n                  \"default\": 100,\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::examples\": [\n                      1,\n                      3\n                    ],\n                    \"docs::human_name\": \"Levels\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Cgroups\"\n          }\n        },\n        \"collectors\": {\n          \"title\": \"The list of host metric collector services to use.\",\n          \"description\": \"Defaults to all collectors.\",\n          \"default\": [\n            \"cpu\",\n            \"disk\",\n            \"filesystem\",\n            \"load\",\n            \"host\",\n            \"memory\",\n            \"network\",\n            \"cgroups\"\n          ],\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"description\": \"Collector types.\",\n            \"oneOf\": [\n              {\n                \"title\": \"Metrics related to Linux control groups.\",\n                \"description\": \"Only available on Linux.\",\n                \"const\": \"cgroups\",\n                \"_metadata\": {\n                  \"logical_name\": \"CGroups\",\n                  \"docs::human_name\": \"C Groups\"\n                }\n              },\n              {\n                \"description\": \"Metrics related to CPU utilization.\",\n                \"const\": \"cpu\",\n                \"_metadata\": {\n                  \"logical_name\": \"Cpu\",\n                  \"docs::human_name\": \"CPU\"\n                }\n              },\n              {\n                \"description\": \"Metrics related to disk I/O utilization.\",\n                \"const\": \"disk\",\n                \"_metadata\": {\n                  \"logical_name\": \"Disk\",\n                  \"docs::human_name\": \"Disk\"\n                }\n              },\n              {\n                \"description\": \"Metrics related to filesystem space utilization.\",\n                \"const\": \"filesystem\",\n                \"_metadata\": {\n                  \"logical_name\": \"Filesystem\",\n                  \"docs::human_name\": \"Filesystem\"\n                }\n              },\n              {\n                \"description\": \"Metrics related to the system load average.\",\n                \"const\": \"load\",\n                \"_metadata\": {\n                  \"logical_name\": \"Load\",\n                  \"docs::human_name\": \"Load\"\n                }\n              },\n              {\n                \"description\": \"Metrics related to the host.\",\n                \"const\": \"host\",\n                \"_metadata\": {\n                  \"logical_name\": \"Host\",\n                  \"docs::human_name\": \"Host\"\n                }\n              },\n              {\n                \"description\": \"Metrics related to memory utilization.\",\n                \"const\": \"memory\",\n                \"_metadata\": {\n                  \"logical_name\": \"Memory\",\n                  \"docs::human_name\": \"Memory\"\n                }\n              },\n              {\n                \"description\": \"Metrics related to network utilization.\",\n                \"const\": \"network\",\n                \"_metadata\": {\n                  \"logical_name\": \"Network\",\n                  \"docs::human_name\": \"Network\"\n                }\n              }\n            ],\n            \"unevaluatedProperties\": false,\n            \"_metadata\": {\n              \"docs::enum_tagging\": \"external\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"cgroups\",\n              \"cpu\",\n              \"disk\",\n              \"filesystem\",\n              \"load\",\n              \"host\",\n              \"memory\",\n              \"network\"\n            ],\n            \"docs::human_name\": \"Collectors\"\n          }\n        },\n        \"disk\": {\n          \"description\": \"Options for the disk metrics collector.\",\n          \"default\": {\n            \"devices\": {\n              \"includes\": null,\n              \"excludes\": null\n            }\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"devices\": {\n              \"description\": \"Lists of device name patterns to include or exclude in gathering\\nI/O utilization metrics.\",\n              \"default\": {\n                \"includes\": [\n                  \"*\"\n                ],\n                \"excludes\": null\n              },\n              \"$ref\": \"#/definitions/vector::sources::host_metrics::FilterList\",\n              \"_metadata\": {\n                \"docs::examples\": {\n                  \"includes\": [\n                    \"sda\"\n                  ],\n                  \"excludes\": [\n                    \"dm-*\"\n                  ]\n                },\n                \"docs::human_name\": \"Devices\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Disk\"\n          }\n        },\n        \"filesystem\": {\n          \"description\": \"Options for the filesystem metrics collector.\",\n          \"default\": {\n            \"devices\": {\n              \"includes\": null,\n              \"excludes\": null\n            },\n            \"filesystems\": {\n              \"includes\": null,\n              \"excludes\": null\n            },\n            \"mountpoints\": {\n              \"includes\": null,\n              \"excludes\": null\n            }\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"devices\": {\n              \"description\": \"Lists of device name patterns to include or exclude in gathering\\nusage metrics.\",\n              \"default\": {\n                \"includes\": [\n                  \"*\"\n                ],\n                \"excludes\": null\n              },\n              \"$ref\": \"#/definitions/vector::sources::host_metrics::FilterList\",\n              \"_metadata\": {\n                \"docs::examples\": {\n                  \"includes\": [\n                    \"sda\"\n                  ],\n                  \"excludes\": [\n                    \"dm-*\"\n                  ]\n                },\n                \"docs::human_name\": \"Devices\"\n              }\n            },\n            \"filesystems\": {\n              \"description\": \"Lists of filesystem name patterns to include or exclude in gathering\\nusage metrics.\",\n              \"default\": {\n                \"includes\": [\n                  \"*\"\n                ],\n                \"excludes\": null\n              },\n              \"$ref\": \"#/definitions/vector::sources::host_metrics::FilterList\",\n              \"_metadata\": {\n                \"docs::examples\": {\n                  \"includes\": [\n                    \"ntfs\"\n                  ],\n                  \"excludes\": [\n                    \"ext*\"\n                  ]\n                },\n                \"docs::human_name\": \"Filesystems\"\n              }\n            },\n            \"mountpoints\": {\n              \"description\": \"Lists of mount point path patterns to include or exclude in gathering\\nusage metrics.\",\n              \"default\": {\n                \"includes\": [\n                  \"*\"\n                ],\n                \"excludes\": null\n              },\n              \"$ref\": \"#/definitions/vector::sources::host_metrics::FilterList\",\n              \"_metadata\": {\n                \"docs::examples\": {\n                  \"includes\": [\n                    \"/home\"\n                  ],\n                  \"excludes\": [\n                    \"/raid*\"\n                  ]\n                },\n                \"docs::human_name\": \"Mountpoints\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Filesystem\"\n          }\n        },\n        \"namespace\": {\n          \"description\": \"Overrides the default namespace for the metrics emitted by the source.\",\n          \"default\": \"host\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Namespace\"\n          }\n        },\n        \"network\": {\n          \"description\": \"Options for the network metrics collector.\",\n          \"default\": {\n            \"devices\": {\n              \"includes\": null,\n              \"excludes\": null\n            }\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"devices\": {\n              \"description\": \"Lists of device name patterns to include or exclude in gathering\\nnetwork utilization metrics.\",\n              \"default\": {\n                \"includes\": [\n                  \"*\"\n                ],\n                \"excludes\": null\n              },\n              \"$ref\": \"#/definitions/vector::sources::host_metrics::FilterList\",\n              \"_metadata\": {\n                \"docs::examples\": {\n                  \"includes\": [\n                    \"sda\"\n                  ],\n                  \"excludes\": [\n                    \"dm-*\"\n                  ]\n                },\n                \"docs::human_name\": \"Devices\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Network\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between metric gathering, in seconds.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"host_metrics\"\n      }\n    },\n    \"vector::sources::http_client::client::HttpClientConfig\": {\n      \"description\": \"Configuration for the `http_client` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"auth\": {\n          \"description\": \"HTTP Authentication.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Decoder to use on the HTTP responses.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"endpoint\": {\n          \"title\": \"The HTTP endpoint to collect events from.\",\n          \"description\": \"The full path must be specified.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"http://127.0.0.1:9898/logs\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"framing\": {\n          \"description\": \"Framing to use in the decoding.\",\n          \"default\": {\n            \"method\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"headers\": {\n          \"title\": \"Headers to apply to the HTTP requests.\",\n          \"description\": \"One or more values for the same header can be provided.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::additional_props_description\": \"An HTTP request header and it's value(s).\",\n            \"docs::examples\": {\n              \"X-My-Custom-Header\": [\n                \"a\",\n                \"vector\",\n                \"of\",\n                \"values\"\n              ],\n              \"Accept\": [\n                \"text/plain\",\n                \"text/html\"\n              ]\n            },\n            \"docs::human_name\": \"Headers\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"method\": {\n          \"description\": \"Specifies the method of the HTTP request.\",\n          \"default\": \"GET\",\n          \"$ref\": \"#/definitions/vector::sources::util::http::method::HttpMethod\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Method\"\n          }\n        },\n        \"query\": {\n          \"title\": \"Custom parameters for the HTTP request query string.\",\n          \"description\": \"One or more values for the same parameter key can be provided.\\n\\nThe parameters provided in this option are appended to any parameters\\nmanually provided in the `endpoint` option.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::additional_props_description\": \"A query string parameter and it's value(s).\",\n            \"docs::examples\": {\n              \"fruit\": [\n                \"mango\",\n                \"papaya\",\n                \"kiwi\"\n              ],\n              \"field\": [\n                \"value\"\n              ]\n            },\n            \"docs::human_name\": \"Query\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between scrapes. Requests are run concurrently so if a scrape takes longer\\nthan the interval a new scrape will be started. This can take extra resources, set the timeout\\nto a value lower than the scrape interval to prevent this from happening.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        },\n        \"scrape_timeout_secs\": {\n          \"description\": \"The timeout for each scrape request.\",\n          \"default\": 5.0,\n          \"$ref\": \"#/definitions/serde_with::DurationFractionalSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Timeout\"\n          }\n        },\n        \"tls\": {\n          \"description\": \"TLS configuration.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"http_client\"\n      }\n    },\n    \"vector::sources::http_server::HttpConfig\": {\n      \"description\": \"Configuration for the `http` source.\",\n      \"$ref\": \"#/definitions/vector::sources::http_server::SimpleHttpConfig\",\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"http\",\n        \"deprecated\": true\n      }\n    },\n    \"vector::sources::http_server::SimpleHttpConfig\": {\n      \"description\": \"Configuration for the `http_server` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The socket address to listen for connections on.\",\n          \"description\": \"It _must_ include a port.\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"0.0.0.0:80\",\n              \"localhost:80\"\n            ],\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::sources::util::http::auth::HttpSourceAuthConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Configures how events are decoded from raw bytes.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Uses the raw bytes as-is.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"codec\"\n                  ],\n                  \"properties\": {\n                    \"codec\": {\n                      \"description\": \"Uses the raw bytes as-is.\",\n                      \"const\": \"bytes\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Codec\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Bytes\",\n                    \"docs::human_name\": \"Bytes\"\n                  }\n                },\n                {\n                  \"title\": \"Decodes the raw bytes as [JSON][json].\",\n                  \"description\": \"[json]: https://www.json.org/\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Config used to build a `JsonDeserializer`.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"json\": {\n                          \"description\": \"JSON-specific decoding options.\",\n                          \"default\": {\n                            \"lossy\": true\n                          },\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"lossy\": {\n                              \"title\": \"Determines whether or not to replace invalid UTF-8 sequences instead of failing.\",\n                              \"description\": \"When true, invalid UTF-8 sequences are replaced with the [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\\n\\n[U+FFFD]: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\",\n                              \"default\": true,\n                              \"type\": \"boolean\",\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Lossy\"\n                              }\n                            }\n                          },\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::human_name\": \"JSON\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"codec\"\n                      ],\n                      \"properties\": {\n                        \"codec\": {\n                          \"title\": \"Decodes the raw bytes as [JSON][json].\",\n                          \"description\": \"[json]: https://www.json.org/\",\n                          \"const\": \"json\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Codec\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Json\",\n                    \"docs::human_name\": \"JSON\"\n                  }\n                },\n                {\n                  \"title\": \"Decodes the raw bytes as [protobuf][protobuf].\",\n                  \"description\": \"[protobuf]: https://protobuf.dev/\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Config used to build a `ProtobufDeserializer`.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"protobuf\": {\n                          \"description\": \"Protobuf-specific decoding options.\",\n                          \"default\": {\n                            \"desc_file\": \"\",\n                            \"message_type\": \"\"\n                          },\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"desc_file\",\n                            \"message_type\"\n                          ],\n                          \"properties\": {\n                            \"desc_file\": {\n                              \"description\": \"Path to desc file\",\n                              \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Desc File\"\n                              }\n                            },\n                            \"message_type\": {\n                              \"description\": \"message type. e.g package.message\",\n                              \"type\": \"string\",\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Message Type\"\n                              }\n                            }\n                          },\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Protobuf\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"codec\"\n                      ],\n                      \"properties\": {\n                        \"codec\": {\n                          \"title\": \"Decodes the raw bytes as [protobuf][protobuf].\",\n                          \"description\": \"[protobuf]: https://protobuf.dev/\",\n                          \"const\": \"protobuf\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Codec\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Protobuf\",\n                    \"docs::human_name\": \"Protobuf\"\n                  }\n                },\n                {\n                  \"title\": \"Decodes the raw bytes as a Syslog message.\",\n                  \"description\": \"Decodes either as the [RFC 3164][rfc3164]-style format (\\\"old\\\" style) or the\\n[RFC 5424][rfc5424]-style format (\\\"new\\\" style, includes structured data).\\n\\n[rfc3164]: https://www.ietf.org/rfc/rfc3164.txt\\n[rfc5424]: https://www.ietf.org/rfc/rfc5424.txt\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Config used to build a `SyslogDeserializer`.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"syslog\": {\n                          \"description\": \"Syslog-specific decoding options.\",\n                          \"default\": {\n                            \"lossy\": true\n                          },\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"lossy\": {\n                              \"title\": \"Determines whether or not to replace invalid UTF-8 sequences instead of failing.\",\n                              \"description\": \"When true, invalid UTF-8 sequences are replaced with the [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\\n\\n[U+FFFD]: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\",\n                              \"default\": true,\n                              \"type\": \"boolean\",\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Lossy\"\n                              }\n                            }\n                          },\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Syslog\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"codec\"\n                      ],\n                      \"properties\": {\n                        \"codec\": {\n                          \"title\": \"Decodes the raw bytes as a Syslog message.\",\n                          \"description\": \"Decodes either as the [RFC 3164][rfc3164]-style format (\\\"old\\\" style) or the\\n[RFC 5424][rfc5424]-style format (\\\"new\\\" style, includes structured data).\\n\\n[rfc3164]: https://www.ietf.org/rfc/rfc3164.txt\\n[rfc5424]: https://www.ietf.org/rfc/rfc5424.txt\",\n                          \"const\": \"syslog\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Codec\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Syslog\",\n                    \"docs::human_name\": \"Syslog\"\n                  }\n                },\n                {\n                  \"title\": \"Decodes the raw bytes as [native Protocol Buffers format][vector_native_protobuf].\",\n                  \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_protobuf]: https://github.com/vectordotdev/vector/blob/master/lib/vector-core/proto/event.proto\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"codec\"\n                  ],\n                  \"properties\": {\n                    \"codec\": {\n                      \"title\": \"Decodes the raw bytes as [native Protocol Buffers format][vector_native_protobuf].\",\n                      \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_protobuf]: https://github.com/vectordotdev/vector/blob/master/lib/vector-core/proto/event.proto\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n                      \"const\": \"native\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Codec\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Native\",\n                    \"docs::human_name\": \"Native\"\n                  }\n                },\n                {\n                  \"title\": \"Decodes the raw bytes as [native JSON format][vector_native_json].\",\n                  \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_json]: https://github.com/vectordotdev/vector/blob/master/lib/codecs/tests/data/native_encoding/schema.cue\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Config used to build a `NativeJsonDeserializer`.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"native_json\": {\n                          \"description\": \"Vector's native JSON-specific decoding options.\",\n                          \"default\": {\n                            \"lossy\": true\n                          },\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"lossy\": {\n                              \"title\": \"Determines whether or not to replace invalid UTF-8 sequences instead of failing.\",\n                              \"description\": \"When true, invalid UTF-8 sequences are replaced with the [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\\n\\n[U+FFFD]: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\",\n                              \"default\": true,\n                              \"type\": \"boolean\",\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Lossy\"\n                              }\n                            }\n                          },\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Native JSON\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"codec\"\n                      ],\n                      \"properties\": {\n                        \"codec\": {\n                          \"title\": \"Decodes the raw bytes as [native JSON format][vector_native_json].\",\n                          \"description\": \"This codec is **[experimental][experimental]**.\\n\\n[vector_native_json]: https://github.com/vectordotdev/vector/blob/master/lib/codecs/tests/data/native_encoding/schema.cue\\n[experimental]: https://vector.dev/highlights/2022-03-31-native-event-codecs\",\n                          \"const\": \"native_json\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Codec\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"NativeJson\",\n                    \"docs::human_name\": \"Native JSON\"\n                  }\n                },\n                {\n                  \"title\": \"Decodes the raw bytes as a [GELF][gelf] message.\",\n                  \"description\": \"This codec is experimental for the following reason:\\n\\nThe GELF specification is more strict than the actual Graylog receiver.\\nVector's decoder currently adheres more strictly to the GELF spec, with\\nthe exception that some characters such as `@`  are allowed in field names.\\n\\nOther GELF codecs such as Loki's, use a [Go SDK][implementation] that is maintained\\nby Graylog, and is much more relaxed than the GELF spec.\\n\\nGoing forward, Vector will use that [Go SDK][implementation] as the reference implementation, which means\\nthe codec may continue to relax the enforcement of specification.\\n\\n[gelf]: https://docs.graylog.org/docs/gelf\\n[implementation]: https://github.com/Graylog2/go-gelf/blob/v2/gelf/reader.go\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Config used to build a `GelfDeserializer`.\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"gelf\": {\n                          \"description\": \"GELF-specific decoding options.\",\n                          \"default\": {\n                            \"lossy\": true\n                          },\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"lossy\": {\n                              \"title\": \"Determines whether or not to replace invalid UTF-8 sequences instead of failing.\",\n                              \"description\": \"When true, invalid UTF-8 sequences are replaced with the [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\\n\\n[U+FFFD]: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\",\n                              \"default\": true,\n                              \"type\": \"boolean\",\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Lossy\"\n                              }\n                            }\n                          },\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::human_name\": \"GELF\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"codec\"\n                      ],\n                      \"properties\": {\n                        \"codec\": {\n                          \"title\": \"Decodes the raw bytes as a [GELF][gelf] message.\",\n                          \"description\": \"This codec is experimental for the following reason:\\n\\nThe GELF specification is more strict than the actual Graylog receiver.\\nVector's decoder currently adheres more strictly to the GELF spec, with\\nthe exception that some characters such as `@`  are allowed in field names.\\n\\nOther GELF codecs such as Loki's, use a [Go SDK][implementation] that is maintained\\nby Graylog, and is much more relaxed than the GELF spec.\\n\\nGoing forward, Vector will use that [Go SDK][implementation] as the reference implementation, which means\\nthe codec may continue to relax the enforcement of specification.\\n\\n[gelf]: https://docs.graylog.org/docs/gelf\\n[implementation]: https://github.com/Graylog2/go-gelf/blob/v2/gelf/reader.go\",\n                          \"const\": \"gelf\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Codec\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Gelf\",\n                    \"docs::human_name\": \"GELF\"\n                  }\n                },\n                {\n                  \"title\": \"Decodes the raw bytes as as an [Apache Avro][apache_avro] message.\",\n                  \"description\": \"[apache_avro]: https://avro.apache.org/\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"avro\",\n                    \"codec\"\n                  ],\n                  \"properties\": {\n                    \"avro\": {\n                      \"description\": \"Apache Avro-specific encoder options.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"schema\",\n                        \"strip_schema_id_prefix\"\n                      ],\n                      \"properties\": {\n                        \"schema\": {\n                          \"description\": \"The Avro schema definition.\\nPlease note that the following [`apache_avro::types::Value`] variants are currently *not* supported:\\n* `Date`\\n* `Decimal`\\n* `Duration`\\n* `Fixed`\\n* `TimeMillis`\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::examples\": \"{ \\\"type\\\": \\\"record\\\", \\\"name\\\": \\\"log\\\", \\\"fields\\\": [{ \\\"name\\\": \\\"message\\\", \\\"type\\\": \\\"string\\\" }] }\",\n                            \"docs::additional_props_description\": \"Supports most avro data types, unsupported data types includes\\n        [\\\"decimal\\\", \\\"duration\\\", \\\"local-timestamp-millis\\\", \\\"local-timestamp-micros\\\"]\",\n                            \"docs::human_name\": \"Schema\"\n                          }\n                        },\n                        \"strip_schema_id_prefix\": {\n                          \"description\": \"For Avro datum encoded in Kafka messages, the bytes are prefixed with the schema ID.  Set this to true to strip the schema ID prefix.\\nAccording to [Confluent Kafka's document](https://docs.confluent.io/platform/current/schema-registry/fundamentals/serdes-develop/index.html#wire-format).\",\n                          \"type\": \"boolean\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Strip Schema ID Prefix\"\n                          }\n                        }\n                      },\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Avro\"\n                      }\n                    },\n                    \"codec\": {\n                      \"title\": \"Decodes the raw bytes as as an [Apache Avro][apache_avro] message.\",\n                      \"description\": \"[apache_avro]: https://avro.apache.org/\",\n                      \"const\": \"avro\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Codec\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Avro\",\n                    \"docs::human_name\": \"Avro\"\n                  }\n                },\n                {\n                  \"title\": \"Decodes the raw bytes as a string and passes them as input to a [VRL][vrl] program.\",\n                  \"description\": \"[vrl]: https://vector.dev/docs/reference/vrl\",\n                  \"allOf\": [\n                    {\n                      \"description\": \"Config used to build a `VrlDeserializer`.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"vrl\"\n                      ],\n                      \"properties\": {\n                        \"vrl\": {\n                          \"description\": \"VRL-specific decoding options.\",\n                          \"type\": \"object\",\n                          \"required\": [\n                            \"source\"\n                          ],\n                          \"properties\": {\n                            \"source\": {\n                              \"title\": \"The [Vector Remap Language][vrl] (VRL) program to execute for each event.\\nNote that the final contents of the `.` target will be used as the decoding result.\\nCompilation error or use of 'abort' in a program will result in a decoding error.\",\n                              \"description\": \"[vrl]: https://vector.dev/docs/reference/vrl\",\n                              \"type\": \"string\",\n                              \"_metadata\": {\n                                \"docs::human_name\": \"Source\"\n                              }\n                            },\n                            \"timezone\": {\n                              \"title\": \"The name of the timezone to apply to timestamp conversions that do not contain an explicit\\ntime zone. The time zone name may be any name in the [TZ database][tz_database], or `local`\\nto indicate system local time.\",\n                              \"description\": \"If not set, `local` will be used.\\n\\n[tz_database]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\",\n                              \"default\": null,\n                              \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n                              \"_metadata\": {\n                                \"docs::advanced\": true,\n                                \"docs::human_name\": \"Timezone\"\n                              }\n                            }\n                          },\n                          \"unevaluatedProperties\": false,\n                          \"_metadata\": {\n                            \"docs::human_name\": \"VRL\"\n                          }\n                        }\n                      }\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"codec\"\n                      ],\n                      \"properties\": {\n                        \"codec\": {\n                          \"title\": \"Decodes the raw bytes as a string and passes them as input to a [VRL][vrl] program.\",\n                          \"description\": \"[vrl]: https://vector.dev/docs/reference/vrl\",\n                          \"const\": \"vrl\",\n                          \"_metadata\": {\n                            \"docs::human_name\": \"Codec\"\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"_metadata\": {\n                    \"logical_name\": \"Vrl\",\n                    \"docs::human_name\": \"VRL\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tag_description\": \"The codec to use for decoding events.\",\n                \"docs::enum_tagging\": \"internal\",\n                \"docs::enum_tag_field\": \"codec\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"encoding\": {\n          \"title\": \"The expected encoding of received data.\",\n          \"description\": \"For `json` and `ndjson` encodings, the fields of the JSON objects are output as separate fields.\",\n          \"default\": null,\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Content encoding.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Plaintext.\",\n                  \"const\": \"text\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Text\",\n                    \"docs::human_name\": \"Text\"\n                  }\n                },\n                {\n                  \"description\": \"Newline-delimited JSON.\",\n                  \"const\": \"ndjson\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Ndjson\",\n                    \"docs::human_name\": \"NDJSON\"\n                  }\n                },\n                {\n                  \"description\": \"JSON.\",\n                  \"const\": \"json\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Json\",\n                    \"docs::human_name\": \"JSON\"\n                  }\n                },\n                {\n                  \"description\": \"Binary.\",\n                  \"const\": \"binary\",\n                  \"_metadata\": {\n                    \"logical_name\": \"Binary\",\n                    \"docs::human_name\": \"Binary\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Encoding\"\n          }\n        },\n        \"framing\": {\n          \"$ref\": \"#/definitions/core::option::Option<codecs::decoding::FramingConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"headers\": {\n          \"title\": \"A list of HTTP headers to include in the log event.\",\n          \"description\": \"Accepts the wildcard (`*`) character for headers matching a specified pattern.\\n\\nSpecifying \\\"*\\\" results in all headers included in the log event.\\n\\nThese override any values included in the JSON payload with conflicting names.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"User-Agent\",\n              \"X-My-Custom-Header\",\n              \"X-*\",\n              \"*\"\n            ],\n            \"docs::human_name\": \"Headers\"\n          }\n        },\n        \"host_key\": {\n          \"description\": \"If set, the name of the log field used to add the remote IP to each event\",\n          \"default\": \"\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::examples\": \"hostname\",\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"keepalive\": {\n          \"description\": \"Configuration of HTTP server keepalive parameters.\",\n          \"default\": {\n            \"max_connection_age_secs\": 300,\n            \"max_connection_age_jitter_factor\": 0.1\n          },\n          \"$ref\": \"#/definitions/vector::http::KeepaliveConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"method\": {\n          \"description\": \"Specifies the action of the HTTP request.\",\n          \"default\": \"POST\",\n          \"$ref\": \"#/definitions/vector::sources::util::http::method::HttpMethod\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Method\"\n          }\n        },\n        \"path\": {\n          \"description\": \"The URL path on which log event POST requests are sent.\",\n          \"default\": \"/\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"/event/path\",\n              \"/logs\"\n            ],\n            \"docs::human_name\": \"Path\"\n          }\n        },\n        \"path_key\": {\n          \"description\": \"The event key in which the requested URL path used to send the request is stored.\",\n          \"default\": \"path\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::examples\": \"vector_http_path\",\n            \"docs::human_name\": \"Path Key\"\n          }\n        },\n        \"query_parameters\": {\n          \"title\": \"A list of URL query parameters to include in the log event.\",\n          \"description\": \"These override any values included in the body with conflicting names.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"application\",\n              \"source\"\n            ],\n            \"docs::human_name\": \"Query Parameters\"\n          }\n        },\n        \"response_code\": {\n          \"description\": \"Specifies the HTTP response status code that will be returned on successful requests.\",\n          \"default\": 200,\n          \"type\": \"integer\",\n          \"maximum\": 65535.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::examples\": 202,\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Response Code\"\n          }\n        },\n        \"strict_path\": {\n          \"title\": \"Whether or not to treat the configured `path` as an absolute path.\",\n          \"description\": \"If set to `true`, only requests using the exact URL path specified in `path` are accepted. Otherwise,\\nrequests sent to a URL path that starts with the value of `path` are accepted.\\n\\nWith `strict_path` set to `false` and `path` set to `\\\"\\\"`, the configured HTTP source accepts requests from\\nany URL path.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Strict Path\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"http_server\"\n      }\n    },\n    \"vector::sources::internal_logs::InternalLogsConfig\": {\n      \"description\": \"Configuration for the `internal_logs` source.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"host_key\": {\n          \"title\": \"Overrides the name of the log field used to add the current hostname to each event.\",\n          \"description\": \"By default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n          \"default\": \"host\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Host Key\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"pid_key\": {\n          \"title\": \"Overrides the name of the log field used to add the current process ID to each event.\",\n          \"description\": \"By default, `\\\"pid\\\"` is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\",\n          \"default\": \"pid\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::human_name\": \"PID Key\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"internal_logs\"\n      }\n    },\n    \"vector::sources::internal_metrics::InternalMetricsConfig\": {\n      \"description\": \"Configuration for the `internal_metrics` source.\",\n      \"default\": {\n        \"scrape_interval_secs\": 1.0,\n        \"tags\": {\n          \"host_key\": \"host\",\n          \"pid_key\": null\n        },\n        \"namespace\": \"vector\"\n      },\n      \"type\": \"object\",\n      \"properties\": {\n        \"namespace\": {\n          \"description\": \"Overrides the default namespace for the metrics emitted by the source.\",\n          \"default\": \"vector\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Namespace\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between metric gathering, in seconds.\",\n          \"default\": 1.0,\n          \"$ref\": \"#/definitions/serde_with::DurationFractionalSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        },\n        \"tags\": {\n          \"description\": \"Tag configuration for the `internal_metrics` source.\",\n          \"default\": {\n            \"host_key\": \"host\",\n            \"pid_key\": null\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"host_key\": {\n              \"title\": \"Overrides the name of the tag used to add the peer host to each metric.\",\n              \"description\": \"The value is the peer host's address, including the port. For example, `1.2.3.4:9000`.\\n\\nBy default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n              \"default\": \"host\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Host Key\"\n              }\n            },\n            \"pid_key\": {\n              \"title\": \"Sets the name of the tag to use to add the current process ID to each metric.\",\n              \"description\": \"By default, this is not set and the tag is not automatically added.\",\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": \"pid\",\n                \"docs::human_name\": \"PID Key\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Tags\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"internal_metrics\"\n      }\n    },\n    \"vector::sources::journald::JournaldConfig\": {\n      \"description\": \"Configuration for the `journald` source.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"batch_size\": {\n          \"title\": \"The systemd journal is read in batches, and a checkpoint is set at the end of each batch.\",\n          \"description\": \"This option limits the size of the batch.\",\n          \"default\": 16,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"events\",\n            \"docs::human_name\": \"Batch Size\"\n          }\n        },\n        \"current_boot_only\": {\n          \"description\": \"Only include entries that occurred after the current boot of the system.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Current Boot Only\"\n          }\n        },\n        \"data_dir\": {\n          \"title\": \"The directory used to persist file checkpoint positions.\",\n          \"description\": \"By default, the [global `data_dir` option][global_data_dir] is used.\\nMake sure the running user has write permissions to this directory.\\n\\nIf this directory is specified, then Vector will attempt to create it.\\n\\n[global_data_dir]: https://vector.dev/docs/reference/configuration/global-options/#data_dir\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::examples\": \"/var/lib/vector\",\n            \"docs::human_name\": \"Data Directory\"\n          }\n        },\n        \"emit_cursor\": {\n          \"title\": \"Whether to emit the [__CURSOR field][cursor]. See also [sd_journal_get_cursor][get_cursor].\",\n          \"description\": \"[cursor]: https://www.freedesktop.org/software/systemd/man/latest/systemd.journal-fields.html#Address%20Fields\\n[get_cursor]: https://www.freedesktop.org/software/systemd/man/latest/sd_journal_get_cursor.html\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Emit Cursor\"\n          }\n        },\n        \"exclude_matches\": {\n          \"title\": \"A list of sets of field/value pairs that, if any are present in a journal entry,\\nexcludes the entry from this source.\",\n          \"description\": \"If `exclude_units` is specified, it is merged into this list.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"uniqueItems\": true\n          },\n          \"_metadata\": {\n            \"docs::additional_props_description\": \"The set of field values to match in journal entries that are to be excluded.\",\n            \"docs::examples\": {\n              \"_TRANSPORT\": [\n                \"kernel\"\n              ],\n              \"_SYSTEMD_UNIT\": [\n                \"sshd.service\",\n                \"ntpd.service\"\n              ]\n            },\n            \"docs::human_name\": \"Exclude Matches\"\n          }\n        },\n        \"exclude_units\": {\n          \"title\": \"A list of unit names to exclude from monitoring.\",\n          \"description\": \"Unit names lacking a `.` have `.service` appended to make them a valid service unit\\nname.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"badservice\",\n              \"sysinit.target\"\n            ],\n            \"docs::human_name\": \"Exclude Units\"\n          }\n        },\n        \"extra_args\": {\n          \"title\": \"A list of extra command line arguments to pass to `journalctl`.\",\n          \"description\": \"If specified, it is merged to the command line arguments as-is.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"--merge\",\n            \"docs::human_name\": \"Extra Args\"\n          }\n        },\n        \"include_matches\": {\n          \"title\": \"A list of sets of field/value pairs to monitor.\",\n          \"description\": \"If empty or not present, all journal fields are accepted.\\n\\nIf `include_units` is specified, it is merged into this list.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"uniqueItems\": true\n          },\n          \"_metadata\": {\n            \"docs::additional_props_description\": \"The set of field values to match in journal entries that are to be included.\",\n            \"docs::examples\": {\n              \"_SYSTEMD_UNIT\": [\n                \"sshd.service\",\n                \"ntpd.service\"\n              ],\n              \"_TRANSPORT\": [\n                \"kernel\"\n              ]\n            },\n            \"docs::human_name\": \"Include Matches\"\n          }\n        },\n        \"include_units\": {\n          \"title\": \"A list of unit names to monitor.\",\n          \"description\": \"If empty or not present, all units are accepted.\\n\\nUnit names lacking a `.` have `.service` appended to make them a valid service unit name.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"ntpd\",\n              \"sysinit.target\"\n            ],\n            \"docs::human_name\": \"Include Units\"\n          }\n        },\n        \"journal_directory\": {\n          \"title\": \"The full path of the journal directory.\",\n          \"description\": \"If not set, `journalctl` uses the default system journal path.\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Journal Directory\"\n          }\n        },\n        \"journal_namespace\": {\n          \"title\": \"The [journal namespace][journal-namespace].\",\n          \"description\": \"This value is passed to `journalctl` through the [`--namespace` option][journalctl-namespace-option].\\nIf not set, `journalctl` uses the default namespace.\\n\\n[journal-namespace]: https://www.freedesktop.org/software/systemd/man/systemd-journald.service.html#Journal%20Namespaces\\n[journalctl-namespace-option]: https://www.freedesktop.org/software/systemd/man/journalctl.html#--namespace=NAMESPACE\",\n          \"default\": null,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Journal Namespace\"\n          }\n        },\n        \"journalctl_path\": {\n          \"title\": \"The full path of the `journalctl` executable.\",\n          \"description\": \"If not set, a search is done for the `journalctl` path.\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Journalctl Path\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"remap_priority\": {\n          \"title\": \"Enables remapping the `PRIORITY` field from an integer to string value.\",\n          \"description\": \"Has no effect unless the value of the field is already an integer.\",\n          \"default\": false,\n          \"deprecated\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"deprecated_message\": \"This option has been deprecated, use the `remap` transform and `to_syslog_level` function instead.\",\n            \"docs::human_name\": \"Remap Priority\"\n          }\n        },\n        \"since_now\": {\n          \"description\": \"Only include entries that appended to the journal after the entries have been read.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Since Now\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"journald\"\n      }\n    },\n    \"vector::sources::kafka::KafkaSourceConfig\": {\n      \"description\": \"Configuration for the `kafka` source.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"bootstrap_servers\",\n            \"group_id\",\n            \"topics\"\n          ],\n          \"properties\": {\n            \"acknowledgements\": {\n              \"title\": \"Controls how acknowledgements are handled by this source.\",\n              \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n              \"default\": {\n                \"enabled\": null\n              },\n              \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgements\"\n              }\n            },\n            \"auto_offset_reset\": {\n              \"title\": \"If offsets for consumer group do not exist, set them using this strategy.\",\n              \"description\": \"See the [librdkafka documentation](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md) for the `auto.offset.reset` option for further clarification.\",\n              \"default\": \"largest\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"smallest\",\n                  \"earliest\",\n                  \"beginning\",\n                  \"largest\",\n                  \"latest\",\n                  \"end\",\n                  \"error\"\n                ],\n                \"docs::human_name\": \"Auto Offset Reset\"\n              }\n            },\n            \"bootstrap_servers\": {\n              \"title\": \"A comma-separated list of Kafka bootstrap servers.\",\n              \"description\": \"These are the servers in a Kafka cluster that a client should use to bootstrap its connection to the cluster,\\nallowing discovery of all the other hosts in the cluster.\\n\\nMust be in the form of `host:port`, and comma-separated.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"10.14.22.123:9092,10.14.23.332:9092\",\n                \"docs::human_name\": \"Bootstrap Servers\"\n              }\n            },\n            \"commit_interval_ms\": {\n              \"description\": \"The frequency that the consumer offsets are committed (written) to offset storage.\",\n              \"default\": 5000,\n              \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  5000,\n                  10000\n                ],\n                \"docs::human_name\": \"Commit Interval\"\n              }\n            },\n            \"decoding\": {\n              \"description\": \"Configures how events are decoded from raw bytes.\",\n              \"default\": {\n                \"codec\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Decoding\"\n              }\n            },\n            \"drain_timeout_ms\": {\n              \"title\": \"Timeout to drain pending acknowledgements during shutdown or a Kafka\\nconsumer group rebalance.\",\n              \"description\": \"When Vector shuts down or the Kafka consumer group revokes partitions from this\\nconsumer, wait a maximum of `drain_timeout_ms` for the source to\\nprocess pending acknowledgements. Must be less than `session_timeout_ms`\\nto ensure the consumer is not excluded from the group during a rebalance.\\n\\nDefault value is half of `session_timeout_ms`.\",\n              \"type\": [\n                \"integer\",\n                \"null\"\n              ],\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::optional\": true,\n                \"docs::examples\": [\n                  2500,\n                  5000\n                ],\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Drain Timeout\"\n              }\n            },\n            \"fetch_wait_max_ms\": {\n              \"description\": \"Maximum time the broker may wait to fill the response.\",\n              \"default\": 100,\n              \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  50,\n                  100\n                ],\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Max Fetch Wait Time\"\n              }\n            },\n            \"framing\": {\n              \"title\": \"Framing configuration.\",\n              \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n              \"default\": {\n                \"method\": \"bytes\"\n              },\n              \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n              \"_metadata\": {\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Framing\"\n              }\n            },\n            \"group_id\": {\n              \"description\": \"The consumer group name to be used to consume events from Kafka.\",\n              \"type\": \"string\",\n              \"_metadata\": {\n                \"docs::examples\": \"consumer-group-name\",\n                \"docs::human_name\": \"Group ID\"\n              }\n            },\n            \"headers_key\": {\n              \"title\": \"Overrides the name of the log field used to add the headers to each event.\",\n              \"description\": \"The value is the headers of the Kafka message itself.\\n\\nBy default, `\\\"headers\\\"` is used.\",\n              \"default\": \"headers\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::examples\": \"headers\",\n                \"docs::human_name\": \"Headers Key\"\n              }\n            },\n            \"key_field\": {\n              \"title\": \"Overrides the name of the log field used to add the message key to each event.\",\n              \"description\": \"The value is the message key of the Kafka message itself.\\n\\nBy default, `\\\"message_key\\\"` is used.\",\n              \"default\": \"message_key\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::examples\": \"message_key\",\n                \"docs::human_name\": \"Key Field\"\n              }\n            },\n            \"librdkafka_options\": {\n              \"title\": \"Advanced options set directly on the underlying `librdkafka` client.\",\n              \"description\": \"See the [librdkafka documentation](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md) for details.\",\n              \"type\": [\n                \"object\",\n                \"null\"\n              ],\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::examples\": {\n                  \"fetch.error.backoff.ms\": \"1000\",\n                  \"socket.send.buffer.bytes\": \"100\",\n                  \"client.id\": \"${ENV_VAR}\"\n                },\n                \"docs::advanced\": true,\n                \"docs::additional_props_description\": \"A librdkafka configuration option.\",\n                \"docs::human_name\": \"Librdkafka Options\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n              \"default\": null,\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            },\n            \"metrics\": {\n              \"description\": \"Metrics (beta) configuration.\",\n              \"default\": {\n                \"topic_lag_metric\": false\n              },\n              \"type\": \"object\",\n              \"required\": [\n                \"topic_lag_metric\"\n              ],\n              \"properties\": {\n                \"topic_lag_metric\": {\n                  \"description\": \"Expose topic lag metrics for all topics and partitions. Metric names are `kafka_consumer_lag`.\",\n                  \"type\": \"boolean\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Topic Lag Metric\"\n                  }\n                }\n              },\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::human_name\": \"Metrics\"\n              }\n            },\n            \"offset_key\": {\n              \"title\": \"Overrides the name of the log field used to add the offset to each event.\",\n              \"description\": \"The value is the offset of the Kafka message itself.\\n\\nBy default, `\\\"offset\\\"` is used.\",\n              \"default\": \"offset\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::examples\": \"offset\",\n                \"docs::human_name\": \"Offset Key\"\n              }\n            },\n            \"partition_key\": {\n              \"title\": \"Overrides the name of the log field used to add the partition to each event.\",\n              \"description\": \"The value is the partition from which the Kafka message was consumed from.\\n\\nBy default, `\\\"partition\\\"` is used.\",\n              \"default\": \"partition\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::examples\": \"partition\",\n                \"docs::human_name\": \"Partition Key\"\n              }\n            },\n            \"session_timeout_ms\": {\n              \"description\": \"The Kafka session timeout.\",\n              \"default\": 10000,\n              \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  5000,\n                  10000\n                ],\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Session Timeout\"\n              }\n            },\n            \"socket_timeout_ms\": {\n              \"description\": \"Timeout for network requests.\",\n              \"default\": 60000,\n              \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  30000,\n                  60000\n                ],\n                \"docs::advanced\": true,\n                \"docs::human_name\": \"Socket Timeout\"\n              }\n            },\n            \"topic_key\": {\n              \"title\": \"Overrides the name of the log field used to add the topic to each event.\",\n              \"description\": \"The value is the topic from which the Kafka message was consumed from.\\n\\nBy default, `\\\"topic\\\"` is used.\",\n              \"default\": \"topic\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n              \"_metadata\": {\n                \"docs::examples\": \"topic\",\n                \"docs::human_name\": \"Topic Key\"\n              }\n            },\n            \"topics\": {\n              \"title\": \"The Kafka topics names to read events from.\",\n              \"description\": \"Regular expression syntax is supported if the topic begins with `^`.\",\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"^(prefix1|prefix2)-.+\",\n                  \"topic-1\",\n                  \"topic-2\"\n                ],\n                \"docs::human_name\": \"Topics\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Kafka authentication configuration.\",\n          \"$ref\": \"#/definitions/vector::kafka::KafkaAuthConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"kafka\"\n      }\n    },\n    \"vector::sources::kubernetes_logs::Config\": {\n      \"description\": \"Configuration for the `kubernetes_logs` source.\",\n      \"default\": {\n        \"extra_label_selector\": \"\",\n        \"extra_namespace_label_selector\": \"\",\n        \"self_node_name\": \"${VECTOR_SELF_NODE_NAME}\",\n        \"extra_field_selector\": \"\",\n        \"auto_partial_merge\": true,\n        \"data_dir\": null,\n        \"pod_annotation_fields\": {\n          \"pod_name\": \".kubernetes.pod_name\",\n          \"pod_namespace\": \".kubernetes.pod_namespace\",\n          \"pod_uid\": \".kubernetes.pod_uid\",\n          \"pod_ip\": \".kubernetes.pod_ip\",\n          \"pod_ips\": \".kubernetes.pod_ips\",\n          \"pod_labels\": \".kubernetes.pod_labels\",\n          \"pod_annotations\": \".kubernetes.pod_annotations\",\n          \"pod_node_name\": \".kubernetes.pod_node_name\",\n          \"pod_owner\": \".kubernetes.pod_owner\",\n          \"container_name\": \".kubernetes.container_name\",\n          \"container_id\": \".kubernetes.container_id\",\n          \"container_image\": \".kubernetes.container_image\",\n          \"container_image_id\": \".kubernetes.container_image_id\"\n        },\n        \"namespace_annotation_fields\": {\n          \"namespace_labels\": \".kubernetes.namespace_labels\"\n        },\n        \"node_annotation_fields\": {\n          \"node_labels\": \".kubernetes.node_labels\"\n        },\n        \"include_paths_glob_patterns\": [\n          \"**/*\"\n        ],\n        \"exclude_paths_glob_patterns\": [\n          \"**/*.gz\",\n          \"**/*.tmp\"\n        ],\n        \"read_from\": \"beginning\",\n        \"ignore_older_secs\": null,\n        \"max_read_bytes\": 2048,\n        \"oldest_first\": true,\n        \"max_line_bytes\": 32768,\n        \"fingerprint_lines\": 1,\n        \"glob_minimum_cooldown_ms\": 60000,\n        \"ingestion_timestamp_field\": null,\n        \"timezone\": null,\n        \"kube_config_file\": null,\n        \"use_apiserver_cache\": false,\n        \"delay_deletion_ms\": 60000,\n        \"log_namespace\": null,\n        \"internal_metrics\": {\n          \"include_file_tag\": false\n        },\n        \"rotate_wait_secs\": 9223372036854775807\n      },\n      \"type\": \"object\",\n      \"properties\": {\n        \"auto_partial_merge\": {\n          \"title\": \"Whether or not to automatically merge partial events.\",\n          \"description\": \"Partial events are messages that were split by the Kubernetes Container Runtime\\nlog driver.\",\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auto Partial Merge\"\n          }\n        },\n        \"data_dir\": {\n          \"title\": \"The directory used to persist file checkpoint positions.\",\n          \"description\": \"By default, the [global `data_dir` option][global_data_dir] is used.\\nMake sure the running user has write permissions to this directory.\\n\\nIf this directory is specified, then Vector will attempt to create it.\\n\\n[global_data_dir]: https://vector.dev/docs/reference/configuration/global-options/#data_dir\",\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::examples\": \"/var/local/lib/vector/\",\n            \"docs::human_name\": \"Data Directory\"\n          }\n        },\n        \"delay_deletion_ms\": {\n          \"title\": \"How long to delay removing metadata entries from the cache when a pod deletion event\\nevent is received from the watch stream.\",\n          \"description\": \"A longer delay allows for continued enrichment of logs after the originating Pod is\\nremoved. If relevant metadata has been removed, the log is forwarded un-enriched and a\\nwarning is emitted.\",\n          \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Delay Deletion\"\n          }\n        },\n        \"exclude_paths_glob_patterns\": {\n          \"description\": \"A list of glob patterns to exclude from reading the files.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/stdlib::PathBuf\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"**/exclude/**\",\n            \"docs::human_name\": \"Exclude Paths Glob Patterns\"\n          }\n        },\n        \"extra_field_selector\": {\n          \"title\": \"Specifies the [field selector][field_selector] to filter Pods with, to be used in addition\\nto the built-in [Node][node] filter.\",\n          \"description\": \"The built-in Node filter uses `self_node_name` to only watch Pods located on the same Node.\\n\\n[field_selector]: https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/\\n[node]: https://kubernetes.io/docs/concepts/architecture/nodes/\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"metadata.name!=pod-name-to-exclude\",\n              \"metadata.name!=pod-name-to-exclude,metadata.name=mypod\"\n            ],\n            \"docs::human_name\": \"Extra Field Selector\"\n          }\n        },\n        \"extra_label_selector\": {\n          \"title\": \"Specifies the [label selector][label_selector] to filter [Pods][pods] with, to be used in\\naddition to the built-in [exclude][exclude] filter.\",\n          \"description\": \"[label_selector]: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\\n[pods]: https://kubernetes.io/docs/concepts/workloads/pods/\\n[exclude]: https://vector.dev/docs/reference/configuration/sources/kubernetes_logs/#pod-exclusion\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"my_custom_label!=my_value\",\n              \"my_custom_label!=my_value,my_other_custom_label=my_value\"\n            ],\n            \"docs::human_name\": \"Extra Label Selector\"\n          }\n        },\n        \"extra_namespace_label_selector\": {\n          \"title\": \"Specifies the [label selector][label_selector] to filter [Namespaces][namespaces] with, to\\nbe used in addition to the built-in [exclude][exclude] filter.\",\n          \"description\": \"[label_selector]: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\\n[namespaces]: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\\n[exclude]: https://vector.dev/docs/reference/configuration/sources/kubernetes_logs/#namespace-exclusion\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"my_custom_label!=my_value\",\n              \"my_custom_label!=my_value,my_other_custom_label=my_value\"\n            ],\n            \"docs::human_name\": \"Extra Namespace Label Selector\"\n          }\n        },\n        \"fingerprint_lines\": {\n          \"title\": \"The number of lines to read for generating the checksum.\",\n          \"description\": \"If your files share a common header that is not always a fixed size,\\n\\nIf the file has less than this amount of lines, it won’t be read at all.\",\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"lines\",\n            \"docs::human_name\": \"Fingerprint Lines\"\n          }\n        },\n        \"glob_minimum_cooldown_ms\": {\n          \"title\": \"The interval at which the file system is polled to identify new files to read from.\",\n          \"description\": \"This is quite efficient, yet might still create some load on the\\nfile system; in addition, it is currently coupled with checksum dumping\\nin the underlying file server, so setting it too low may introduce\\na significant overhead.\",\n          \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Glob Minimum Cooldown\"\n          }\n        },\n        \"ignore_older_secs\": {\n          \"description\": \"Ignore files with a data modification date older than the specified number of seconds.\",\n          \"default\": null,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"seconds\",\n            \"docs::examples\": 600,\n            \"docs::human_name\": \"Ignore Files Older Than\"\n          }\n        },\n        \"include_paths_glob_patterns\": {\n          \"description\": \"A list of glob patterns to include while reading the files.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/stdlib::PathBuf\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"**/include/**\",\n            \"docs::human_name\": \"Include Paths Glob Patterns\"\n          }\n        },\n        \"ingestion_timestamp_field\": {\n          \"title\": \"Overrides the name of the log field used to add the ingestion timestamp to each event.\",\n          \"description\": \"This is useful to compute the latency between important event processing\\nstages. For example, the time delta between when a log line was written and when it was\\nprocessed by the `kubernetes_logs` source.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalTargetPath>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \".ingest_timestamp\",\n              \"ingest_ts\"\n            ],\n            \"docs::human_name\": \"Ingestion Timestamp Field\"\n          }\n        },\n        \"internal_metrics\": {\n          \"description\": \"Configuration of internal metrics for file-based components.\",\n          \"default\": {\n            \"include_file_tag\": false\n          },\n          \"$ref\": \"#/definitions/vector::internal_events::file::FileInternalMetricsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Internal Metrics\"\n          }\n        },\n        \"kube_config_file\": {\n          \"title\": \"Optional path to a readable [kubeconfig][kubeconfig] file.\",\n          \"description\": \"If not set, a connection to Kubernetes is made using the in-cluster configuration.\\n\\n[kubeconfig]: https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\",\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::examples\": \"/path/to/.kube/config\",\n            \"docs::human_name\": \"Kube Config File\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"max_line_bytes\": {\n          \"title\": \"The maximum number of bytes a line can contain before being discarded.\",\n          \"description\": \"This protects against malformed lines or tailing incorrect files.\",\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Line Bytes\"\n          }\n        },\n        \"max_read_bytes\": {\n          \"title\": \"Max amount of bytes to read from a single file before switching over to the next file.\\n**Note:** This does not apply when `oldest_first` is `true`.\",\n          \"description\": \"This allows distributing the reads more or less evenly across\\nthe files.\",\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::type_unit\": \"bytes\",\n            \"docs::human_name\": \"Max Read Bytes\"\n          }\n        },\n        \"namespace_annotation_fields\": {\n          \"description\": \"Configuration for how the events are enriched with Namespace metadata.\",\n          \"default\": {\n            \"namespace_labels\": \".kubernetes.namespace_labels\"\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"namespace_labels\": {\n              \"title\": \"Event field for the Namespace's labels.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.ns_labels\",\n                  \"k8s.ns_labels\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Namespace Labels\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Namespace Annotation Fields\"\n          }\n        },\n        \"node_annotation_fields\": {\n          \"description\": \"Configuration for how the events are enriched with Node metadata.\",\n          \"default\": {\n            \"node_labels\": \".kubernetes.node_labels\"\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"node_labels\": {\n              \"title\": \"Event field for the Node's labels.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.node_labels\",\n                  \"k8s.node_labels\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Node Labels\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Node Annotation Fields\"\n          }\n        },\n        \"oldest_first\": {\n          \"description\": \"Instead of balancing read capacity fairly across all watched files, prioritize draining the oldest files before moving on to read data from more recent files.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Oldest First\"\n          }\n        },\n        \"pod_annotation_fields\": {\n          \"description\": \"Configuration for how the events are enriched with Pod metadata.\",\n          \"default\": {\n            \"pod_name\": \".kubernetes.pod_name\",\n            \"pod_namespace\": \".kubernetes.pod_namespace\",\n            \"pod_uid\": \".kubernetes.pod_uid\",\n            \"pod_ip\": \".kubernetes.pod_ip\",\n            \"pod_ips\": \".kubernetes.pod_ips\",\n            \"pod_labels\": \".kubernetes.pod_labels\",\n            \"pod_annotations\": \".kubernetes.pod_annotations\",\n            \"pod_node_name\": \".kubernetes.pod_node_name\",\n            \"pod_owner\": \".kubernetes.pod_owner\",\n            \"container_name\": \".kubernetes.container_name\",\n            \"container_id\": \".kubernetes.container_id\",\n            \"container_image\": \".kubernetes.container_image\",\n            \"container_image_id\": \".kubernetes.container_image_id\"\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"container_id\": {\n              \"title\": \"Event field for the Container's ID.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.container_id\",\n                  \"k8s.container_id\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Container ID\"\n              }\n            },\n            \"container_image\": {\n              \"title\": \"Event field for the Container's image.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.container_image\",\n                  \"k8s.container_image\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Container Image\"\n              }\n            },\n            \"container_image_id\": {\n              \"title\": \"Event field for the Container's image ID.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.container_image_id\",\n                  \"k8s.container_image_id\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Container Image ID\"\n              }\n            },\n            \"container_name\": {\n              \"title\": \"Event field for the Container's name.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.container_name\",\n                  \"k8s.container_name\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Container Name\"\n              }\n            },\n            \"pod_annotations\": {\n              \"title\": \"Event field for the Pod's annotations.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_annotations\",\n                  \"k8s.pod_annotations\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod Annotations\"\n              }\n            },\n            \"pod_ip\": {\n              \"title\": \"Event field for the Pod's IPv4 address.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_ip\",\n                  \"k8s.pod_ip\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod IP\"\n              }\n            },\n            \"pod_ips\": {\n              \"title\": \"Event field for the Pod's IPv4 and IPv6 addresses.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_ips\",\n                  \"k8s.pod_ips\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod IPs\"\n              }\n            },\n            \"pod_labels\": {\n              \"title\": \"Event field for the `Pod`'s labels.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_labels\",\n                  \"k8s.pod_labels\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod Labels\"\n              }\n            },\n            \"pod_name\": {\n              \"title\": \"Event field for the Pod's name.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_name\",\n                  \"k8s.pod_name\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod Name\"\n              }\n            },\n            \"pod_namespace\": {\n              \"title\": \"Event field for the Pod's namespace.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_ns\",\n                  \"k8s.pod_ns\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod Namespace\"\n              }\n            },\n            \"pod_node_name\": {\n              \"title\": \"Event field for the Pod's node_name.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_host\",\n                  \"k8s.pod_host\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod Node Name\"\n              }\n            },\n            \"pod_owner\": {\n              \"title\": \"Event field for the Pod's owner reference.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_owner\",\n                  \"k8s.pod_owner\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod Owner\"\n              }\n            },\n            \"pod_uid\": {\n              \"title\": \"Event field for the Pod's UID.\",\n              \"description\": \"Set to `\\\"\\\"` to suppress this key.\",\n              \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalTargetPath\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \".k8s.pod_uid\",\n                  \"k8s.pod_uid\",\n                  \"\"\n                ],\n                \"docs::human_name\": \"Pod UID\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Pod Annotation Fields\"\n          }\n        },\n        \"read_from\": {\n          \"description\": \"File position to use when reading a new file.\",\n          \"default\": \"beginning\",\n          \"$ref\": \"#/definitions/file_source::ReadFromConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Read From\"\n          }\n        },\n        \"rotate_wait_secs\": {\n          \"description\": \"How long to keep an open handle to a rotated log file.\\nThe default value represents \\\"no limit\\\"\",\n          \"default\": 9223372036854775807,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::type_unit\": \"seconds\",\n            \"docs::human_name\": \"Rotate Wait Secs\"\n          }\n        },\n        \"self_node_name\": {\n          \"title\": \"The name of the Kubernetes [Node][node] that is running.\",\n          \"description\": \"Configured to use an environment variable by default, to be evaluated to a value provided by\\nKubernetes at Pod creation.\\n\\n[node]: https://kubernetes.io/docs/concepts/architecture/nodes/\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Self Node Name\"\n          }\n        },\n        \"timezone\": {\n          \"description\": \"The default time zone for timestamps without an explicit zone.\",\n          \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Timezone\"\n          }\n        },\n        \"use_apiserver_cache\": {\n          \"description\": \"Determines if requests to the kube-apiserver can be served by a cache.\",\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Use API Server Cache\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"kubernetes_logs\"\n      }\n    },\n    \"vector::sources::logstash::LogstashConfig\": {\n      \"description\": \"Configuration for the `logstash` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n          \"description\": \"If a socket address is used, it _must_ include a port.\",\n          \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"connection_limit\": {\n          \"description\": \"The maximum number of TCP connections that are allowed at any given time.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 4294967295.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"connections\",\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Connection Limit\"\n          }\n        },\n        \"keepalive\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"permit_origin\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::ipallowlist::IpAllowlistConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Permit Origin\"\n          }\n        },\n        \"receive_buffer_bytes\": {\n          \"description\": \"The size of the receive buffer used for each connection.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::type_unit\": \"bytes\",\n            \"docs::examples\": 65536,\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Receive Buffer Bytes\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsSourceConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"logstash\"\n      }\n    },\n    \"vector::sources::mongodb_metrics::MongoDbMetricsConfig\": {\n      \"description\": \"Configuration for the `mongodb_metrics` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoints\"\n      ],\n      \"properties\": {\n        \"endpoints\": {\n          \"title\": \"A list of MongoDB instances to scrape.\",\n          \"description\": \"Each endpoint must be in the [Connection String URI Format](https://www.mongodb.com/docs/manual/reference/connection-string/).\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"mongodb://localhost:27017\",\n            \"docs::human_name\": \"Endpoints\"\n          }\n        },\n        \"namespace\": {\n          \"title\": \"Overrides the default namespace for the metrics emitted by the source.\",\n          \"description\": \"If set to an empty string, no namespace is added to the metrics.\\n\\nBy default, `mongodb` is used.\",\n          \"default\": \"mongodb\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Namespace\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between scrapes, in seconds.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"mongodb_metrics\"\n      }\n    },\n    \"vector::sources::nats::NatsSourceConfig\": {\n      \"description\": \"Configuration for the `nats` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"connection_name\",\n        \"subject\",\n        \"url\"\n      ],\n      \"properties\": {\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::nats::NatsAuthConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"connection_name\": {\n          \"title\": \"A [name][nats_connection_name] assigned to the NATS connection.\",\n          \"description\": \"[nats_connection_name]: https://docs.nats.io/using-nats/developer/connecting/name\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"vector\",\n            \"docs::human_name\": \"Connection Name\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"framing\": {\n          \"title\": \"Framing configuration.\",\n          \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n          \"default\": {\n            \"method\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"queue\": {\n          \"description\": \"The NATS queue group to join.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Queue\"\n          }\n        },\n        \"subject\": {\n          \"title\": \"The NATS [subject][nats_subject] to pull messages from.\",\n          \"description\": \"[nats_subject]: https://docs.nats.io/nats-concepts/subjects\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"foo\",\n              \"time.us.east\",\n              \"time.*.east\",\n              \"time.>\",\n              \">\"\n            ],\n            \"docs::human_name\": \"Subject\"\n          }\n        },\n        \"subject_key_field\": {\n          \"description\": \"The `NATS` subject key.\",\n          \"default\": \"subject\",\n          \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Subject Key Field\"\n          }\n        },\n        \"subscriber_capacity\": {\n          \"title\": \"The buffer capacity of the underlying NATS subscriber.\",\n          \"description\": \"This value determines how many messages the NATS subscriber buffers\\nbefore incoming messages are dropped.\\n\\nSee the [async_nats documentation][async_nats_subscription_capacity] for more information.\\n\\n[async_nats_subscription_capacity]: https://docs.rs/async-nats/latest/async_nats/struct.ConnectOptions.html#method.subscription_capacity\",\n          \"default\": 4096,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Subscriber Capacity\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"url\": {\n          \"title\": \"The NATS URL to connect to.\",\n          \"description\": \"The URL takes the form of `nats://server:port`.\\nIf the port is not specified it defaults to 4222.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"nats://demo.nats.io\",\n              \"nats://127.0.0.1:4242\"\n            ],\n            \"docs::human_name\": \"URL\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"nats\"\n      }\n    },\n    \"vector::sources::nginx_metrics::NginxMetricsConfig\": {\n      \"description\": \"Configuration for the `nginx_metrics` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoints\"\n      ],\n      \"properties\": {\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"endpoints\": {\n          \"title\": \"A list of NGINX instances to scrape.\",\n          \"description\": \"Each endpoint must be a valid HTTP/HTTPS URI pointing to an NGINX instance that has the\\n`ngx_http_stub_status_module` module enabled.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"http://localhost:8000/basic_status\",\n            \"docs::human_name\": \"Endpoints\"\n          }\n        },\n        \"namespace\": {\n          \"title\": \"Overrides the default namespace for the metrics emitted by the source.\",\n          \"description\": \"If set to an empty string, no namespace is added to the metrics.\\n\\nBy default, `nginx` is used.\",\n          \"default\": \"nginx\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Namespace\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between scrapes.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"nginx_metrics\"\n      }\n    },\n    \"vector::sources::opentelemetry::OpentelemetryConfig\": {\n      \"description\": \"Configuration for the `opentelemetry` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"grpc\",\n        \"http\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"grpc\": {\n          \"description\": \"Configuration for the `opentelemetry` gRPC server.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"address\"\n          ],\n          \"properties\": {\n            \"address\": {\n              \"title\": \"The socket address to listen for connections on.\",\n              \"description\": \"It _must_ include a port.\",\n              \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"0.0.0.0:4317\",\n                  \"localhost:4317\"\n                ],\n                \"docs::human_name\": \"Address\"\n              }\n            },\n            \"tls\": {\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::examples\": {\n              \"address\": \"0.0.0.0:4317\"\n            },\n            \"docs::human_name\": \"gRPC\"\n          }\n        },\n        \"http\": {\n          \"description\": \"Configuration for the `opentelemetry` HTTP server.\",\n          \"type\": \"object\",\n          \"required\": [\n            \"address\"\n          ],\n          \"properties\": {\n            \"address\": {\n              \"title\": \"The socket address to listen for connections on.\",\n              \"description\": \"It _must_ include a port.\",\n              \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n              \"_metadata\": {\n                \"docs::examples\": [\n                  \"0.0.0.0:4318\",\n                  \"localhost:4318\"\n                ],\n                \"docs::human_name\": \"Address\"\n              }\n            },\n            \"keepalive\": {\n              \"description\": \"Configuration of HTTP server keepalive parameters.\",\n              \"default\": {\n                \"max_connection_age_secs\": 300,\n                \"max_connection_age_jitter_factor\": 0.1\n              },\n              \"$ref\": \"#/definitions/vector::http::KeepaliveConfig\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Keepalive\"\n              }\n            },\n            \"tls\": {\n              \"default\": null,\n              \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"TLS\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::examples\": {\n              \"address\": \"0.0.0.0:4318\",\n              \"keepalive\": {\n                \"max_connection_age_secs\": 300,\n                \"max_connection_age_jitter_factor\": 0.1\n              }\n            },\n            \"docs::human_name\": \"HTTP\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"opentelemetry\"\n      }\n    },\n    \"vector::sources::postgresql_metrics::PostgresqlMetricsConfig\": {\n      \"description\": \"Configuration for the `postgresql_metrics` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoints\"\n      ],\n      \"properties\": {\n        \"endpoints\": {\n          \"title\": \"A list of PostgreSQL instances to scrape.\",\n          \"description\": \"Each endpoint must be in the [Connection URI\\nformat](https://www.postgresql.org/docs/current/libpq-connect.html#id-1.7.3.8.3.6).\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"postgresql://postgres:vector@localhost:5432/postgres\",\n            \"docs::human_name\": \"Endpoints\"\n          }\n        },\n        \"exclude_databases\": {\n          \"title\": \"A list of databases to match (by using [POSIX Regular\\nExpressions](https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-POSIX-REGEXP)) against\\nthe `datname` column for which you don’t want to collect metrics from.\",\n          \"description\": \"Specifying `\\\"\\\"` includes metrics where `datname` is `NULL`.\\n\\nThis can be used in conjunction with `include_databases`.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"^postgres$\",\n              \"^template.*\"\n            ],\n            \"docs::human_name\": \"Exclude Databases\"\n          }\n        },\n        \"include_databases\": {\n          \"title\": \"A list of databases to match (by using [POSIX Regular\\nExpressions](https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-POSIX-REGEXP)) against\\nthe `datname` column for which you want to collect metrics from.\",\n          \"description\": \"If not set, metrics are collected from all databases. Specifying `\\\"\\\"` includes metrics where `datname` is\\n`NULL`.\\n\\nThis can be used in conjunction with `exclude_databases`.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"^postgres$\",\n              \"^vector$\",\n              \"^foo\"\n            ],\n            \"docs::human_name\": \"Include Databases\"\n          }\n        },\n        \"namespace\": {\n          \"description\": \"Overrides the default namespace for the metrics emitted by the source.\",\n          \"default\": \"postgresql\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Namespace\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between scrapes.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        },\n        \"tls\": {\n          \"description\": \"Configuration of TLS when connecting to PostgreSQL.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Configuration of TLS when connecting to PostgreSQL.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"ca_file\"\n              ],\n              \"properties\": {\n                \"ca_file\": {\n                  \"title\": \"Absolute path to an additional CA certificate file.\",\n                  \"description\": \"The certificate must be in the DER or PEM (X.509) format.\",\n                  \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                  \"_metadata\": {\n                    \"docs::examples\": \"certs/ca.pem\",\n                    \"docs::human_name\": \"Ca File\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"postgresql_metrics\"\n      }\n    },\n    \"vector::sources::prometheus::pushgateway::PrometheusPushgatewayConfig\": {\n      \"description\": \"Configuration for the `prometheus_pushgateway` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The socket address to accept connections on.\",\n          \"description\": \"The address _must_ include a port.\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::examples\": \"0.0.0.0:9091\",\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"aggregate_metrics\": {\n          \"title\": \"Whether to aggregate values across pushes.\",\n          \"description\": \"Only applies to counters and histograms as gauges and summaries can't be\\nmeaningfully aggregated.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Aggregate Metrics\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::sources::util::http::auth::HttpSourceAuthConfig>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"keepalive\": {\n          \"description\": \"Configuration of HTTP server keepalive parameters.\",\n          \"default\": {\n            \"max_connection_age_secs\": 300,\n            \"max_connection_age_jitter_factor\": 0.1\n          },\n          \"$ref\": \"#/definitions/vector::http::KeepaliveConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"prometheus_pushgateway\"\n      }\n    },\n    \"vector::sources::prometheus::remote_write::PrometheusRemoteWriteConfig\": {\n      \"description\": \"Configuration for the `prometheus_remote_write` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The socket address to accept connections on.\",\n          \"description\": \"The address _must_ include a port.\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::examples\": \"0.0.0.0:9090\",\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::sources::util::http::auth::HttpSourceAuthConfig>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"keepalive\": {\n          \"description\": \"Configuration of HTTP server keepalive parameters.\",\n          \"default\": {\n            \"max_connection_age_secs\": 300,\n            \"max_connection_age_jitter_factor\": 0.1\n          },\n          \"$ref\": \"#/definitions/vector::http::KeepaliveConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"prometheus_remote_write\"\n      }\n    },\n    \"vector::sources::prometheus::scrape::PrometheusScrapeConfig\": {\n      \"description\": \"Configuration for the `prometheus_scrape` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoints\"\n      ],\n      \"properties\": {\n        \"auth\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector::http::Auth>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"endpoint_tag\": {\n          \"title\": \"The tag name added to each event representing the scraped instance's endpoint.\",\n          \"description\": \"The tag value is the endpoint of the scraped instance.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Endpoint Tag\"\n          }\n        },\n        \"endpoints\": {\n          \"description\": \"Endpoints to scrape metrics from.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"http://localhost:9090/metrics\",\n            \"docs::human_name\": \"Endpoints\"\n          }\n        },\n        \"honor_labels\": {\n          \"title\": \"Controls how tag conflicts are handled if the scraped source has tags to be added.\",\n          \"description\": \"If `true`, the new tag is not added if the scraped metric has the tag already. If `false`, the conflicting tag\\nis renamed by prepending `exported_` to the original name.\\n\\nThis matches Prometheus’ `honor_labels` configuration.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Honor Labels\"\n          }\n        },\n        \"instance_tag\": {\n          \"title\": \"The tag name added to each event representing the scraped instance's `host:port`.\",\n          \"description\": \"The tag value is the host and port of the scraped instance.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Instance Tag\"\n          }\n        },\n        \"query\": {\n          \"title\": \"Custom parameters for the scrape request query string.\",\n          \"description\": \"One or more values for the same parameter key can be provided. The parameters provided in this option are\\nappended to any parameters manually provided in the `endpoints` option. This option is especially useful when\\nscraping the `/federate` endpoint.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::additional_props_description\": \"A query string parameter.\",\n            \"docs::examples\": {\n              \"match[]\": [\n                \"{job=\\\"somejob\\\"}\",\n                \"{__name__=~\\\"job:.*\\\"}\"\n              ]\n            },\n            \"docs::human_name\": \"Query\"\n          }\n        },\n        \"scrape_interval_secs\": {\n          \"description\": \"The interval between scrapes. Requests are run concurrently so if a scrape takes longer\\nthan the interval a new scrape will be started. This can take extra resources, set the timeout\\nto a value lower than the scrape interval to prevent this from happening.\",\n          \"default\": 15,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Interval\"\n          }\n        },\n        \"scrape_timeout_secs\": {\n          \"description\": \"The timeout for each scrape request.\",\n          \"default\": 5.0,\n          \"$ref\": \"#/definitions/serde_with::DurationFractionalSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Scrape Timeout\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"prometheus_scrape\"\n      }\n    },\n    \"vector::sources::pulsar::PulsarSourceConfig\": {\n      \"description\": \"Configuration for the `pulsar` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"endpoint\",\n        \"topics\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"auth\": {\n          \"description\": \"Authentication configuration.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Authentication configuration.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Basic authentication.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"name\",\n                    \"token\"\n                  ],\n                  \"properties\": {\n                    \"name\": {\n                      \"title\": \"Basic authentication name/username.\",\n                      \"description\": \"This can be used either for basic authentication (username/password) or JWT authentication.\\nWhen used for JWT, the value should be `token`.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::examples\": [\n                          \"${PULSAR_NAME}\",\n                          \"name123\"\n                        ],\n                        \"docs::human_name\": \"Name\"\n                      }\n                    },\n                    \"token\": {\n                      \"title\": \"Basic authentication password/token.\",\n                      \"description\": \"This can be used either for basic authentication (username/password) or JWT authentication.\\nWhen used for JWT, the value should be the signed JWT, in the compact representation.\",\n                      \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\",\n                      \"_metadata\": {\n                        \"docs::examples\": [\n                          \"${PULSAR_TOKEN}\",\n                          \"123456789\"\n                        ],\n                        \"docs::human_name\": \"Token\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"Basic\",\n                    \"docs::human_name\": \"Basic\"\n                  }\n                },\n                {\n                  \"description\": \"OAuth authentication.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"oauth2\"\n                  ],\n                  \"properties\": {\n                    \"oauth2\": {\n                      \"description\": \"OAuth2-specific authentication configuration.\",\n                      \"type\": \"object\",\n                      \"required\": [\n                        \"credentials_url\",\n                        \"issuer_url\"\n                      ],\n                      \"properties\": {\n                        \"audience\": {\n                          \"description\": \"The OAuth2 audience.\",\n                          \"type\": [\n                            \"string\",\n                            \"null\"\n                          ],\n                          \"_metadata\": {\n                            \"docs::optional\": true,\n                            \"docs::examples\": [\n                              \"${OAUTH2_AUDIENCE}\",\n                              \"pulsar\"\n                            ],\n                            \"docs::human_name\": \"Audience\"\n                          }\n                        },\n                        \"credentials_url\": {\n                          \"title\": \"The credentials URL.\",\n                          \"description\": \"A data URL is also supported.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::examples\": [\n                              \"${OAUTH2_CREDENTIALS_URL}\",\n                              \"file:///oauth2_credentials\",\n                              \"data:application/json;base64,cHVsc2FyCg==\"\n                            ],\n                            \"docs::human_name\": \"Credentials URL\"\n                          }\n                        },\n                        \"issuer_url\": {\n                          \"description\": \"The issuer URL.\",\n                          \"type\": \"string\",\n                          \"_metadata\": {\n                            \"docs::examples\": [\n                              \"${OAUTH2_ISSUER_URL}\",\n                              \"https://oauth2.issuer\"\n                            ],\n                            \"docs::human_name\": \"Issuer URL\"\n                          }\n                        },\n                        \"scope\": {\n                          \"description\": \"The OAuth2 scope.\",\n                          \"type\": [\n                            \"string\",\n                            \"null\"\n                          ],\n                          \"_metadata\": {\n                            \"docs::optional\": true,\n                            \"docs::examples\": [\n                              \"${OAUTH2_SCOPE}\",\n                              \"admin\"\n                            ],\n                            \"docs::human_name\": \"Scope\"\n                          }\n                        }\n                      },\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::human_name\": \"OAuth2\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"OAuth\",\n                    \"docs::human_name\": \"O Auth\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"untagged\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Auth\"\n          }\n        },\n        \"batch_size\": {\n          \"description\": \"Max count of messages in a batch.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 4294967295.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Batch Size\"\n          }\n        },\n        \"consumer_name\": {\n          \"description\": \"The Pulsar consumer name.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"consumer-name\",\n            \"docs::human_name\": \"Consumer Name\"\n          }\n        },\n        \"dead_letter_queue_policy\": {\n          \"description\": \"Dead Letter Queue policy configuration.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Dead Letter Queue policy configuration.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"dead_letter_topic\",\n                \"max_redeliver_count\"\n              ],\n              \"properties\": {\n                \"dead_letter_topic\": {\n                  \"description\": \"Name of the dead letter topic where the failing messages will be sent.\",\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Dead Letter Topic\"\n                  }\n                },\n                \"max_redeliver_count\": {\n                  \"description\": \"Maximum number of times that a message will be redelivered before being sent to the dead letter queue.\",\n                  \"type\": \"integer\",\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::human_name\": \"Max Redeliver Count\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Dead Letter Queue Policy\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"endpoint\": {\n          \"description\": \"The endpoint to which the Pulsar client should connect to.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"pulsar://127.0.0.1:6650\",\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"framing\": {\n          \"title\": \"Framing configuration.\",\n          \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n          \"default\": {\n            \"method\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"priority_level\": {\n          \"title\": \"The consumer's priority level.\",\n          \"description\": \"The broker follows descending priorities. For example, 0=max-priority, 1, 2,...\\n\\nIn Shared subscription type, the broker first dispatches messages to the max priority level consumers if they have permits. Otherwise, the broker considers next priority level consumers.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 2147483647.0,\n          \"minimum\": -2147483648.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"int\",\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Priority Level\"\n          }\n        },\n        \"subscription_name\": {\n          \"description\": \"The Pulsar subscription name.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"subscription_name\",\n            \"docs::human_name\": \"Subscription Name\"\n          }\n        },\n        \"topics\": {\n          \"description\": \"The Pulsar topic names to read events from.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": \"[persistent://public/default/my-topic]\",\n            \"docs::human_name\": \"Topics\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"pulsar\"\n      }\n    },\n    \"vector::sources::redis::RedisSourceConfig\": {\n      \"description\": \"Configuration for the `redis` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"key\",\n        \"url\"\n      ],\n      \"properties\": {\n        \"data_type\": {\n          \"description\": \"The Redis data type (`list` or `channel`) to use.\",\n          \"default\": \"list\",\n          \"oneOf\": [\n            {\n              \"description\": \"The `list` data type.\",\n              \"const\": \"list\",\n              \"_metadata\": {\n                \"logical_name\": \"List\",\n                \"docs::human_name\": \"List\"\n              }\n            },\n            {\n              \"title\": \"The `channel` data type.\",\n              \"description\": \"This is based on Redis' Pub/Sub capabilities.\",\n              \"const\": \"channel\",\n              \"_metadata\": {\n                \"logical_name\": \"Channel\",\n                \"docs::human_name\": \"Channel\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::enum_tagging\": \"external\",\n            \"docs::human_name\": \"Data Type\"\n          }\n        },\n        \"decoding\": {\n          \"description\": \"Configures how events are decoded from raw bytes.\",\n          \"default\": {\n            \"codec\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Decoding\"\n          }\n        },\n        \"framing\": {\n          \"title\": \"Framing configuration.\",\n          \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n          \"default\": {\n            \"method\": \"bytes\"\n          },\n          \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Framing\"\n          }\n        },\n        \"key\": {\n          \"description\": \"The Redis key to read messages from.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"vector\",\n            \"docs::human_name\": \"Key\"\n          }\n        },\n        \"list\": {\n          \"description\": \"Options for the Redis `list` data type.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Options for the Redis `list` data type.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"method\"\n              ],\n              \"properties\": {\n                \"method\": {\n                  \"description\": \"Method for getting events from the `list` data type.\",\n                  \"oneOf\": [\n                    {\n                      \"description\": \"Pop messages from the head of the list.\",\n                      \"const\": \"lpop\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Lpop\",\n                        \"docs::human_name\": \"Lpop\"\n                      }\n                    },\n                    {\n                      \"description\": \"Pop messages from the tail of the list.\",\n                      \"const\": \"rpop\",\n                      \"_metadata\": {\n                        \"logical_name\": \"Rpop\",\n                        \"docs::human_name\": \"Rpop\"\n                      }\n                    }\n                  ],\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\",\n                    \"docs::human_name\": \"Method\"\n                  }\n                }\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"List\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"redis_key\": {\n          \"title\": \"Sets the name of the log field to use to add the key to each event.\",\n          \"description\": \"The value is the Redis key that the event was read from.\\n\\nBy default, this is not set and the field is not automatically added.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n          \"_metadata\": {\n            \"docs::examples\": \"redis_key\",\n            \"docs::human_name\": \"Redis Key\"\n          }\n        },\n        \"url\": {\n          \"title\": \"The Redis URL to connect to.\",\n          \"description\": \"The URL must take the form of `protocol://server:port/db` where the `protocol` can either be `redis` or `rediss` for connections secured using TLS.\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::examples\": \"redis://127.0.0.1:6379/0\",\n            \"docs::human_name\": \"URL\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"redis\"\n      }\n    },\n    \"vector::sources::socket::SocketConfig\": {\n      \"description\": \"Configuration for the `socket` source.\",\n      \"allOf\": [\n        {\n          \"description\": \"Listening mode for the `socket` source.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Listen on TCP.\",\n              \"allOf\": [\n                {\n                  \"description\": \"TCP configuration for the `socket` source.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"address\"\n                  ],\n                  \"properties\": {\n                    \"address\": {\n                      \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n                      \"description\": \"If a socket address is used, it _must_ include a port.\",\n                      \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Address\"\n                      }\n                    },\n                    \"connection_limit\": {\n                      \"description\": \"The maximum number of TCP connections that are allowed at any given time.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 4294967295.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"connections\",\n                        \"docs::human_name\": \"Connection Limit\"\n                      }\n                    },\n                    \"decoding\": {\n                      \"description\": \"Configures how events are decoded from raw bytes.\",\n                      \"default\": {\n                        \"codec\": \"bytes\"\n                      },\n                      \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Decoding\"\n                      }\n                    },\n                    \"framing\": {\n                      \"$ref\": \"#/definitions/core::option::Option<codecs::decoding::FramingConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Framing\"\n                      }\n                    },\n                    \"host_key\": {\n                      \"title\": \"Overrides the name of the log field used to add the peer host to each event.\",\n                      \"description\": \"The value will be the peer host's address, including the port i.e. `1.2.3.4:9000`.\\n\\nBy default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n                      \"default\": \"host\",\n                      \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Host Key\"\n                      }\n                    },\n                    \"keepalive\": {\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Keepalive\"\n                      }\n                    },\n                    \"log_namespace\": {\n                      \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n                      \"default\": null,\n                      \"type\": [\n                        \"boolean\",\n                        \"null\"\n                      ],\n                      \"_metadata\": {\n                        \"docs::optional\": true,\n                        \"docs::hidden\": true,\n                        \"docs::human_name\": \"Log Namespace\"\n                      }\n                    },\n                    \"max_connection_duration_secs\": {\n                      \"title\": \"Maximum duration to keep each connection open. Connections open for longer than this duration are closed.\",\n                      \"description\": \"This is helpful for load balancing long-lived connections.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"seconds\",\n                        \"docs::human_name\": \"Max Connection Duration Secs\"\n                      }\n                    },\n                    \"permit_origin\": {\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::ipallowlist::IpAllowlistConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Permit Origin\"\n                      }\n                    },\n                    \"port_key\": {\n                      \"title\": \"Overrides the name of the log field used to add the peer host's port to each event.\",\n                      \"description\": \"The value will be the peer host's port i.e. `9000`.\\n\\nBy default, `\\\"port\\\"` is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\",\n                      \"default\": \"port\",\n                      \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Port Key\"\n                      }\n                    },\n                    \"receive_buffer_bytes\": {\n                      \"description\": \"The size of the receive buffer used for each connection.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::human_name\": \"Receive Buffer Bytes\"\n                      }\n                    },\n                    \"shutdown_timeout_secs\": {\n                      \"description\": \"The timeout before a connection is forcefully closed during shutdown.\",\n                      \"default\": 30,\n                      \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Shutdown Timeout\"\n                      }\n                    },\n                    \"tls\": {\n                      \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsSourceConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"TLS\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Listen on TCP.\",\n                      \"const\": \"tcp\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Tcp\",\n                \"docs::human_name\": \"TCP\"\n              }\n            },\n            {\n              \"description\": \"Listen on UDP.\",\n              \"allOf\": [\n                {\n                  \"description\": \"UDP configuration for the `socket` source.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"address\"\n                  ],\n                  \"properties\": {\n                    \"address\": {\n                      \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n                      \"description\": \"If a socket address is used, it _must_ include a port.\",\n                      \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Address\"\n                      }\n                    },\n                    \"decoding\": {\n                      \"description\": \"Configures how events are decoded from raw bytes.\",\n                      \"default\": {\n                        \"codec\": \"bytes\"\n                      },\n                      \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Decoding\"\n                      }\n                    },\n                    \"framing\": {\n                      \"title\": \"Framing configuration.\",\n                      \"description\": \"Framing handles how events are separated when encoded in a raw byte form, where each event is\\na frame that must be prefixed, or delimited, in a way that marks where an event begins and\\nends within the byte stream.\",\n                      \"default\": {\n                        \"method\": \"bytes\"\n                      },\n                      \"$ref\": \"#/definitions/codecs::decoding::FramingConfig\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Framing\"\n                      }\n                    },\n                    \"host_key\": {\n                      \"title\": \"Overrides the name of the log field used to add the peer host to each event.\",\n                      \"description\": \"The value will be the peer host's address, including the port i.e. `1.2.3.4:9000`.\\n\\nBy default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n                      \"default\": \"host\",\n                      \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Host Key\"\n                      }\n                    },\n                    \"log_namespace\": {\n                      \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n                      \"default\": null,\n                      \"type\": [\n                        \"boolean\",\n                        \"null\"\n                      ],\n                      \"_metadata\": {\n                        \"docs::optional\": true,\n                        \"docs::hidden\": true,\n                        \"docs::human_name\": \"Log Namespace\"\n                      }\n                    },\n                    \"max_length\": {\n                      \"title\": \"The maximum buffer size of incoming messages.\",\n                      \"description\": \"Messages larger than this are truncated.\",\n                      \"default\": 102400,\n                      \"type\": \"integer\",\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::human_name\": \"Max Length\"\n                      }\n                    },\n                    \"port_key\": {\n                      \"title\": \"Overrides the name of the log field used to add the peer host's port to each event.\",\n                      \"description\": \"The value will be the peer host's port i.e. `9000`.\\n\\nBy default, `\\\"port\\\"` is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\",\n                      \"default\": \"port\",\n                      \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Port Key\"\n                      }\n                    },\n                    \"receive_buffer_bytes\": {\n                      \"description\": \"The size of the receive buffer used for the listening socket.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::type_unit\": \"bytes\",\n                        \"docs::human_name\": \"Receive Buffer Bytes\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Listen on UDP.\",\n                      \"const\": \"udp\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Udp\",\n                \"docs::human_name\": \"UDP\"\n              }\n            },\n            {\n              \"description\": \"Listen on a Unix domain socket (UDS), in datagram mode.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Unix domain socket configuration for the `socket` source.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"path\"\n                  ],\n                  \"properties\": {\n                    \"decoding\": {\n                      \"description\": \"Configures how events are decoded from raw bytes.\",\n                      \"default\": {\n                        \"codec\": \"bytes\"\n                      },\n                      \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Decoding\"\n                      }\n                    },\n                    \"framing\": {\n                      \"default\": null,\n                      \"$ref\": \"#/definitions/core::option::Option<codecs::decoding::FramingConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Framing\"\n                      }\n                    },\n                    \"host_key\": {\n                      \"title\": \"Overrides the name of the log field used to add the peer host to each event.\",\n                      \"description\": \"The value will be the peer host's address, including the port i.e. `1.2.3.4:9000`.\\n\\nBy default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n                      \"default\": \"host\",\n                      \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Host Key\"\n                      }\n                    },\n                    \"log_namespace\": {\n                      \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n                      \"default\": null,\n                      \"type\": [\n                        \"boolean\",\n                        \"null\"\n                      ],\n                      \"_metadata\": {\n                        \"docs::optional\": true,\n                        \"docs::hidden\": true,\n                        \"docs::human_name\": \"Log Namespace\"\n                      }\n                    },\n                    \"path\": {\n                      \"title\": \"The Unix socket path.\",\n                      \"description\": \"This should be an absolute path.\",\n                      \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                      \"_metadata\": {\n                        \"docs::examples\": \"/path/to/socket\",\n                        \"docs::human_name\": \"Path\"\n                      }\n                    },\n                    \"socket_file_mode\": {\n                      \"title\": \"Unix file mode bits to be applied to the unix socket file as its designated file permissions.\",\n                      \"description\": \"Note: The file mode value can be specified in any numeric format supported by your configuration\\nlanguage, but it is most intuitive to use an octal number.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 4294967295.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::examples\": [\n                          511,\n                          384,\n                          508\n                        ],\n                        \"docs::human_name\": \"Socket File Mode\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Listen on a Unix domain socket (UDS), in datagram mode.\",\n                      \"const\": \"unix_datagram\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"UnixDatagram\",\n                \"docs::human_name\": \"Unix Datagram\"\n              }\n            },\n            {\n              \"description\": \"Listen on a Unix domain socket (UDS), in stream mode.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Unix domain socket configuration for the `socket` source.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"path\"\n                  ],\n                  \"properties\": {\n                    \"decoding\": {\n                      \"description\": \"Configures how events are decoded from raw bytes.\",\n                      \"default\": {\n                        \"codec\": \"bytes\"\n                      },\n                      \"$ref\": \"#/definitions/codecs::decoding::DeserializerConfig\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Decoding\"\n                      }\n                    },\n                    \"framing\": {\n                      \"default\": null,\n                      \"$ref\": \"#/definitions/core::option::Option<codecs::decoding::FramingConfig>\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Framing\"\n                      }\n                    },\n                    \"host_key\": {\n                      \"title\": \"Overrides the name of the log field used to add the peer host to each event.\",\n                      \"description\": \"The value will be the peer host's address, including the port i.e. `1.2.3.4:9000`.\\n\\nBy default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\nSet to `\\\"\\\"` to suppress this key.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n                      \"default\": \"host\",\n                      \"$ref\": \"#/definitions/vector_lookup::lookup_v2::optional_path::OptionalValuePath\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Host Key\"\n                      }\n                    },\n                    \"log_namespace\": {\n                      \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n                      \"default\": null,\n                      \"type\": [\n                        \"boolean\",\n                        \"null\"\n                      ],\n                      \"_metadata\": {\n                        \"docs::optional\": true,\n                        \"docs::hidden\": true,\n                        \"docs::human_name\": \"Log Namespace\"\n                      }\n                    },\n                    \"path\": {\n                      \"title\": \"The Unix socket path.\",\n                      \"description\": \"This should be an absolute path.\",\n                      \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                      \"_metadata\": {\n                        \"docs::examples\": \"/path/to/socket\",\n                        \"docs::human_name\": \"Path\"\n                      }\n                    },\n                    \"socket_file_mode\": {\n                      \"title\": \"Unix file mode bits to be applied to the unix socket file as its designated file permissions.\",\n                      \"description\": \"Note: The file mode value can be specified in any numeric format supported by your configuration\\nlanguage, but it is most intuitive to use an octal number.\",\n                      \"type\": [\n                        \"integer\",\n                        \"null\"\n                      ],\n                      \"maximum\": 4294967295.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::optional\": true,\n                        \"docs::examples\": [\n                          511,\n                          384,\n                          508\n                        ],\n                        \"docs::human_name\": \"Socket File Mode\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"description\": \"Listen on a Unix domain socket (UDS), in stream mode.\",\n                      \"const\": \"unix_stream\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"UnixStream\",\n                \"docs::human_name\": \"Unix Stream\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The type of socket to use.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"mode\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"socket\"\n      }\n    },\n    \"vector::sources::splunk_hec::SplunkConfig\": {\n      \"description\": \"Configuration for the `splunk_hec` source.\",\n      \"default\": {\n        \"address\": \"0.0.0.0:8088\",\n        \"token\": null,\n        \"valid_tokens\": null,\n        \"store_hec_token\": false,\n        \"tls\": null,\n        \"acknowledgements\": {\n          \"enabled\": null,\n          \"max_pending_acks\": 10000000,\n          \"max_number_of_ack_channels\": 1000000,\n          \"max_pending_acks_per_channel\": 1000000,\n          \"ack_idle_cleanup\": false,\n          \"max_idle_time\": 300\n        },\n        \"log_namespace\": null,\n        \"keepalive\": {\n          \"max_connection_age_secs\": 300,\n          \"max_connection_age_jitter_factor\": 0.1\n        }\n      },\n      \"type\": \"object\",\n      \"properties\": {\n        \"acknowledgements\": {\n          \"description\": \"Acknowledgement configuration for the `splunk_hec` source.\",\n          \"default\": {\n            \"enabled\": null,\n            \"max_pending_acks\": 10000000,\n            \"max_number_of_ack_channels\": 1000000,\n            \"max_pending_acks_per_channel\": 1000000,\n            \"ack_idle_cleanup\": false,\n            \"max_idle_time\": 300\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"ack_idle_cleanup\": {\n              \"title\": \"Whether or not to remove channels after idling for `max_idle_time` seconds.\",\n              \"description\": \"A channel is idling if it is not used for sending data or querying acknowledgement statuses.\",\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Acknowledgement Idle Cleanup\"\n              }\n            },\n            \"enabled\": {\n              \"description\": \"Enables end-to-end acknowledgements.\",\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Enabled\"\n              }\n            },\n            \"max_idle_time\": {\n              \"title\": \"The amount of time, in seconds, a channel is allowed to idle before removal.\",\n              \"description\": \"Channels can potentially idle for longer than this setting but clients should not rely on such behavior.\\n\\nMinimum of `1`.\",\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Max Idle Time\"\n              }\n            },\n            \"max_number_of_ack_channels\": {\n              \"title\": \"The maximum number of Splunk HEC channels clients can use with this source.\",\n              \"description\": \"Minimum of `1`.\",\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Max Number of Acknowledgement Channels\"\n              }\n            },\n            \"max_pending_acks\": {\n              \"title\": \"The maximum number of acknowledgement statuses pending query across all channels.\",\n              \"description\": \"Equivalent to the `max_number_of_acked_requests_pending_query` Splunk HEC setting.\\n\\nMinimum of `1`.\",\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Max Number of Pending Acknowledgements\"\n              }\n            },\n            \"max_pending_acks_per_channel\": {\n              \"title\": \"The maximum number of acknowledgement statuses pending query for a single channel.\",\n              \"description\": \"Equivalent to the `max_number_of_acked_requests_pending_query_per_ack_channel` Splunk HEC setting.\\n\\nMinimum of `1`.\",\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Max Number of Pending Acknowledgements Per Channel\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The socket address to listen for connections on.\",\n          \"description\": \"The address _must_ include a port.\",\n          \"default\": \"0.0.0.0:8088\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"keepalive\": {\n          \"description\": \"Configuration of HTTP server keepalive parameters.\",\n          \"default\": {\n            \"max_connection_age_secs\": 300,\n            \"max_connection_age_jitter_factor\": 0.1\n          },\n          \"$ref\": \"#/definitions/vector::http::KeepaliveConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Keepalive\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global settings.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"store_hec_token\": {\n          \"title\": \"Whether or not to forward the Splunk HEC authentication token with events.\",\n          \"description\": \"If set to `true`, when incoming requests contain a Splunk HEC token, the token used is kept in the\\nevent metadata and preferentially used if the event is sent to a Splunk HEC sink.\",\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Store HEC Token\"\n          }\n        },\n        \"tls\": {\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"token\": {\n          \"title\": \"Optional authorization token.\",\n          \"description\": \"If supplied, incoming requests must supply this token in the `Authorization` header, just as a client would if\\nit was communicating with the Splunk HEC endpoint directly.\\n\\nIf _not_ supplied, the `Authorization` header is ignored and requests are not authenticated.\",\n          \"deprecated\": true,\n          \"$ref\": \"#/definitions/core::option::Option<vector_common::sensitive_string::SensitiveString>\",\n          \"_metadata\": {\n            \"deprecated_message\": \"This option has been deprecated, use `valid_tokens` instead.\",\n            \"docs::human_name\": \"Token\"\n          }\n        },\n        \"valid_tokens\": {\n          \"title\": \"A list of valid authorization tokens.\",\n          \"description\": \"If supplied, incoming requests must supply one of these tokens in the `Authorization` header, just as a client\\nwould if it was communicating with the Splunk HEC endpoint directly.\\n\\nIf _not_ supplied, the `Authorization` header is ignored and requests are not authenticated.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/vector_common::sensitive_string::SensitiveString\"\n          },\n          \"_metadata\": {\n            \"sensitive\": true,\n            \"docs::optional\": true,\n            \"docs::examples\": \"A94A8FE5CCB19BA61C4C08\",\n            \"docs::human_name\": \"Valid Tokens\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"splunk_hec\"\n      }\n    },\n    \"vector::sources::statsd::StatsdConfig\": {\n      \"description\": \"Configuration for the `statsd` source.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Listen on TCP.\",\n          \"allOf\": [\n            {\n              \"description\": \"TCP configuration for the `statsd` source.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"address\"\n              ],\n              \"properties\": {\n                \"address\": {\n                  \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n                  \"description\": \"If a socket address is used, it _must_ include a port.\",\n                  \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Address\"\n                  }\n                },\n                \"connection_limit\": {\n                  \"description\": \"The maximum number of TCP connections that are allowed at any given time.\",\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 4294967295.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"connections\",\n                    \"docs::human_name\": \"Connection Limit\"\n                  }\n                },\n                \"keepalive\": {\n                  \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Keepalive\"\n                  }\n                },\n                \"permit_origin\": {\n                  \"$ref\": \"#/definitions/core::option::Option<vector_core::ipallowlist::IpAllowlistConfig>\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Permit Origin\"\n                  }\n                },\n                \"receive_buffer_bytes\": {\n                  \"description\": \"The size of the receive buffer used for each connection.\",\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Receive Buffer Bytes\"\n                  }\n                },\n                \"shutdown_timeout_secs\": {\n                  \"description\": \"The timeout before a connection is forcefully closed during shutdown.\",\n                  \"default\": 30,\n                  \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Shutdown Timeout\"\n                  }\n                },\n                \"tls\": {\n                  \"default\": null,\n                  \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsSourceConfig>\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"TLS\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"mode\"\n              ],\n              \"properties\": {\n                \"mode\": {\n                  \"description\": \"Listen on TCP.\",\n                  \"const\": \"tcp\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Mode\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Tcp\",\n            \"docs::human_name\": \"TCP\"\n          }\n        },\n        {\n          \"description\": \"Listen on UDP.\",\n          \"allOf\": [\n            {\n              \"description\": \"UDP configuration for the `statsd` source.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"address\"\n              ],\n              \"properties\": {\n                \"address\": {\n                  \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n                  \"description\": \"If a socket address is used, it _must_ include a port.\",\n                  \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Address\"\n                  }\n                },\n                \"receive_buffer_bytes\": {\n                  \"description\": \"The size of the receive buffer used for each connection.\",\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"Receive Buffer Bytes\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"mode\"\n              ],\n              \"properties\": {\n                \"mode\": {\n                  \"description\": \"Listen on UDP.\",\n                  \"const\": \"udp\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Mode\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Udp\",\n            \"docs::human_name\": \"UDP\"\n          }\n        },\n        {\n          \"description\": \"Listen on a Unix domain Socket (UDS).\",\n          \"allOf\": [\n            {\n              \"description\": \"Unix domain socket configuration for the `statsd` source.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"path\"\n              ],\n              \"properties\": {\n                \"path\": {\n                  \"title\": \"The Unix socket path.\",\n                  \"description\": \"This should be an absolute path.\",\n                  \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                  \"_metadata\": {\n                    \"docs::examples\": \"/path/to/socket\",\n                    \"docs::human_name\": \"Path\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"mode\"\n              ],\n              \"properties\": {\n                \"mode\": {\n                  \"description\": \"Listen on a Unix domain Socket (UDS).\",\n                  \"const\": \"unix\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Mode\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"Unix\",\n            \"docs::human_name\": \"Unix\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"statsd\",\n        \"docs::enum_tag_description\": \"The type of socket to use.\",\n        \"docs::enum_tagging\": \"internal\",\n        \"docs::enum_tag_field\": \"mode\"\n      }\n    },\n    \"vector::sources::syslog::SyslogConfig\": {\n      \"description\": \"Configuration for the `syslog` source.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"host_key\": {\n              \"title\": \"Overrides the name of the log field used to add the peer host to each event.\",\n              \"description\": \"If using TCP or UDP, the value is the peer host's address, including the port. For example, `1.2.3.4:9000`. If using\\nUDS, the value is the socket path itself.\\n\\nBy default, the [global `log_schema.host_key` option][global_host_key] is used.\\n\\n[global_host_key]: https://vector.dev/docs/reference/configuration/global-options/#log_schema.host_key\",\n              \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalValuePath>\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Host Key\"\n              }\n            },\n            \"log_namespace\": {\n              \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n              \"default\": null,\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::hidden\": true,\n                \"docs::human_name\": \"Log Namespace\"\n              }\n            },\n            \"max_length\": {\n              \"title\": \"The maximum buffer size of incoming messages, in bytes.\",\n              \"description\": \"Messages larger than this are truncated.\",\n              \"default\": 102400,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::type_unit\": \"bytes\",\n                \"docs::human_name\": \"Max Length\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Listener mode for the `syslog` source.\",\n          \"oneOf\": [\n            {\n              \"description\": \"Listen on TCP.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"address\",\n                \"mode\"\n              ],\n              \"properties\": {\n                \"address\": {\n                  \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n                  \"description\": \"If a socket address is used, it _must_ include a port.\",\n                  \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Address\"\n                  }\n                },\n                \"connection_limit\": {\n                  \"description\": \"The maximum number of TCP connections that are allowed at any given time.\",\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 4294967295.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"Connection Limit\"\n                  }\n                },\n                \"keepalive\": {\n                  \"$ref\": \"#/definitions/core::option::Option<vector_core::tcp::TcpKeepaliveConfig>\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Keepalive\"\n                  }\n                },\n                \"mode\": {\n                  \"description\": \"Listen on TCP.\",\n                  \"const\": \"tcp\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Mode\"\n                  }\n                },\n                \"permit_origin\": {\n                  \"$ref\": \"#/definitions/core::option::Option<vector_core::ipallowlist::IpAllowlistConfig>\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Permit Origin\"\n                  }\n                },\n                \"receive_buffer_bytes\": {\n                  \"title\": \"The size of the receive buffer used for each connection.\",\n                  \"description\": \"This should not typically needed to be changed.\",\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Receive Buffer Bytes\"\n                  }\n                },\n                \"tls\": {\n                  \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsSourceConfig>\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"TLS\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Tcp\",\n                \"docs::human_name\": \"TCP\"\n              }\n            },\n            {\n              \"description\": \"Listen on UDP.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"address\",\n                \"mode\"\n              ],\n              \"properties\": {\n                \"address\": {\n                  \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n                  \"description\": \"If a socket address is used, it _must_ include a port.\",\n                  \"$ref\": \"#/definitions/vector::sources::util::net::SocketListenAddr\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Address\"\n                  }\n                },\n                \"mode\": {\n                  \"description\": \"Listen on UDP.\",\n                  \"const\": \"udp\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Mode\"\n                  }\n                },\n                \"receive_buffer_bytes\": {\n                  \"title\": \"The size of the receive buffer used for the listening socket.\",\n                  \"description\": \"This should not typically needed to be changed.\",\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 9007199254740991.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::type_unit\": \"bytes\",\n                    \"docs::human_name\": \"Receive Buffer Bytes\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Udp\",\n                \"docs::human_name\": \"UDP\"\n              }\n            },\n            {\n              \"title\": \"Listen on UDS (Unix domain socket). This only supports Unix stream sockets.\",\n              \"description\": \"For Unix datagram sockets, use the `socket` source instead.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"mode\",\n                \"path\"\n              ],\n              \"properties\": {\n                \"mode\": {\n                  \"title\": \"Listen on UDS (Unix domain socket). This only supports Unix stream sockets.\",\n                  \"description\": \"For Unix datagram sockets, use the `socket` source instead.\",\n                  \"const\": \"unix\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Mode\"\n                  }\n                },\n                \"path\": {\n                  \"title\": \"The Unix socket path.\",\n                  \"description\": \"This should be an absolute path.\",\n                  \"$ref\": \"#/definitions/stdlib::PathBuf\",\n                  \"_metadata\": {\n                    \"docs::examples\": \"/path/to/socket\",\n                    \"docs::human_name\": \"Path\"\n                  }\n                },\n                \"socket_file_mode\": {\n                  \"title\": \"Unix file mode bits to be applied to the unix socket file as its designated file permissions.\",\n                  \"description\": \"The file mode value can be specified in any numeric format supported by your configuration\\nlanguage, but it is most intuitive to use an octal number.\",\n                  \"type\": [\n                    \"integer\",\n                    \"null\"\n                  ],\n                  \"maximum\": 4294967295.0,\n                  \"minimum\": 0.0,\n                  \"_metadata\": {\n                    \"docs::numeric_type\": \"uint\",\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"Socket File Mode\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Unix\",\n                \"docs::human_name\": \"Unix\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"The type of socket to use.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"mode\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"syslog\"\n      }\n    },\n    \"vector::sources::util::http::method::HttpMethod\": {\n      \"description\": \"HTTP method.\",\n      \"oneOf\": [\n        {\n          \"description\": \"HTTP HEAD method.\",\n          \"const\": \"HEAD\",\n          \"_metadata\": {\n            \"logical_name\": \"Head\",\n            \"docs::human_name\": \"Head\"\n          }\n        },\n        {\n          \"description\": \"HTTP GET method.\",\n          \"const\": \"GET\",\n          \"_metadata\": {\n            \"logical_name\": \"Get\",\n            \"docs::human_name\": \"Get\"\n          }\n        },\n        {\n          \"description\": \"HTTP POST method.\",\n          \"const\": \"POST\",\n          \"_metadata\": {\n            \"logical_name\": \"Post\",\n            \"docs::human_name\": \"Post\"\n          }\n        },\n        {\n          \"description\": \"HTTP Put method.\",\n          \"const\": \"PUT\",\n          \"_metadata\": {\n            \"logical_name\": \"Put\",\n            \"docs::human_name\": \"Put\"\n          }\n        },\n        {\n          \"description\": \"HTTP PATCH method.\",\n          \"const\": \"PATCH\",\n          \"_metadata\": {\n            \"logical_name\": \"Patch\",\n            \"docs::human_name\": \"Patch\"\n          }\n        },\n        {\n          \"description\": \"HTTP DELETE method.\",\n          \"const\": \"DELETE\",\n          \"_metadata\": {\n            \"logical_name\": \"Delete\",\n            \"docs::human_name\": \"Delete\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"external\"\n      }\n    },\n    \"vector::sources::util::net::SocketListenAddr\": {\n      \"title\": \"The socket address to listen for connections on, or `systemd{#N}` to use the Nth socket passed by\\nsystemd socket activation.\",\n      \"description\": \"If a socket address is used, it _must_ include a port.\",\n      \"type\": \"string\",\n      \"_metadata\": {\n        \"docs::examples\": [\n          \"0.0.0.0:9000\",\n          \"systemd\",\n          \"systemd#3\"\n        ],\n        \"docs::enum_tagging\": \"untagged\"\n      }\n    },\n    \"vector::sources::vector::VectorConfig\": {\n      \"description\": \"Configuration for the `vector` source.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"address\"\n      ],\n      \"properties\": {\n        \"acknowledgements\": {\n          \"title\": \"Controls how acknowledgements are handled by this source.\",\n          \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n          \"default\": {\n            \"enabled\": null\n          },\n          \"$ref\": \"#/definitions/vector_core::config::SourceAcknowledgementsConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Acknowledgements\"\n          }\n        },\n        \"address\": {\n          \"title\": \"The socket address to listen for connections on.\",\n          \"description\": \"It _must_ include a port.\",\n          \"$ref\": \"#/definitions/stdlib::SocketAddr\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Address\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"tls\": {\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vector_core::tls::settings::TlsEnableableConfig>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"TLS\"\n          }\n        },\n        \"version\": {\n          \"description\": \"Version of the configuration.\",\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"description\": \"Marker type for version two of the configuration for the `vector` source.\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Marker value for version two.\",\n                  \"const\": \"2\",\n                  \"_metadata\": {\n                    \"logical_name\": \"V2\",\n                    \"docs::human_name\": \"V2\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Version\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"source\",\n        \"docs::component_name\": \"vector\"\n      }\n    },\n    \"vector::template::Template\": {\n      \"title\": \"A templated field.\",\n      \"description\": \"In many cases, components can be configured so that part of the component's functionality can be\\ncustomized on a per-event basis. For example, you have a sink that writes events to a file and you want to\\nspecify which file an event should go to by using an event field as part of the\\ninput to the filename used.\\n\\nBy using `Template`, users can specify either fixed strings or templated strings. Templated strings use a common syntax to\\nrefer to fields in an event that is used as the input data when rendering the template. An example of a fixed string\\nis `my-file.log`. An example of a template string is `my-file-{{key}}.log`, where `{{key}}`\\nis the key's value when the template is rendered into a string.\",\n      \"type\": \"string\",\n      \"_metadata\": {\n        \"docs::templateable\": true\n      }\n    },\n    \"vector::transforms::Transforms\": {\n      \"description\": \"Configurable transforms in Vector.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Aggregate metrics passing through a topology.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aggregate` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::aggregate::AggregateConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Aggregate metrics passing through a topology.\",\n                  \"const\": \"aggregate\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Aggregate\",\n            \"logical_name\": \"Aggregate\"\n          }\n        },\n        {\n          \"description\": \"Parse metadata emitted by AWS EC2 instances.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `aws_ec2_metadata` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::aws_ec2_metadata::Ec2Metadata\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Parse metadata emitted by AWS EC2 instances.\",\n                  \"const\": \"aws_ec2_metadata\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"AWS EC2 Metadata\",\n            \"logical_name\": \"Ec2Metadata\"\n          }\n        },\n        {\n          \"description\": \"Deduplicate logs passing through a topology.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `dedupe` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::dedupe::config::DedupeConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Deduplicate logs passing through a topology.\",\n                  \"const\": \"dedupe\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Dedupe\",\n            \"logical_name\": \"Dedupe\"\n          }\n        },\n        {\n          \"description\": \"Filter events based on a set of conditions.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `filter` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::filter::FilterConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Filter events based on a set of conditions.\",\n                  \"const\": \"filter\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Filter\",\n            \"logical_name\": \"Filter\"\n          }\n        },\n        {\n          \"description\": \"Convert log events to metric events.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `log_to_metric` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::log_to_metric::LogToMetricConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Convert log events to metric events.\",\n                  \"const\": \"log_to_metric\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Log To Metric\",\n            \"logical_name\": \"LogToMetric\"\n          }\n        },\n        {\n          \"description\": \"Modify event data using the Lua programming language.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `lua` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::lua::LuaConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Modify event data using the Lua programming language.\",\n                  \"const\": \"lua\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Lua\",\n            \"logical_name\": \"Lua\"\n          }\n        },\n        {\n          \"description\": \"Convert metric events to log events.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `metric_to_log` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::metric_to_log::MetricToLogConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Convert metric events to log events.\",\n                  \"const\": \"metric_to_log\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Metric To Log\",\n            \"logical_name\": \"MetricToLog\"\n          }\n        },\n        {\n          \"description\": \"Collapse multiple log events into a single event based on a set of conditions and merge strategies.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `reduce` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::reduce::config::ReduceConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Collapse multiple log events into a single event based on a set of conditions and merge strategies.\",\n                  \"const\": \"reduce\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Reduce\",\n            \"logical_name\": \"Reduce\"\n          }\n        },\n        {\n          \"description\": \"Modify your observability data as it passes through your topology using Vector Remap Language (VRL).\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `remap` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::remap::RemapConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Modify your observability data as it passes through your topology using Vector Remap Language (VRL).\",\n                  \"const\": \"remap\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Remap\",\n            \"logical_name\": \"Remap\"\n          }\n        },\n        {\n          \"description\": \"Split a stream of events into multiple sub-streams based on user-supplied conditions.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `route` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::route::RouteConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Split a stream of events into multiple sub-streams based on user-supplied conditions.\",\n                  \"const\": \"route\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Route\",\n            \"logical_name\": \"Route\"\n          }\n        },\n        {\n          \"description\": \"Sample events from an event stream based on supplied criteria and at a configurable rate.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `sample` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::sample::config::SampleConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Sample events from an event stream based on supplied criteria and at a configurable rate.\",\n                  \"const\": \"sample\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Sample\",\n            \"logical_name\": \"Sample\"\n          }\n        },\n        {\n          \"description\": \"Limit the cardinality of tags on metrics events as a safeguard against cardinality explosion.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `tag_cardinality_limit` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::tag_cardinality_limit::config::TagCardinalityLimitConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Limit the cardinality of tags on metrics events as a safeguard against cardinality explosion.\",\n                  \"const\": \"tag_cardinality_limit\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Tag Cardinality Limit\",\n            \"logical_name\": \"TagCardinalityLimit\"\n          }\n        },\n        {\n          \"description\": \"Rate limit logs passing through a topology.\",\n          \"allOf\": [\n            {\n              \"description\": \"Configuration for the `throttle` transform.\",\n              \"$ref\": \"#/definitions/vector::transforms::throttle::ThrottleConfig\"\n            },\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"type\"\n              ],\n              \"properties\": {\n                \"type\": {\n                  \"description\": \"Rate limit logs passing through a topology.\",\n                  \"const\": \"throttle\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Type\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::human_name\": \"Throttle\",\n            \"logical_name\": \"Throttle\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"internal\",\n        \"docs::enum_tag_field\": \"type\"\n      }\n    },\n    \"vector::transforms::aggregate::AggregateConfig\": {\n      \"description\": \"Configuration for the `aggregate` transform.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"interval_ms\": {\n          \"title\": \"The interval between flushes, in milliseconds.\",\n          \"description\": \"During this time frame, metrics (beta) with the same series data (name, namespace, tags, and so on) are aggregated.\",\n          \"default\": 10000,\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Flush Interval\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"aggregate\"\n      }\n    },\n    \"vector::transforms::aws_ec2_metadata::Ec2Metadata\": {\n      \"description\": \"Configuration for the `aws_ec2_metadata` transform.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"endpoint\": {\n          \"description\": \"Overrides the default EC2 metadata endpoint.\",\n          \"default\": \"http://169.254.169.254\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Endpoint\"\n          }\n        },\n        \"fields\": {\n          \"description\": \"A list of metadata fields to include in each transformed event.\",\n          \"default\": [\n            \"ami-id\",\n            \"availability-zone\",\n            \"instance-id\",\n            \"instance-type\",\n            \"local-hostname\",\n            \"local-ipv4\",\n            \"public-hostname\",\n            \"public-ipv4\",\n            \"region\",\n            \"subnet-id\",\n            \"vpc-id\",\n            \"role-name\"\n          ],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"instance-id\",\n              \"local-hostname\"\n            ],\n            \"docs::human_name\": \"Fields\"\n          }\n        },\n        \"namespace\": {\n          \"description\": \"Sets a prefix for all event fields added by the transform.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector_lookup::lookup_v2::optional_path::OptionalTargetPath>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"\",\n              \"ec2\",\n              \"aws.ec2\"\n            ],\n            \"docs::human_name\": \"Namespace\"\n          }\n        },\n        \"proxy\": {\n          \"title\": \"Proxy configuration.\",\n          \"description\": \"Configure to proxy traffic through an HTTP(S) proxy when making external requests.\\n\\nSimilar to common proxy configuration convention, you can set different proxies\\nto use based on the type of traffic being proxied, as well as set specific hosts that\\nshould not be proxied.\",\n          \"default\": {},\n          \"$ref\": \"#/definitions/vector_core::config::proxy::ProxyConfig\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Proxy\"\n          }\n        },\n        \"refresh_interval_secs\": {\n          \"description\": \"The interval between querying for updated metadata, in seconds.\",\n          \"default\": 10,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Refresh Interval Secs\"\n          }\n        },\n        \"refresh_timeout_secs\": {\n          \"description\": \"The timeout for querying the EC2 metadata endpoint, in seconds.\",\n          \"default\": 1,\n          \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Refresh Timeout Secs\"\n          }\n        },\n        \"required\": {\n          \"description\": \"Requires the transform to be able to successfully query the EC2 metadata before starting to process the data.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Required\"\n          }\n        },\n        \"tags\": {\n          \"description\": \"A list of instance tags to include in each transformed event.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"Name\",\n              \"Project\"\n            ],\n            \"docs::human_name\": \"Tags\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"aws_ec2_metadata\"\n      }\n    },\n    \"vector::transforms::dedupe::config::DedupeConfig\": {\n      \"description\": \"Configuration for the `dedupe` transform.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"cache\": {\n          \"description\": \"Caching configuration for deduplication.\",\n          \"default\": {\n            \"num_events\": 5000\n          },\n          \"type\": \"object\",\n          \"required\": [\n            \"num_events\"\n          ],\n          \"properties\": {\n            \"num_events\": {\n              \"description\": \"Number of events to cache and use for comparing incoming events to previously seen events.\",\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 1.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Num Events\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Cache\"\n          }\n        },\n        \"fields\": {\n          \"title\": \"Options to control what fields to match against.\",\n          \"description\": \"When no field matching configuration is specified, events are matched using the `timestamp`,\\n`host`, and `message` fields from an event. The specific field names used are those set in\\nthe global [`log schema`][global_log_schema] configuration.\\n\\n[global_log_schema]: https://vector.dev/docs/reference/configuration/global-options/#log_schema\",\n          \"default\": null,\n          \"oneOf\": [\n            {\n              \"type\": \"null\"\n            },\n            {\n              \"title\": \"Options to control what fields to match against.\",\n              \"description\": \"When no field matching configuration is specified, events are matched using the `timestamp`,\\n`host`, and `message` fields from an event. The specific field names used are those set in\\nthe global [`log schema`][global_log_schema] configuration.\\n\\n[global_log_schema]: https://vector.dev/docs/reference/configuration/global-options/#log_schema\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Matches events using only the specified fields.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"match\"\n                  ],\n                  \"properties\": {\n                    \"match\": {\n                      \"description\": \"A wrapper around `OwnedTargetPath` that allows it to be used in Vector config\\nwith prefix default to `PathPrefix::Event`\",\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigTargetPath\"\n                      },\n                      \"_metadata\": {\n                        \"docs::examples\": [\n                          \"field1\",\n                          \"parent.child_field\"\n                        ],\n                        \"docs::human_name\": \"Match\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"MatchFields\",\n                    \"docs::human_name\": \"Match Fields\"\n                  }\n                },\n                {\n                  \"description\": \"Matches events using all fields except for the ignored ones.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"ignore\"\n                  ],\n                  \"properties\": {\n                    \"ignore\": {\n                      \"description\": \"A wrapper around `OwnedTargetPath` that allows it to be used in Vector config\\nwith prefix default to `PathPrefix::Event`\",\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"$ref\": \"#/definitions/vector_lookup::lookup_v2::ConfigTargetPath\"\n                      },\n                      \"_metadata\": {\n                        \"docs::examples\": [\n                          \"field1\",\n                          \"parent.child_field\",\n                          \"host\",\n                          \"hostname\"\n                        ],\n                        \"docs::human_name\": \"Ignore\"\n                      }\n                    }\n                  },\n                  \"_metadata\": {\n                    \"logical_name\": \"IgnoreFields\",\n                    \"docs::human_name\": \"Ignore Fields\"\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\"\n              }\n            }\n          ],\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Fields\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"dedupe\"\n      }\n    },\n    \"vector::transforms::filter::FilterConfig\": {\n      \"description\": \"Configuration for the `filter` transform.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"condition\"\n      ],\n      \"properties\": {\n        \"condition\": {\n          \"title\": \"The condition that every input event is matched against.\",\n          \"description\": \"If an event is matched by the condition, it is forwarded. Otherwise, the event is dropped.\",\n          \"$ref\": \"#/definitions/vector::conditions::AnyCondition\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Condition\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"filter\"\n      }\n    },\n    \"vector::transforms::log_to_metric::LogToMetricConfig\": {\n      \"description\": \"Configuration for the `log_to_metric` transform.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"metrics\"\n      ],\n      \"properties\": {\n        \"all_metrics\": {\n          \"title\": \"Setting this flag changes the behavior of this transformation.<br />\\n<p>Notably the `metrics` field will be ignored.</p>\\n<p>All incoming events will be processed and if possible they will be converted to log events.\\nOtherwise, only items specified in the 'metrics' field will be processed.</p>\\n<pre class=\\\"chroma\\\"><code class=\\\"language-toml\\\" data-lang=\\\"toml\\\">use serde_json::json;\\nlet json_event = json!({\\n    \\\"counter\\\": {\\n        \\\"value\\\": 10.0\\n    },\\n    \\\"kind\\\": \\\"incremental\\\",\\n    \\\"name\\\": \\\"test.transform.counter\\\",\\n    \\\"tags\\\": {\\n        \\\"env\\\": \\\"test_env\\\",\\n        \\\"host\\\": \\\"localhost\\\"\\n    }\\n});\\n</code></pre>\",\n          \"description\": \"This is an example JSON representation of a counter with the following properties:\\n\\n- `counter`: An object with a single property `value` representing the counter value, in this case, `10.0`).\\n- `kind`: A string indicating the kind of counter, in this case, \\\"incremental\\\".\\n- `name`: A string representing the name of the counter, here set to \\\"test.transform.counter\\\".\\n- `tags`: An object containing additional tags such as \\\"env\\\" and \\\"host\\\".\\n\\nObjects that can be processed include counter, histogram, gauge, set and summary.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"All Metrics\"\n          }\n        },\n        \"metrics\": {\n          \"description\": \"A list of metrics to generate.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"description\": \"Specification of a metric derived from a log event.\",\n            \"allOf\": [\n              {\n                \"type\": \"object\",\n                \"required\": [\n                  \"field\"\n                ],\n                \"properties\": {\n                  \"field\": {\n                    \"description\": \"Name of the field in the event to generate the metric.\",\n                    \"$ref\": \"#/definitions/vector::template::Template\",\n                    \"_metadata\": {\n                      \"docs::human_name\": \"Field\"\n                    }\n                  },\n                  \"name\": {\n                    \"title\": \"Overrides the name of the counter.\",\n                    \"description\": \"If not specified, `field` is used as the name of the metric.\",\n                    \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n                    \"_metadata\": {\n                      \"docs::human_name\": \"Name\"\n                    }\n                  },\n                  \"namespace\": {\n                    \"description\": \"Sets the namespace for the metric.\",\n                    \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n                    \"_metadata\": {\n                      \"docs::human_name\": \"Namespace\"\n                    }\n                  },\n                  \"tags\": {\n                    \"description\": \"Tags to apply to the metric.\",\n                    \"type\": [\n                      \"object\",\n                      \"null\"\n                    ],\n                    \"additionalProperties\": {\n                      \"title\": \"Specification of the value of a created tag.\",\n                      \"description\": \"This may be a single value, a `null` for a bare tag, or an array of either.\",\n                      \"oneOf\": [\n                        {\n                          \"description\": \"A single tag value.\",\n                          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n                          \"_metadata\": {\n                            \"logical_name\": \"Plain\",\n                            \"docs::human_name\": \"Plain\"\n                          }\n                        },\n                        {\n                          \"description\": \"An array of values to give to the same tag name.\",\n                          \"type\": \"array\",\n                          \"items\": {\n                            \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\"\n                          },\n                          \"_metadata\": {\n                            \"logical_name\": \"Multi\",\n                            \"docs::human_name\": \"Multi\"\n                          }\n                        }\n                      ],\n                      \"unevaluatedProperties\": false,\n                      \"_metadata\": {\n                        \"docs::enum_tagging\": \"untagged\"\n                      }\n                    },\n                    \"_metadata\": {\n                      \"docs::optional\": true,\n                      \"docs::additional_props_description\": \"A metric tag.\",\n                      \"docs::human_name\": \"Tags\"\n                    }\n                  }\n                }\n              },\n              {\n                \"description\": \"Specification of the type of an individual metric, and any associated data.\",\n                \"oneOf\": [\n                  {\n                    \"description\": \"A counter.\",\n                    \"allOf\": [\n                      {\n                        \"description\": \"Specification of a counter derived from a log event.\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"increment_by_value\": {\n                            \"description\": \"Increments the counter by the value in `field`, instead of only by `1`.\",\n                            \"default\": false,\n                            \"type\": \"boolean\",\n                            \"_metadata\": {\n                              \"docs::human_name\": \"Increment By Value\"\n                            }\n                          },\n                          \"kind\": {\n                            \"title\": \"Metric kind.\",\n                            \"description\": \"Metrics can be either absolute of incremental. Absolute metrics represent a sort of \\\"last write wins\\\" scenario,\\nwhere the latest absolute value seen is meant to be the actual metric value.  In contrast, and perhaps intuitively,\\nincremental metrics are meant to be additive, such that we don't know what total value of the metric is, but we know\\nthat we'll be adding or subtracting the given value from it.\\n\\nGenerally speaking, most metrics storage systems deal with incremental updates. A notable exception is Prometheus,\\nwhich deals with, and expects, absolute values from clients.\",\n                            \"default\": \"incremental\",\n                            \"$ref\": \"#/definitions/vector_core::event::metric::MetricKind\",\n                            \"_metadata\": {\n                              \"docs::human_name\": \"Kind\"\n                            }\n                          }\n                        }\n                      },\n                      {\n                        \"type\": \"object\",\n                        \"required\": [\n                          \"type\"\n                        ],\n                        \"properties\": {\n                          \"type\": {\n                            \"description\": \"A counter.\",\n                            \"const\": \"counter\",\n                            \"_metadata\": {\n                              \"docs::human_name\": \"Type\"\n                            }\n                          }\n                        }\n                      }\n                    ],\n                    \"_metadata\": {\n                      \"logical_name\": \"Counter\",\n                      \"docs::human_name\": \"Counter\"\n                    }\n                  },\n                  {\n                    \"description\": \"A histogram.\",\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"type\"\n                    ],\n                    \"properties\": {\n                      \"type\": {\n                        \"description\": \"A histogram.\",\n                        \"const\": \"histogram\",\n                        \"_metadata\": {\n                          \"docs::human_name\": \"Type\"\n                        }\n                      }\n                    },\n                    \"_metadata\": {\n                      \"logical_name\": \"Histogram\",\n                      \"docs::human_name\": \"Histogram\"\n                    }\n                  },\n                  {\n                    \"description\": \"A gauge.\",\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"type\"\n                    ],\n                    \"properties\": {\n                      \"type\": {\n                        \"description\": \"A gauge.\",\n                        \"const\": \"gauge\",\n                        \"_metadata\": {\n                          \"docs::human_name\": \"Type\"\n                        }\n                      }\n                    },\n                    \"_metadata\": {\n                      \"logical_name\": \"Gauge\",\n                      \"docs::human_name\": \"Gauge\"\n                    }\n                  },\n                  {\n                    \"description\": \"A set.\",\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"type\"\n                    ],\n                    \"properties\": {\n                      \"type\": {\n                        \"description\": \"A set.\",\n                        \"const\": \"set\",\n                        \"_metadata\": {\n                          \"docs::human_name\": \"Type\"\n                        }\n                      }\n                    },\n                    \"_metadata\": {\n                      \"logical_name\": \"Set\",\n                      \"docs::human_name\": \"Set\"\n                    }\n                  },\n                  {\n                    \"description\": \"A summary.\",\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"type\"\n                    ],\n                    \"properties\": {\n                      \"type\": {\n                        \"description\": \"A summary.\",\n                        \"const\": \"summary\",\n                        \"_metadata\": {\n                          \"docs::human_name\": \"Type\"\n                        }\n                      }\n                    },\n                    \"_metadata\": {\n                      \"logical_name\": \"Summary\",\n                      \"docs::human_name\": \"Summary\"\n                    }\n                  }\n                ],\n                \"_metadata\": {\n                  \"docs::enum_tag_description\": \"The type of metric to create.\",\n                  \"docs::enum_tagging\": \"internal\",\n                  \"docs::enum_tag_field\": \"type\"\n                }\n              }\n            ],\n            \"unevaluatedProperties\": false\n          },\n          \"_metadata\": {\n            \"docs::human_name\": \"Metrics\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"log_to_metric\"\n      }\n    },\n    \"vector::transforms::lua::LuaConfig\": {\n      \"description\": \"Configuration for the `lua` transform.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Configuration for version one.\",\n          \"allOf\": [\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"version\": {\n                  \"title\": \"Transform API version.\",\n                  \"description\": \"Specifying this version ensures that backward compatibility is not broken.\",\n                  \"oneOf\": [\n                    {\n                      \"type\": \"null\"\n                    },\n                    {\n                      \"description\": \"Marker type for the version one of the configuration for the `lua` transform.\",\n                      \"oneOf\": [\n                        {\n                          \"title\": \"Lua transform API version 1.\",\n                          \"description\": \"This version is deprecated and will be removed in a future version.\",\n                          \"const\": \"1\",\n                          \"_metadata\": {\n                            \"deprecated\": true,\n                            \"logical_name\": \"V1\",\n                            \"docs::human_name\": \"V1\"\n                          }\n                        }\n                      ],\n                      \"_metadata\": {\n                        \"docs::enum_tagging\": \"external\"\n                      }\n                    }\n                  ],\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::human_name\": \"Version\"\n                  }\n                }\n              }\n            },\n            {\n              \"description\": \"Configuration for version one of the `lua` transform.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"source\"\n              ],\n              \"properties\": {\n                \"search_dirs\": {\n                  \"title\": \"A list of directories to search when loading a Lua file via the `require` function.\",\n                  \"description\": \"If not specified, the modules are looked up in the configuration directories.\",\n                  \"default\": [],\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"string\"\n                  },\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Search Dirs\"\n                  }\n                },\n                \"source\": {\n                  \"description\": \"The Lua program to execute for each event.\",\n                  \"type\": \"string\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Source\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"V1\",\n            \"docs::human_name\": \"V1\"\n          }\n        },\n        {\n          \"description\": \"Configuration for version two.\",\n          \"allOf\": [\n            {\n              \"type\": \"object\",\n              \"required\": [\n                \"version\"\n              ],\n              \"properties\": {\n                \"version\": {\n                  \"title\": \"Transform API version.\",\n                  \"description\": \"Specifying this version ensures that backward compatibility is not broken.\",\n                  \"oneOf\": [\n                    {\n                      \"description\": \"Lua transform API version 2.\",\n                      \"const\": \"2\",\n                      \"_metadata\": {\n                        \"logical_name\": \"V2\",\n                        \"docs::human_name\": \"V2\"\n                      }\n                    }\n                  ],\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::enum_tagging\": \"external\",\n                    \"docs::human_name\": \"Version\"\n                  }\n                }\n              }\n            },\n            {\n              \"description\": \"Configuration for the version two of the `lua` transform.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"hooks\"\n              ],\n              \"properties\": {\n                \"hooks\": {\n                  \"title\": \"Lifecycle hooks.\",\n                  \"description\": \"These hooks can be set to perform additional processing during the lifecycle of the transform.\",\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"process\"\n                  ],\n                  \"properties\": {\n                    \"init\": {\n                      \"title\": \"The function called when the first event comes in, before `hooks.process` is called.\",\n                      \"description\": \"It can produce new events using the `emit` function.\\n\\nThis can either be inline Lua that defines a closure to use, or the name of the Lua function to call. In both\\ncases, the closure/function takes a single parameter, `emit`, which is a reference to a function for emitting events.\",\n                      \"type\": [\n                        \"string\",\n                        \"null\"\n                      ],\n                      \"_metadata\": {\n                        \"docs::optional\": true,\n                        \"docs::examples\": [\n                          \"function (emit)\\n\\t-- Custom Lua code here\\nend\",\n                          \"init\"\n                        ],\n                        \"docs::human_name\": \"Init\"\n                      }\n                    },\n                    \"process\": {\n                      \"title\": \"The function called for each incoming event.\",\n                      \"description\": \"It can produce new events using the `emit` function.\\n\\nThis can either be inline Lua that defines a closure to use, or the name of the Lua function to call. In both\\ncases, the closure/function takes two parameters. The first parameter, `event`, is the event being processed,\\nwhile the second parameter, `emit`, is a reference to a function for emitting events.\",\n                      \"type\": \"string\",\n                      \"_metadata\": {\n                        \"docs::examples\": [\n                          \"function (event, emit)\\n\\tevent.log.field = \\\"value\\\" -- set value of a field\\n\\tevent.log.another_field = nil -- remove field\\n\\tevent.log.first, event.log.second = nil, event.log.first -- rename field\\n\\t-- Very important! Emit the processed event.\\n\\temit(event)\\nend\",\n                          \"process\"\n                        ],\n                        \"docs::human_name\": \"Process\"\n                      }\n                    },\n                    \"shutdown\": {\n                      \"title\": \"The function called when the transform is stopped.\",\n                      \"description\": \"It can produce new events using the `emit` function.\\n\\nThis can either be inline Lua that defines a closure to use, or the name of the Lua function to call. In both\\ncases, the closure/function takes a single parameter, `emit`, which is a reference to a function for emitting events.\",\n                      \"type\": [\n                        \"string\",\n                        \"null\"\n                      ],\n                      \"_metadata\": {\n                        \"docs::optional\": true,\n                        \"docs::examples\": [\n                          \"function (emit)\\n\\t-- Custom Lua code here\\nend\",\n                          \"shutdown\"\n                        ],\n                        \"docs::human_name\": \"Shutdown\"\n                      }\n                    }\n                  },\n                  \"unevaluatedProperties\": false,\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Hooks\"\n                  }\n                },\n                \"metric_tag_values\": {\n                  \"title\": \"When set to `single`, metric tag values are exposed as single strings, the\\nsame as they were before this config option. Tags with multiple values show the last assigned value, and null values\\nare ignored.\",\n                  \"description\": \"When set to `full`, all metric tags are exposed as arrays of either string or null\\nvalues.\",\n                  \"default\": \"single\",\n                  \"$ref\": \"#/definitions/codecs::MetricTagValues\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Metric Tag Values\"\n                  }\n                },\n                \"search_dirs\": {\n                  \"title\": \"A list of directories to search when loading a Lua file via the `require` function.\",\n                  \"description\": \"If not specified, the modules are looked up in the configuration directories.\",\n                  \"default\": [],\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/definitions/stdlib::PathBuf\"\n                  },\n                  \"_metadata\": {\n                    \"docs::examples\": \"/etc/vector/lua\",\n                    \"docs::human_name\": \"Search Directories\"\n                  }\n                },\n                \"source\": {\n                  \"title\": \"The Lua program to initialize the transform with.\",\n                  \"description\": \"The program can be used to import external dependencies, as well as define the functions\\nused for the various lifecycle hooks. However, it's not strictly required, as the lifecycle\\nhooks can be configured directly with inline Lua source for each respective hook.\",\n                  \"type\": [\n                    \"string\",\n                    \"null\"\n                  ],\n                  \"_metadata\": {\n                    \"docs::optional\": true,\n                    \"docs::examples\": [\n                      \"function init()\\n\\tcount = 0\\nend\\n\\nfunction process()\\n\\tcount = count + 1\\nend\\n\\nfunction timer_handler(emit)\\n\\temit(make_counter(counter))\\n\\tcounter = 0\\nend\\n\\nfunction shutdown(emit)\\n\\temit(make_counter(counter))\\nend\\n\\nfunction make_counter(value)\\n\\treturn metric = {\\n\\t\\tname = \\\"event_counter\\\",\\n\\t\\tkind = \\\"incremental\\\",\\n\\t\\ttimestamp = os.date(\\\"!*t\\\"),\\n\\t\\tcounter = {\\n\\t\\t\\tvalue = value\\n\\t\\t}\\n \\t}\\nend\",\n                      \"-- external file with hooks and timers defined\\nrequire('custom_module')\"\n                    ],\n                    \"docs::human_name\": \"Source\"\n                  }\n                },\n                \"timers\": {\n                  \"description\": \"A list of timers which should be configured and executed periodically.\",\n                  \"default\": [],\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"description\": \"A Lua timer.\",\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"handler\",\n                      \"interval_seconds\"\n                    ],\n                    \"properties\": {\n                      \"handler\": {\n                        \"title\": \"The handler function which is called when the timer ticks.\",\n                        \"description\": \"It can produce new events using the `emit` function.\\n\\nThis can either be inline Lua that defines a closure to use, or the name of the Lua function\\nto call. In both cases, the closure/function takes a single parameter, `emit`, which is a\\nreference to a function for emitting events.\",\n                        \"type\": \"string\",\n                        \"_metadata\": {\n                          \"docs::examples\": \"timer_handler\",\n                          \"docs::human_name\": \"Handler\"\n                        }\n                      },\n                      \"interval_seconds\": {\n                        \"description\": \"The interval to execute the handler, in seconds.\",\n                        \"$ref\": \"#/definitions/serde_with::DurationSeconds\",\n                        \"_metadata\": {\n                          \"docs::human_name\": \"Interval\"\n                        }\n                      }\n                    },\n                    \"unevaluatedProperties\": false\n                  },\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Timers\"\n                  }\n                }\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"logical_name\": \"V2\",\n            \"docs::human_name\": \"V2\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"lua\",\n        \"docs::enum_tagging\": \"untagged\"\n      }\n    },\n    \"vector::transforms::metric_to_log::MetricToLogConfig\": {\n      \"description\": \"Configuration for the `metric_to_log` transform.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"host_tag\": {\n          \"title\": \"Name of the tag in the metric to use for the source host.\",\n          \"description\": \"If present, the value of the tag is set on the generated log event in the `host` field,\\nwhere the field key uses the [global `host_key` option][global_log_schema_host_key].\\n\\n[global_log_schema_host_key]: https://vector.dev/docs/reference/configuration//global-options#log_schema.host_key\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"host\",\n              \"hostname\"\n            ],\n            \"docs::human_name\": \"Host Tag\"\n          }\n        },\n        \"log_namespace\": {\n          \"description\": \"The namespace to use for logs. This overrides the global setting.\",\n          \"default\": null,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Log Namespace\"\n          }\n        },\n        \"metric_tag_values\": {\n          \"title\": \"Controls how metric tag values are encoded.\",\n          \"description\": \"When set to `single`, only the last non-bare value of tags are displayed with the\\nmetric.  When set to `full`, all metric tags are exposed as separate assignments as\\ndescribed by [the `native_json` codec][vector_native_json].\\n\\n[vector_native_json]: https://github.com/vectordotdev/vector/blob/master/lib/codecs/tests/data/native_encoding/schema.cue\",\n          \"default\": \"single\",\n          \"$ref\": \"#/definitions/codecs::MetricTagValues\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Metric Tag Values\"\n          }\n        },\n        \"timezone\": {\n          \"title\": \"The name of the time zone to apply to timestamp conversions that do not contain an explicit\\ntime zone.\",\n          \"description\": \"This overrides the [global `timezone`][global_timezone] option. The time zone name may be\\nany name in the [TZ database][tz_database] or `local` to indicate system local time.\\n\\n[global_timezone]: https://vector.dev/docs/reference/configuration//global-options#timezone\\n[tz_database]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\",\n          \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Timezone\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"metric_to_log\"\n      }\n    },\n    \"vector::transforms::reduce::config::ReduceConfig\": {\n      \"description\": \"Configuration for the `reduce` transform.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"end_every_period_ms\": {\n          \"description\": \"If supplied, every time this interval elapses for a given grouping, the reduced value\\nfor that grouping is flushed. Checked every flush_period_ms.\",\n          \"default\": null,\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::human_name\": \"End-Every Period\"\n          }\n        },\n        \"ends_when\": {\n          \"title\": \"A condition used to distinguish the final event of a transaction.\",\n          \"description\": \"If this condition resolves to `true` for an event, the current transaction is immediately\\nflushed with this event.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::conditions::AnyCondition>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Ends When\"\n          }\n        },\n        \"expire_after_ms\": {\n          \"description\": \"The maximum period of time to wait after the last event is received, in milliseconds, before\\na combined event should be considered complete.\",\n          \"default\": 30000,\n          \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Expire After\"\n          }\n        },\n        \"flush_period_ms\": {\n          \"description\": \"The interval to check for and flush any expired events, in milliseconds.\",\n          \"default\": 1000,\n          \"$ref\": \"#/definitions/serde_with::DurationMilliSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Flush Period\"\n          }\n        },\n        \"group_by\": {\n          \"title\": \"An ordered list of fields by which to group events.\",\n          \"description\": \"Each group with matching values for the specified keys is reduced independently, allowing\\nyou to keep independent event streams separate. When no fields are specified, all events\\nare combined in a single group.\\n\\nFor example, if `group_by = [\\\"host\\\", \\\"region\\\"]`, then all incoming events that have the same\\nhost and region are grouped together before being reduced.\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"request_id\",\n              \"user_id\",\n              \"transaction_id\"\n            ],\n            \"docs::human_name\": \"Group By\"\n          }\n        },\n        \"max_events\": {\n          \"description\": \"The maximum number of events to group together.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 1.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Max Events\"\n          }\n        },\n        \"merge_strategies\": {\n          \"title\": \"A map of field names to custom merge strategies.\",\n          \"description\": \"For each field specified, the given strategy is used for combining events rather than\\nthe default behavior.\\n\\nThe default behavior is as follows:\\n\\n- The first value of a string field is kept and subsequent values are discarded.\\n- For timestamp fields the first is kept and a new field `[field-name]_end` is added with\\n  the last received timestamp value.\\n- Numeric values are summed.\",\n          \"default\": {},\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"description\": \"Strategies for merging events.\",\n            \"oneOf\": [\n              {\n                \"description\": \"Discard all but the first value found.\",\n                \"const\": \"discard\",\n                \"_metadata\": {\n                  \"logical_name\": \"Discard\",\n                  \"docs::human_name\": \"Discard\"\n                }\n              },\n              {\n                \"title\": \"Discard all but the last value found.\",\n                \"description\": \"Works as a way to coalesce by not retaining `null`.\",\n                \"const\": \"retain\",\n                \"_metadata\": {\n                  \"logical_name\": \"Retain\",\n                  \"docs::human_name\": \"Retain\"\n                }\n              },\n              {\n                \"description\": \"Sum all numeric values.\",\n                \"const\": \"sum\",\n                \"_metadata\": {\n                  \"logical_name\": \"Sum\",\n                  \"docs::human_name\": \"Sum\"\n                }\n              },\n              {\n                \"description\": \"Keep the maximum numeric value seen.\",\n                \"const\": \"max\",\n                \"_metadata\": {\n                  \"logical_name\": \"Max\",\n                  \"docs::human_name\": \"Max\"\n                }\n              },\n              {\n                \"description\": \"Keep the minimum numeric value seen.\",\n                \"const\": \"min\",\n                \"_metadata\": {\n                  \"logical_name\": \"Min\",\n                  \"docs::human_name\": \"Min\"\n                }\n              },\n              {\n                \"description\": \"Append each value to an array.\",\n                \"const\": \"array\",\n                \"_metadata\": {\n                  \"logical_name\": \"Array\",\n                  \"docs::human_name\": \"Array\"\n                }\n              },\n              {\n                \"description\": \"Concatenate each string value, delimited with a space.\",\n                \"const\": \"concat\",\n                \"_metadata\": {\n                  \"logical_name\": \"Concat\",\n                  \"docs::human_name\": \"Concat\"\n                }\n              },\n              {\n                \"description\": \"Concatenate each string value, delimited with a newline.\",\n                \"const\": \"concat_newline\",\n                \"_metadata\": {\n                  \"logical_name\": \"ConcatNewline\",\n                  \"docs::human_name\": \"Concat Newline\"\n                }\n              },\n              {\n                \"description\": \"Concatenate each string, without a delimiter.\",\n                \"const\": \"concat_raw\",\n                \"_metadata\": {\n                  \"logical_name\": \"ConcatRaw\",\n                  \"docs::human_name\": \"Concat Raw\"\n                }\n              },\n              {\n                \"description\": \"Keep the shortest array seen.\",\n                \"const\": \"shortest_array\",\n                \"_metadata\": {\n                  \"logical_name\": \"ShortestArray\",\n                  \"docs::human_name\": \"Shortest Array\"\n                }\n              },\n              {\n                \"description\": \"Keep the longest array seen.\",\n                \"const\": \"longest_array\",\n                \"_metadata\": {\n                  \"logical_name\": \"LongestArray\",\n                  \"docs::human_name\": \"Longest Array\"\n                }\n              },\n              {\n                \"description\": \"Create a flattened array of all unique values.\",\n                \"const\": \"flat_unique\",\n                \"_metadata\": {\n                  \"logical_name\": \"FlatUnique\",\n                  \"docs::human_name\": \"Flat Unique\"\n                }\n              }\n            ],\n            \"unevaluatedProperties\": false,\n            \"_metadata\": {\n              \"docs::enum_tagging\": \"external\"\n            }\n          },\n          \"_metadata\": {\n            \"docs::additional_props_description\": \"An individual merge strategy.\",\n            \"docs::human_name\": \"Merge Strategies\"\n          }\n        },\n        \"starts_when\": {\n          \"title\": \"A condition used to distinguish the first event of a transaction.\",\n          \"description\": \"If this condition resolves to `true` for an event, the previous transaction is flushed\\n(without this event) and a new transaction is started.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::conditions::AnyCondition>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Starts When\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"reduce\"\n      }\n    },\n    \"vector::transforms::remap::RemapConfig\": {\n      \"description\": \"Configuration for the `remap` transform.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"drop_on_abort\": {\n          \"title\": \"Drops any event that is manually aborted during processing.\",\n          \"description\": \"If a VRL program is manually aborted (using [`abort`][vrl_docs_abort]) when\\nprocessing an event, this option controls whether the original, unmodified event is sent\\ndownstream without any modifications or if it is dropped.\\n\\nAdditionally, dropped events can potentially be diverted to a specially-named output for\\nfurther logging and analysis by setting `reroute_dropped`.\\n\\n[vrl_docs_abort]: https://vector.dev/docs/reference/vrl/expressions/#abort\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Drop Event on Abort\"\n          }\n        },\n        \"drop_on_error\": {\n          \"title\": \"Drops any event that encounters an error during processing.\",\n          \"description\": \"Normally, if a VRL program encounters an error when processing an event, the original,\\nunmodified event is sent downstream. In some cases, you may not want to send the event\\nany further, such as if certain transformation or enrichment is strictly required. Setting\\n`drop_on_error` to `true` allows you to ensure these events do not get processed any\\nfurther.\\n\\nAdditionally, dropped events can potentially be diverted to a specially named output for\\nfurther logging and analysis by setting `reroute_dropped`.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Drop Event on Error\"\n          }\n        },\n        \"file\": {\n          \"title\": \"File path to the [Vector Remap Language][vrl] (VRL) program to execute for each event.\",\n          \"description\": \"If a relative path is provided, its root is the current working directory.\\n\\nRequired if `source` is missing.\\n\\n[vrl]: https://vector.dev/docs/reference/vrl\",\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::examples\": \"./my/program.vrl\",\n            \"docs::human_name\": \"File\"\n          }\n        },\n        \"metric_tag_values\": {\n          \"title\": \"When set to `single`, metric tag values are exposed as single strings, the\\nsame as they were before this config option. Tags with multiple values show the last assigned value, and null values\\nare ignored.\",\n          \"description\": \"When set to `full`, all metric tags are exposed as arrays of either string or null\\nvalues.\",\n          \"default\": \"single\",\n          \"$ref\": \"#/definitions/codecs::MetricTagValues\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Metric Tag Values\"\n          }\n        },\n        \"reroute_dropped\": {\n          \"title\": \"Reroutes dropped events to a named output instead of halting processing on them.\",\n          \"description\": \"When using `drop_on_error` or `drop_on_abort`, events that are \\\"dropped\\\" are processed no\\nfurther. In some cases, it may be desirable to keep the events around for further analysis,\\ndebugging, or retrying.\\n\\nIn these cases, `reroute_dropped` can be set to `true` which forwards the original event\\nto a specially-named output, `dropped`. The original event is annotated with additional\\nfields describing why the event was dropped.\",\n          \"default\": false,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Reroute Dropped Events\"\n          }\n        },\n        \"runtime\": {\n          \"description\": \"The runtime to use for executing VRL code.\",\n          \"default\": \"ast\",\n          \"type\": \"string\",\n          \"_metadata\": {\n            \"docs::hidden\": true,\n            \"docs::human_name\": \"Runtime\"\n          }\n        },\n        \"source\": {\n          \"title\": \"The [Vector Remap Language][vrl] (VRL) program to execute for each event.\",\n          \"description\": \"Required if `file` is missing.\\n\\n[vrl]: https://vector.dev/docs/reference/vrl\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \". = parse_json!(.message)\\n.new_field = \\\"new value\\\"\\n.status = to_int!(.status)\\n.duration = parse_duration!(.duration, \\\"s\\\")\\n.new_name = del(.old_name)\",\n            \"docs::syntax_override\": \"remap_program\",\n            \"docs::human_name\": \"Source\"\n          }\n        },\n        \"timezone\": {\n          \"title\": \"The name of the timezone to apply to timestamp conversions that do not contain an explicit\\ntime zone.\",\n          \"description\": \"This overrides the [global `timezone`][global_timezone] option. The time zone name may be\\nany name in the [TZ database][tz_database], or `local` to indicate system local time.\\n\\n[global_timezone]: https://vector.dev/docs/reference/configuration//global-options#timezone\\n[tz_database]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\",\n          \"default\": null,\n          \"$ref\": \"#/definitions/core::option::Option<vrl::compiler::datetime::TimeZone>\",\n          \"_metadata\": {\n            \"docs::advanced\": true,\n            \"docs::human_name\": \"Timezone\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"remap\"\n      }\n    },\n    \"vector::transforms::route::RouteConfig\": {\n      \"description\": \"Configuration for the `route` transform.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"reroute_unmatched\": {\n          \"title\": \"Reroutes unmatched events to a named output instead of silently discarding them.\",\n          \"description\": \"Normally, if an event doesn't match any defined route, it is sent to the `<transform_name>._unmatched`\\noutput for further processing. In some cases, you may want to simply discard unmatched events and not\\nprocess them any further.\\n\\nIn these cases, `reroute_unmatched` can be set to `false` to disable the `<transform_name>._unmatched`\\noutput and instead silently discard any unmatched events.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Reroute Unmatched Events\"\n          }\n        },\n        \"route\": {\n          \"title\": \"A table of route identifiers to logical conditions representing the filter of the route.\",\n          \"description\": \"Each route can then be referenced as an input by other components with the name\\n`<transform_name>.<route_id>`. If an event doesn’t match any route, and if `reroute_unmatched`\\nis set to `true` (the default), it is sent to the `<transform_name>._unmatched` output.\\nOtherwise, the unmatched event is instead silently discarded.\\n\\nBoth `_unmatched`, as well as `_default`, are reserved output names and thus cannot be used\\nas a route name.\",\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/vector::conditions::AnyCondition\"\n          },\n          \"_metadata\": {\n            \"docs::additional_props_description\": \"An individual route.\",\n            \"docs::human_name\": \"Route\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"route\"\n      }\n    },\n    \"vector::transforms::sample::config::SampleConfig\": {\n      \"description\": \"Configuration for the `sample` transform.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"rate\"\n      ],\n      \"properties\": {\n        \"exclude\": {\n          \"description\": \"A logical condition used to exclude events from sampling.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::conditions::AnyCondition>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Exclude\"\n          }\n        },\n        \"key_field\": {\n          \"title\": \"The name of the field whose value is hashed to determine if the event should be\\nsampled.\",\n          \"description\": \"Each unique value for the key creates a bucket of related events to be sampled together\\nand the rate is applied to the buckets themselves to sample `1/N` buckets.  The overall rate\\nof sampling may differ from the configured one if values in the field are not uniformly\\ndistributed. If left unspecified, or if the event doesn’t have `key_field`, then the\\nevent is sampled independently.\\n\\nThis can be useful to, for example, ensure that all logs for a given transaction are\\nsampled together, but that overall `1/N` transactions are sampled.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"message\",\n            \"docs::human_name\": \"Key Field\"\n          }\n        },\n        \"rate\": {\n          \"title\": \"The rate at which events are forwarded, expressed as `1/N`.\",\n          \"description\": \"For example, `rate = 1500` means 1 out of every 1500 events are forwarded and the rest are\\ndropped.\",\n          \"type\": \"integer\",\n          \"maximum\": 9007199254740991.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::examples\": 1500,\n            \"docs::human_name\": \"Rate\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"sample\"\n      }\n    },\n    \"vector::transforms::tag_cardinality_limit::config::TagCardinalityLimitConfig\": {\n      \"description\": \"Configuration for the `tag_cardinality_limit` transform.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"limit_exceeded_action\": {\n              \"description\": \"Possible actions to take when an event arrives that would exceed the cardinality limit for one\\nor more of its tags.\",\n              \"default\": \"drop_tag\",\n              \"oneOf\": [\n                {\n                  \"description\": \"Drop the tag(s) that would exceed the configured limit.\",\n                  \"const\": \"drop_tag\",\n                  \"_metadata\": {\n                    \"logical_name\": \"DropTag\",\n                    \"docs::human_name\": \"Drop Tag\"\n                  }\n                },\n                {\n                  \"description\": \"Drop the entire event itself.\",\n                  \"const\": \"drop_event\",\n                  \"_metadata\": {\n                    \"logical_name\": \"DropEvent\",\n                    \"docs::human_name\": \"Drop Event\"\n                  }\n                }\n              ],\n              \"unevaluatedProperties\": false,\n              \"_metadata\": {\n                \"docs::enum_tagging\": \"external\",\n                \"docs::human_name\": \"Limit Exceeded Action\"\n              }\n            },\n            \"value_limit\": {\n              \"description\": \"How many distinct values to accept for any given key.\",\n              \"default\": 500,\n              \"type\": \"integer\",\n              \"maximum\": 9007199254740991.0,\n              \"minimum\": 0.0,\n              \"_metadata\": {\n                \"docs::numeric_type\": \"uint\",\n                \"docs::human_name\": \"Value Limit\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"Controls the approach taken for tracking tag cardinality.\",\n          \"oneOf\": [\n            {\n              \"title\": \"Tracks cardinality exactly.\",\n              \"description\": \"This mode has higher memory requirements than `probabilistic`, but never falsely outputs\\nmetrics with new tags after the limit has been hit.\",\n              \"type\": \"object\",\n              \"required\": [\n                \"mode\"\n              ],\n              \"properties\": {\n                \"mode\": {\n                  \"title\": \"Tracks cardinality exactly.\",\n                  \"description\": \"This mode has higher memory requirements than `probabilistic`, but never falsely outputs\\nmetrics with new tags after the limit has been hit.\",\n                  \"const\": \"exact\",\n                  \"_metadata\": {\n                    \"docs::human_name\": \"Mode\"\n                  }\n                }\n              },\n              \"_metadata\": {\n                \"logical_name\": \"Exact\",\n                \"docs::human_name\": \"Exact\"\n              }\n            },\n            {\n              \"title\": \"Tracks cardinality probabilistically.\",\n              \"description\": \"This mode has lower memory requirements than `exact`, but may occasionally allow metric\\nevents to pass through the transform even when they contain new tags that exceed the\\nconfigured limit. The rate at which this happens can be controlled by changing the value of\\n`cache_size_per_key`.\",\n              \"allOf\": [\n                {\n                  \"description\": \"Bloom filter configuration in probabilistic mode.\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"cache_size_per_key\": {\n                      \"title\": \"The size of the cache for detecting duplicate tags, in bytes.\",\n                      \"description\": \"The larger the cache size, the less likely it is to have a false positive, or a case where\\nwe allow a new value for tag even after we have reached the configured limits.\",\n                      \"default\": 5120,\n                      \"type\": \"integer\",\n                      \"maximum\": 9007199254740991.0,\n                      \"minimum\": 0.0,\n                      \"_metadata\": {\n                        \"docs::numeric_type\": \"uint\",\n                        \"docs::human_name\": \"Cache Size per Key\"\n                      }\n                    }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"mode\"\n                  ],\n                  \"properties\": {\n                    \"mode\": {\n                      \"title\": \"Tracks cardinality probabilistically.\",\n                      \"description\": \"This mode has lower memory requirements than `exact`, but may occasionally allow metric\\nevents to pass through the transform even when they contain new tags that exceed the\\nconfigured limit. The rate at which this happens can be controlled by changing the value of\\n`cache_size_per_key`.\",\n                      \"const\": \"probabilistic\",\n                      \"_metadata\": {\n                        \"docs::human_name\": \"Mode\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"_metadata\": {\n                \"logical_name\": \"Probabilistic\",\n                \"docs::human_name\": \"Probabilistic\"\n              }\n            }\n          ],\n          \"_metadata\": {\n            \"docs::enum_tag_description\": \"Controls the approach taken for tracking tag cardinality.\",\n            \"docs::enum_tagging\": \"internal\",\n            \"docs::enum_tag_field\": \"mode\"\n          }\n        }\n      ],\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"tag_cardinality_limit\"\n      }\n    },\n    \"vector::transforms::throttle::ThrottleConfig\": {\n      \"description\": \"Configuration for the `throttle` transform.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"threshold\",\n        \"window_secs\"\n      ],\n      \"properties\": {\n        \"exclude\": {\n          \"description\": \"A logical condition used to exclude events from sampling.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::conditions::AnyCondition>\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Exclude\"\n          }\n        },\n        \"internal_metrics\": {\n          \"description\": \"Configuration of internal metrics for the Throttle transform.\",\n          \"default\": {\n            \"emit_events_discarded_per_key\": false\n          },\n          \"type\": \"object\",\n          \"properties\": {\n            \"emit_events_discarded_per_key\": {\n              \"title\": \"Whether or not to emit the `events_discarded_total` internal metric with the `key` tag.\",\n              \"description\": \"If true, the counter will be incremented for each discarded event, including the key value\\nassociated with the discarded event. If false, the counter will not be emitted. Instead, the\\nnumber of discarded events can be seen through the `component_discarded_events_total` internal\\nmetric.\\n\\nNote that this defaults to false because the `key` tag has potentially unbounded cardinality.\\nOnly set this to true if you know that the number of unique keys is bounded.\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"_metadata\": {\n                \"docs::human_name\": \"Emit Events Discarded Per Key\"\n              }\n            }\n          },\n          \"unevaluatedProperties\": false,\n          \"_metadata\": {\n            \"docs::human_name\": \"Internal Metrics\"\n          }\n        },\n        \"key_field\": {\n          \"title\": \"The value to group events into separate buckets to be rate limited independently.\",\n          \"description\": \"If left unspecified, or if the event doesn't have `key_field`, then the event is not rate\\nlimited separately.\",\n          \"$ref\": \"#/definitions/core::option::Option<vector::template::Template>\",\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"{{ message }}\",\n              \"{{ hostname }}\"\n            ],\n            \"docs::human_name\": \"Key Field\"\n          }\n        },\n        \"threshold\": {\n          \"title\": \"The number of events allowed for a given bucket per configured `window_secs`.\",\n          \"description\": \"Each unique key has its own `threshold`.\",\n          \"type\": \"integer\",\n          \"maximum\": 4294967295.0,\n          \"minimum\": 0.0,\n          \"_metadata\": {\n            \"docs::numeric_type\": \"uint\",\n            \"docs::human_name\": \"Threshold\"\n          }\n        },\n        \"window_secs\": {\n          \"description\": \"The time window in which the configured `threshold` is applied, in seconds.\",\n          \"$ref\": \"#/definitions/serde_with::DurationFractionalSeconds\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Time Window\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::component_type\": \"transform\",\n        \"docs::component_name\": \"throttle\"\n      }\n    },\n    \"vector_common::sensitive_string::SensitiveString\": {\n      \"description\": \"Wrapper for sensitive strings containing credentials\",\n      \"type\": \"string\",\n      \"_metadata\": {\n        \"sensitive\": true\n      }\n    },\n    \"vector_core::config::AcknowledgementsConfig\": {\n      \"title\": \"Controls how acknowledgements are handled for this sink.\",\n      \"description\": \"See [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"enabled\": {\n          \"title\": \"Whether or not end-to-end acknowledgements are enabled.\",\n          \"description\": \"When enabled for a sink, any source connected to that sink, where the source supports\\nend-to-end acknowledgements as well, waits for events to be acknowledged by the sink\\nbefore acknowledging them at the source.\\n\\nEnabling or disabling acknowledgements at the sink level takes precedence over any global\\n[`acknowledgements`][global_acks] configuration.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Enabled\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"vector_core::config::SourceAcknowledgementsConfig\": {\n      \"title\": \"Controls how acknowledgements are handled by this source.\",\n      \"description\": \"This setting is **deprecated** in favor of enabling `acknowledgements` at the [global][global_acks] or sink level.\\n\\nEnabling or disabling acknowledgements at the source level has **no effect** on acknowledgement behavior.\\n\\nSee [End-to-end Acknowledgements][e2e_acks] for more information on how event acknowledgement is handled.\\n\\n[global_acks]: https://vector.dev/docs/reference/configuration/global-options/#acknowledgements\\n[e2e_acks]: https://vector.dev/docs/about/under-the-hood/architecture/end-to-end-acknowledgements/\",\n      \"deprecated\": true,\n      \"type\": \"object\",\n      \"properties\": {\n        \"enabled\": {\n          \"description\": \"Whether or not end-to-end acknowledgements are enabled for this source.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Enabled\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"vector_core::config::proxy::ProxyConfig\": {\n      \"title\": \"Proxy configuration.\",\n      \"description\": \"Configure to proxy traffic through an HTTP(S) proxy when making external requests.\\n\\nSimilar to common proxy configuration convention, you can set different proxies\\nto use based on the type of traffic being proxied, as well as set specific hosts that\\nshould not be proxied.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"enabled\": {\n          \"description\": \"Enables proxying support.\",\n          \"default\": true,\n          \"type\": \"boolean\",\n          \"_metadata\": {\n            \"docs::human_name\": \"Enabled\"\n          }\n        },\n        \"http\": {\n          \"title\": \"Proxy endpoint to use when proxying HTTP traffic.\",\n          \"description\": \"Must be a valid URI string.\",\n          \"default\": null,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"format\": \"uri\",\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"http://foo.bar:3128\",\n            \"docs::human_name\": \"HTTP\"\n          }\n        },\n        \"https\": {\n          \"title\": \"Proxy endpoint to use when proxying HTTPS traffic.\",\n          \"description\": \"Must be a valid URI string.\",\n          \"default\": null,\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"format\": \"uri\",\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"http://foo.bar:3128\",\n            \"docs::human_name\": \"HTTPS\"\n          }\n        },\n        \"no_proxy\": {\n          \"title\": \"A list of hosts to avoid proxying.\",\n          \"description\": \"Multiple patterns are allowed:\\n\\n| Pattern             | Example match                                                               |\\n| ------------------- | --------------------------------------------------------------------------- |\\n| Domain names        | `example.com` matches requests to `example.com`                     |\\n| Wildcard domains    | `.example.com` matches requests to `example.com` and its subdomains |\\n| IP addresses        | `127.0.0.1` matches requests to `127.0.0.1`                         |\\n| [CIDR][cidr] blocks | `192.168.0.0/16` matches requests to any IP addresses in this range     |\\n| Splat               | `*` matches all hosts                                                   |\\n\\n[cidr]: https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\",\n          \"default\": [],\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::examples\": [\n              \"localhost\",\n              \".foo.bar\",\n              \"*\"\n            ],\n            \"docs::human_name\": \"No Proxy\"\n          }\n        }\n      },\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::advanced\": true\n      }\n    },\n    \"vector_core::event::metric::MetricKind\": {\n      \"title\": \"Metric kind.\",\n      \"description\": \"Metrics can be either absolute of incremental. Absolute metrics represent a sort of \\\"last write wins\\\" scenario,\\nwhere the latest absolute value seen is meant to be the actual metric value.  In contrast, and perhaps intuitively,\\nincremental metrics are meant to be additive, such that we don't know what total value of the metric is, but we know\\nthat we'll be adding or subtracting the given value from it.\\n\\nGenerally speaking, most metrics storage systems deal with incremental updates. A notable exception is Prometheus,\\nwhich deals with, and expects, absolute values from clients.\",\n      \"oneOf\": [\n        {\n          \"description\": \"Incremental metric.\",\n          \"const\": \"incremental\",\n          \"_metadata\": {\n            \"logical_name\": \"Incremental\",\n            \"docs::human_name\": \"Incremental\"\n          }\n        },\n        {\n          \"description\": \"Absolute metric.\",\n          \"const\": \"absolute\",\n          \"_metadata\": {\n            \"logical_name\": \"Absolute\",\n            \"docs::human_name\": \"Absolute\"\n          }\n        }\n      ],\n      \"unevaluatedProperties\": false,\n      \"_metadata\": {\n        \"docs::enum_tagging\": \"external\"\n      }\n    },\n    \"vector_core::tls::settings::TlsConfig\": {\n      \"description\": \"TLS configuration.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"alpn_protocols\": {\n          \"title\": \"Sets the list of supported ALPN protocols.\",\n          \"description\": \"Declare the supported ALPN protocols, which are used during negotiation with peer. They are prioritized in the order\\nthat they are defined.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": \"h2\",\n            \"docs::human_name\": \"ALPN Protocols\"\n          }\n        },\n        \"ca_file\": {\n          \"title\": \"Absolute path to an additional CA certificate file.\",\n          \"description\": \"The certificate must be in the DER or PEM (X.509) format. Additionally, the certificate can be provided as an inline string in PEM format.\",\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::examples\": \"/path/to/certificate_authority.crt\",\n            \"docs::human_name\": \"CA File Path\"\n          }\n        },\n        \"crt_file\": {\n          \"title\": \"Absolute path to a certificate file used to identify this server.\",\n          \"description\": \"The certificate must be in DER, PEM (X.509), or PKCS#12 format. Additionally, the certificate can be provided as\\nan inline string in PEM format.\\n\\nIf this is set, and is not a PKCS#12 archive, `key_file` must also be set.\",\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::examples\": \"/path/to/host_certificate.crt\",\n            \"docs::human_name\": \"Certificate File Path\"\n          }\n        },\n        \"key_file\": {\n          \"title\": \"Absolute path to a private key file used to identify this server.\",\n          \"description\": \"The key must be in DER or PEM (PKCS#8) format. Additionally, the key can be provided as an inline string in PEM format.\",\n          \"$ref\": \"#/definitions/core::option::Option<std::path::PathBuf>\",\n          \"_metadata\": {\n            \"docs::examples\": \"/path/to/host_certificate.key\",\n            \"docs::human_name\": \"Key File Path\"\n          }\n        },\n        \"key_pass\": {\n          \"title\": \"Passphrase used to unlock the encrypted key file.\",\n          \"description\": \"This has no effect unless `key_file` is set.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::examples\": [\n              \"${KEY_PASS_ENV_VAR}\",\n              \"PassWord1\"\n            ],\n            \"docs::human_name\": \"Key File Password\"\n          }\n        },\n        \"verify_certificate\": {\n          \"title\": \"Enables certificate verification. For components that create a server, this requires that the\\nclient connections have a valid client certificate. For components that initiate requests,\\nthis validates that the upstream has a valid certificate.\",\n          \"description\": \"If enabled, certificates must not be expired and must be issued by a trusted\\nissuer. This verification operates in a hierarchical manner, checking that the leaf certificate (the\\ncertificate presented by the client/server) is not only valid, but that the issuer of that certificate is also valid, and\\nso on until the verification process reaches a root certificate.\\n\\nDo NOT set this to `false` unless you understand the risks of not verifying the validity of certificates.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Verify Certificate\"\n          }\n        },\n        \"verify_hostname\": {\n          \"title\": \"Enables hostname verification.\",\n          \"description\": \"If enabled, the hostname used to connect to the remote host must be present in the TLS certificate presented by\\nthe remote host, either as the Common Name or as an entry in the Subject Alternative Name extension.\\n\\nOnly relevant for outgoing connections.\\n\\nDo NOT set this to `false` unless you understand the risks of not verifying the remote hostname.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ],\n          \"_metadata\": {\n            \"docs::optional\": true,\n            \"docs::human_name\": \"Verify Hostname\"\n          }\n        }\n      },\n      \"_metadata\": {\n        \"docs::advanced\": true\n      }\n    },\n    \"vector_core::tls::settings::TlsEnableableConfig\": {\n      \"description\": \"Configures the TLS options for incoming/outgoing connections.\",\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"enabled\": {\n              \"title\": \"Whether or not to require TLS for incoming or outgoing connections.\",\n              \"description\": \"When enabled and used for incoming connections, an identity certificate is also required. See `tls.crt_file` for\\nmore information.\",\n              \"type\": [\n                \"boolean\",\n                \"null\"\n              ],\n              \"_metadata\": {\n                \"docs::optional\": true,\n                \"docs::human_name\": \"Enabled\"\n              }\n            }\n          }\n        },\n        {\n          \"description\": \"TLS configuration.\",\n          \"$ref\": \"#/definitions/vector_core::tls::settings::TlsConfig\"\n        }\n      ],\n      \"_metadata\": {\n        \"docs::advanced\": true\n      }\n    },\n    \"vector_lookup::lookup_v2::ConfigTargetPath\": {\n      \"description\": \"A wrapper around `OwnedTargetPath` that allows it to be used in Vector config\\nwith prefix default to `PathPrefix::Event`\",\n      \"type\": \"string\"\n    },\n    \"vector_lookup::lookup_v2::ConfigValuePath\": {\n      \"description\": \"A wrapper around `OwnedValuePath` that allows it to be used in Vector config.\\nThis requires a valid path to be used. If you want to allow optional paths,\\nuse [optional_path::OptionalValuePath].\",\n      \"type\": \"string\"\n    },\n    \"vector_lookup::lookup_v2::optional_path::OptionalTargetPath\": {\n      \"description\": \"An optional path that deserializes an empty string to `None`.\",\n      \"type\": \"string\"\n    },\n    \"vector_lookup::lookup_v2::optional_path::OptionalValuePath\": {\n      \"description\": \"An optional path that deserializes an empty string to `None`.\",\n      \"type\": \"string\"\n    }\n  }\n}\n"; base64 = "" }'

36 | if (result is ConversionFailure) throw(result.message) else result
                                      ^^^^^^^^^^^^^^^^^^^^^
at pkl.experimental.deepToTyped.deepToTyped#apply.<function#1> (projectpackage://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped@1.0.2#/deepToTyped.pkl)

30 | let (result =
     ^^^^^^^^^^^^^
at pkl.experimental.deepToTyped.deepToTyped#apply (projectpackage://pkg.pkl-lang.org/pkl-pantry/pkl.experimental.deepToTyped@1.0.2#/deepToTyped.pkl)

25 | parsedJsonSchema = deepToTyped.apply(JsonSchema.Schema, schema)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
at dev.vector#parsedJsonSchema (file:///Users/thomas/src/github.com/thomaspurchas/pkl-pantry/packages/dev.vector/generate.pkl, line 25)

106 | text = renderer.renderDocument(value)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
at pkl.base#Module.output.text (https://github.com/apple/pkl/blob/0.26.1/stdlib/base.pkl#L106)
