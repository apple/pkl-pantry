module k8s.contrib.tests.convert
amends "pkl:test"

import "pkl:yaml"
import "pkl:reflect"

import "../convert.pkl"

local absolutePathToPklPantry = reflect.Module(module).uri.replaceFirst("packages/k8s.contrib/tests/convert.pkl", "")

/// Run conversion, replacing full file import paths with paths stemming from "$pklPantryBaseDir".
///
/// Before:
///
/// `import "file:///User/me/work/pkl-pantry/packages/k8s/K8sObject.pkl"`
///
/// After:
///
/// `import "$pklPantryBaseDir/packages/k8s/K8sObject.pkl"`
local function doConvert(uri: String) =
  let (converter = (convert) {
    resourcesToConvert = new yaml.Parser { useMapping = true }.parseAll(read(uri)).filterNonNull() as List<Mapping>

    customResourceTemplates {
      ["Custom"] {
        ["v1"] = import("./fixtures/CustomType.pkl")
      }
    }
  })
    converter.output.text.replaceAll(absolutePathToPklPantry, "$pklPantryBaseDir/")

examples {
  ["cassandra.yml"] {
    doConvert("fixtures/cassandra.yml")
  }
  ["glusterfs.yml"] {
    doConvert("fixtures/glusterfs.yml")
  }
  ["guestbook.yml"] {
    doConvert("fixtures/guestbook.yml")
  }
  ["multipleVersions.yml"] {
    doConvert("fixtures/multipleVersions.yml")
  }
  ["wordpress.yml"] {
    doConvert("fixtures/wordpress.yml")
  }
  ["crds"] {
    doConvert("fixtures/crds.yml")
  }
  ["custom"] {
    doConvert("fixtures/custom.yml")
  }
  ["datasizes"] {
    doConvert("fixtures/datasizes.yml")
  }
}