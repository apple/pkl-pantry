examples {
  ["basic"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: String?
    
    bar: Number?
    
    """
  }
  ["required properties"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: String
    
    bar: Number
    
    """
  }
  ["deprecated properties"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    @Deprecated
    foo: String?
    
    """
  }
  ["doc comments"] {
    """
    /// FooBar
    ///
    /// FooBars when foo can bar
    ///
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    /// The fooiest of foos
    ///
    /// The name of the foo that is really foo-like
    foo: String?
    
    """
  }
  ["classes within properties"] {
    """
    /// FooBar
    ///
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Foo?
    
    class Foo {
      bar: String?
    }
    
    """
  }
  ["classes in nested properties"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Foo?
    
    class Foo {
      bar: Bar?
    }
    
    class Bar {
      baz: String?
    }
    
    """
  }
  ["classes in nested additionalProperties"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Mapping<String, FooAlternate0|FooAlternate1>?
    
    class FooAlternate0 {
      bar: String?
    }
    
    class FooAlternate1 {
      baz: String?
    }
    
    """
  }
  ["classes in nested patternProperties"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Mapping<String(matches(Regex("[a-z]+"))), FooAlternate0|FooAlternate1>?
    
    class FooAlternate0 {
      bar: String?
    }
    
    class FooAlternate1 {
      baz: String?
    }
    
    """
  }
  ["classes in listings"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foos: Listing<Foo>?
    
    class Foo {
      bar: String?
    }
    
    """
  }
  ["classes in definitions"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Foo?
    
    class Foo {
      bar: String?
    }
    
    """
  }
  ["classes within definitions properties"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Foo?
    
    bar: Bar?
    
    class Foo {
      waldo: Waldo?
    }
    
    class Waldo {
      qux: String?
    }
    
    class Bar {
      waldo: BarWaldo?
    }
    
    class BarWaldo {
      corge: String?
    }
    
    """
  }
  ["classes from inline positions"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Myfoo?
    
    /// The fooiest of foos
    class Myfoo {
      bar: String?
    }
    
    typealias Foo = Any
    
    """
  }
  ["typealiases in definitions"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Foo?
    
    typealias Foo = String(length >= 5)
    
    """
  }
  ["typealiases in $defs"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Foo?
    
    typealias Foo = String(length >= 5)
    
    """
  }
  ["typealiases in subschema definitions"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    foo: Foo?
    
    class Foo {
      bar: Bar?
    }
    
    typealias Bar = String
    
    """
  }
  ["root schemas that are not objects"] {
    """
    /// This module was generated from JSON Schema from <>.
    ///
    /// WARN: The root schema's type is `"array"`, and cannot be correctly mapped to a Pkl module.
    module com.Example
    
    class Item {
      foo: String?
    }
    
    """
  }
  ["allOf"] {
    """
    /// This module was generated from JSON Schema from <>.
    module com.Example
    
    growpart: ItemGrowpart?
    
    groups: (String(!isEmpty)|Listing<UsersGroupsGroupsByGroupname>(!isEmpty))?
    
    /// The ``user`` dictionary values override the ``default_user`` configuration from
    /// ``/etc/cloud/cloud.cfg``. The `user` dictionary keys supported for the default_user are the same as
    /// the ``users`` schema.
    user: (String|UsersGroupsUser)?
    
    users: (String|Listing<String|Listing<String>|UsersGroupsUser>)?
    
    class UsersGroupsUser {
      /// The user's login name. Required otherwise user creation will be skipped for this user.
      name: String?
    
      /// List of doas rules to add for a user. doas or opendoas must be installed for rules to take effect.
      doas: Listing<String>(!isEmpty)?
    
      /// Optional. Date on which the user's account will be disabled. Default: ``null``
      expiredate: String?
    
      /// Optional comment about the user, usually a comma-separated string of real name and contact
      /// information
      gecos: String?
    
      /// Optional comma-separated string of groups to add the user to.
      groups: (String|Listing<String>(!isEmpty)|Mapping<String(matches(Regex("^.+$"))), Any?>)?
    
      /// Optional home dir for user. Default: ``/home/<username>``
      ///
      /// Default if undefined: `"``/home/<username>``"`
      homedir: String?
    
      /// Optional string representing the number of days until the user is disabled.
      inactive: String?
    
      @Deprecated
      `lock-passwd`: Boolean?
    
      /// Disable password login. Default: ``true``
      ///
      /// Default if undefined: `true`
      lock_passwd: Boolean?
    
      @Deprecated
      `no-create-home`: Boolean?
    
      /// Do not create home directory. Default: ``false``
      ///
      /// Default if undefined: `false`
      no_create_home: Boolean?
    
      @Deprecated
      `no-log-init`: Boolean?
    
      /// Do not initialize lastlog and faillog for user. Default: ``false``
      ///
      /// Default if undefined: `false`
      no_log_init: Boolean?
    
      @Deprecated
      `no-user-group`: Boolean?
    
      /// Do not create group named after user. Default: ``false``
      ///
      /// Default if undefined: `false`
      no_user_group: Boolean?
    
      /// Hash of user password applied when user does not exist. This will NOT be applied if the user
      /// already exists. To generate this hash, run: ``mkpasswd --method=SHA-512 --rounds=500000`` **Note:**
      /// Your password might possibly be visible to unprivileged users on your system, depending on your
      /// cloud's security model. Check if your cloud's IMDS server is visible from an unprivileged user to
      /// evaluate risk.
      passwd: String?
    
      @Deprecated
      `hashed-passwd`: String?
    
      /// Hash of user password to be applied. This will be applied even if the user is preexisting. To
      /// generate this hash, run: ``mkpasswd --method=SHA-512 --rounds=500000``. **Note:** Your password
      /// might possibly be visible to unprivileged users on your system, depending on your cloud's security
      /// model. Check if your cloud's IMDS server is visible from an unprivileged user to evaluate risk.
      hashed_passwd: String?
    
      @Deprecated
      `plain-text-passwd`: String?
    
      /// Clear text of user password to be applied. This will be applied even if the user is preexisting.
      /// **Note:** SSH keys or certificates are a safer choice for logging in to your system. For local
      /// escalation, supplying a hashed password is a safer choice than plain text. Your password might
      /// possibly be visible to unprivileged users on your system, depending on your cloud's security model.
      /// An exposed plain text password is an immediate security concern. Check if your cloud's IMDS server
      /// is visible from an unprivileged user to evaluate risk.
      plain_text_passwd: String?
    
      @Deprecated
      `create-groups`: Boolean?
    
      /// Boolean set ``false`` to disable creation of specified user ``groups``. Default: ``true``.
      ///
      /// Default if undefined: `true`
      create_groups: Boolean?
    
      @Deprecated
      `primary-group`: String?
    
      /// Primary group for user. Default: ``<username>``
      ///
      /// Default if undefined: `"``<username>``"`
      primary_group: String?
    
      @Deprecated
      `selinux-user`: String?
    
      /// SELinux user for user's login. Default: the default SELinux user.
      selinux_user: String?
    
      /// Path to the user's login shell. Default: the host system's default shell.
      shell: String?
    
      /// Specify an email address to create the user as a Snappy user through ``snap create-user``. If an
      /// Ubuntu SSO account is associated with the address, username and SSH keys will be requested from
      /// there.
      snapuser: String?
    
      /// List of SSH keys to add to user's authkeys file. Can not be combined with ``ssh_redirect_user``
      ssh_authorized_keys: Listing<String>(!isEmpty)?
    
      @Deprecated
      `ssh-authorized-keys`: Listing<String>(!isEmpty)?
    
      @Deprecated
      `ssh-import-id`: Listing<String>(!isEmpty)?
    
      /// List of ssh ids to import for user. Can not be combined with ``ssh_redirect_user``. See the man
      /// page[1] for more details. [1]
      /// https://manpages.ubuntu.com/manpages/noble/en/man1/ssh-import-id.1.html
      ssh_import_id: Listing<String>(!isEmpty)?
    
      @Deprecated
      `ssh-redirect-user`: Boolean?
    
      /// Boolean set to true to disable SSH logins for this user. When specified, all cloud meta-data public
      /// SSH keys will be set up in a disabled state for this username. Any SSH login as this username will
      /// timeout and prompt with a message to login instead as the ``default_username`` for this instance.
      /// Default: ``false``. This key can not be combined with ``ssh_import_id`` or ``ssh_authorized_keys``.
      ///
      /// Default if undefined: `false`
      ssh_redirect_user: Boolean?
    
      /// Optional. Create user as system user with no home directory. Default: ``false``.
      ///
      /// Default if undefined: `false`
      system: Boolean?
    
      sudo: (String?|Listing<String?>|Boolean)?
    
      /// The user's ID. Default value [system default]
      uid: (Int|String)?
    }
    
    class CcUsersGroups {
      groups: UsersGroupsGroupsByGroupname?
    
      /// The ``user`` dictionary values override the ``default_user`` configuration from
      /// ``/etc/cloud/cloud.cfg``. The `user` dictionary keys supported for the default_user are the same as
      /// the ``users`` schema.
      user: (String|UsersGroupsUser)?
    
      users: (String|Listing<String|Listing<String>|UsersGroupsUser>)?
    }
    
    class CcGrowpart {
      growpart: Growpart?
    }
    
    class Growpart {
      /// The utility to use for resizing. Default: ``auto``
      ///
      /// Possible options:
      ///
      /// * ``auto`` - Use any available utility
      ///
      /// * ``growpart`` - Use growpart utility
      ///
      /// * ``gpart`` - Use BSD gpart utility
      ///
      /// * ``'off'`` - Take no action
      ///
      /// Default if undefined: `"auto"`
      mode: ("auto"|"growpart"|"gpart"|"off"|Boolean(this == false))?
    
      /// The devices to resize. Each entry can either be the path to the device's mountpoint in the
      /// filesystem or a path to the block device in '/dev'. Default: ``[/]``
      ///
      /// Default if undefined: `{ "/" }`
      devices: Listing<String>?
    
      /// If ``true``, ignore the presence of ``/etc/growroot-disabled``. If ``false`` and the file exists,
      /// then don't resize. Default: ``false``
      ///
      /// Default if undefined: `false`
      ignore_growroot_disabled: Boolean?
    }
    
    class ItemGrowpart {
      /// The utility to use for resizing. Default: ``auto``
      ///
      /// Possible options:
      ///
      /// * ``auto`` - Use any available utility
      ///
      /// * ``growpart`` - Use growpart utility
      ///
      /// * ``gpart`` - Use BSD gpart utility
      ///
      /// * ``'off'`` - Take no action
      ///
      /// Default if undefined: `"auto"`
      mode: ("auto"|"growpart"|"gpart"|"off"|Boolean(this == false))?
    
      /// The devices to resize. Each entry can either be the path to the device's mountpoint in the
      /// filesystem or a path to the block device in '/dev'. Default: ``[/]``
      ///
      /// Default if undefined: `{ "/" }`
      devices: Listing<String>?
    
      /// If ``true``, ignore the presence of ``/etc/growroot-disabled``. If ``false`` and the file exists,
      /// then don't resize. Default: ``false``
      ///
      /// Default if undefined: `false`
      ignore_growroot_disabled: Boolean?
    }
    
    typealias AllModules = "users_groups"
    
    typealias UsersGroupsGroupsByGroupname = Mapping<String(matches(Regex("^.+$"))), String(!isEmpty)|Listing<String>(!isEmpty)>
    
    """
  }
  ["conflicts"] {
    """
    /// This module was generated from JSON Schema from <>.
    ///
    /// WARN: The root schema describes open-ended properties, but this is not possible to describe at the
    /// module level.
    module com.Example
    
    /// Test nested objects field collision.
    redObject: RedObject?
    
    /// Test nested objects field collision.
    blueObject: BlueObject?
    
    /// Test nested objects field collision.
    class RedObject {
      /// Nested field.
      nestedField: String
    
      /// Nested child object.
      nestedObject: NestedObject?
    
      /// Nested list object red.
      nestedList: Listing<NestedList>?
    }
    
    /// Nested child object.
    class NestedObject {
      /// Nested field.
      nestedRed: String?
    }
    
    /// Red nested object test items.
    class NestedList {
      /// Red nested list field.
      nestedListItemField: String?
    }
    
    /// Test nested objects field collision.
    class BlueObject {
      /// Nested field.
      nestedField: String
    
      /// Nested child object.
      nestedObject: BlueObjectNestedObject?
    
      /// Nested list object blue.
      nestedList: Listing<BlueObjectNestedList>?
    }
    
    /// Nested child object.
    class BlueObjectNestedObject {
      /// Nested field.
      nestedBlue: String?
    }
    
    /// Blue nested object test items.
    class BlueObjectNestedList {
      /// Blue nested list field.
      nestedListItemField: String?
    }
    
    """
  }
}
