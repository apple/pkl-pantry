//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module org.json_schema.contrib.tests.TypesGenerator

amends "pkl:test"

import "@jsonschema/JsonSchema.pkl"
import "../internal/TypesGenerator.pkl"
import "../internal/Type.pkl"

examples {
  ["numbers"] {
    local numberSchema: JsonSchema = new { type = "number" }
    TypesGenerator.generateTypeNode(numberSchema, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { minimum = 5; maximum = 10 }, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { maximum = 5 }, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { exclusiveMinimum = 5 }, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { exclusiveMaximum = 5 }, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { multipleOf = 5 }, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { minimum = 0 }, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { exclusiveMinimum = -1 }, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { multipleOf = 1 }, Map()).render("")
    TypesGenerator.generateTypeNode((numberSchema) { minimum = 0; maximum = 255; multipleOf = 1 }, Map()).render("")
  }
  ["number literals"] {
    TypesGenerator.generateTypeNode(new JsonSchema { `const` = 5 }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema { enum = new Listing { 5; 6; 7 } }, Map()).render("")
  }
  ["strings"] {
    local stringSchema: JsonSchema = new {
      type = "string"
    }
    TypesGenerator.generateTypeNode(stringSchema, Map()).render("")
    TypesGenerator.generateTypeNode((stringSchema) { minLength = 1 }, Map()).render("")
    TypesGenerator.generateTypeNode((stringSchema) { minLength = 5 }, Map()).render("")
    TypesGenerator.generateTypeNode((stringSchema) { maxLength = 10 }, Map()).render("")
    TypesGenerator.generateTypeNode((stringSchema) { minLength = 5; maxLength = 10 }, Map()).render("")
    TypesGenerator.generateTypeNode((stringSchema) { pattern = "[a-z]" }, Map()).render("")
    TypesGenerator.generateTypeNode((stringSchema) { format = "uri" }, Map()).render("")
    TypesGenerator.generateTypeNode((stringSchema) { format = "regex" }, Map()).render("")
  }
  ["string literals"] {
    TypesGenerator.generateTypeNode(new JsonSchema { type = "string"; `const` = "Hello" }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema { `const` = "Hello" }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema { enum = new Listing { "Bart"; "Lisa" } }, Map()).render("")
  }
  ["booleans"] {
    TypesGenerator.generateTypeNode(new JsonSchema { type = "boolean" }, Map()).render("")
  }
  ["boolean literals"] {
    TypesGenerator.generateTypeNode(new JsonSchema { `const` = true }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema { `const` = false }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema { enum = new Listing { false } }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema { enum = new Listing { true; false } }, Map()).render("")
  }
  ["arrays"] {
    local arraySchema: JsonSchema = new {
      type = "array"
    }
    TypesGenerator.generateTypeNode((arraySchema) { minLength = 5 }, Map()).render("")
    TypesGenerator.generateTypeNode((arraySchema) { maxLength = 10 }, Map()).render("")
    TypesGenerator.generateTypeNode((arraySchema) { minLength = 5; maxLength = 10 }, Map()).render("")
    TypesGenerator.generateTypeNode((arraySchema) { uniqueItems = true }, Map()).render("")
    TypesGenerator.generateTypeNode((arraySchema) {
      items {
        type = "string"
      }
    }, Map()).render("")
    TypesGenerator.generateTypeNode((arraySchema) {
      items {
        type = "string"
        minLength = 1
      }
    }, Map()).render("")
  }
  ["mappings"] {
    TypesGenerator.generateTypeNode(new JsonSchema {
      type = "object"
      additionalProperties {
        type = "string"
      }
    }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema {
      type = "object"
      patternProperties {
        ["[a-z]"] {
          type = "number"
        }
      }
    }, Map()).render("")
  }
  ["nullables"] {
    TypesGenerator.generateTypeNode(new JsonSchema {
      type = new Listing { "string"; "null" }
      minLength = 10
    }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema {
      type = new Listing { "string"; "number"; "null" }
      minLength = 10
      minimum = 10
    }, Map()).render("")
  }
  ["unions"] {
    TypesGenerator.generateTypeNode(new JsonSchema {
      oneOf {
        new JsonSchema {
          type = "string"
          minLength = 5
        }
        new JsonSchema {
          type = "number"
          multipleOf = 10
        }
      }
    }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema {
      type = new Listing { "string"; "number" }
      minLength = 5
      multipleOf = 10
    }, Map()).render("")
  }
  ["not"] {
    TypesGenerator.generateTypeNode(new JsonSchema {
      type = "string"
      not {
        `const` = "foo"
      }
    }, Map()).render("")
    TypesGenerator.generateTypeNode(new JsonSchema {
      type = "string"
      not {
        minLength = 5
        maxLength = 10
      }
    }, Map()).render("")
  }
  ["allOf"] {
    TypesGenerator.generateTypeNode(new JsonSchema {
      type = "string"
      allOf {
        new JsonSchema {
          minLength = 5
        }
        new JsonSchema {
          maxLength = 10
        }
      }
    }, Map()).render("")
  }
  ["types from $ref"] {
    local schema: JsonSchema = new {
      local self = this
      $$baseSchema = this
      properties {
        ["bar"] {
          $ref = "#/definitions/foo"
          $$baseSchema = self
        }
      }
      definitions {
        ["foo"] {
          minLength = 5
        }
      }
    }
    // $ref's get resolved from the root schema. For this test, a root schema gets set up and the child property
    // "properties.bar" has its type generated.
    new TypesGenerator { enclosingModuleName = "TheFoo" }
      .generateTypeNode(schema.properties!!["bar"], Map(schema.definitions!!["foo"] as JsonSchema, new Type { name = "Foo"; moduleName = "TheFoo" }))
      .render("")
    TypesGenerator.generateTypeNode(new JsonSchema { $ref = "#/not/resolveable"; $$baseSchema = schema }, Map()).render("")
  }
  ["boolean schemas"] {
    TypesGenerator.generateTypeNode(true, Map()).render("")
    TypesGenerator.generateTypeNode(false, Map()).render("")
  }
}
