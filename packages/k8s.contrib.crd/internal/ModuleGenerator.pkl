//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
/// Support for generating classes.
@ModuleInfo { minPklVersion = "0.25.0" }
@Unlisted
module k8s.contrib.crd.internal.ModuleGenerator

import "pkl:reflect"
import "@jsonschema.contrib/internal/Type.pkl"
import "@jsonschema.contrib/internal/TypesGenerator.pkl"
import "@jsonschema.contrib/internal/utils.pkl"
import "@jsonschema/JsonSchema.pkl"
import "@jsonschema/Parser.pkl"
import "@k8s/apiextensions-apiserver/pkg/apis/apiextensions/v1/CustomResourceDefinition.pkl"
import "@k8s/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1/CustomResourceDefinition.pkl" as BetaCRD
import "@syntax/ClassNode.pkl"
import "@syntax/ClassOrModuleNode.pkl"
import "@syntax/DocCommentNode.pkl"
import "@syntax/ModuleNode.pkl"
import "@syntax/TypeNode.pkl"
import "@uri/URI.pkl"

local pcfRenderer = new PcfRenderer { useCustomStringDelimiters = true }
local jsonRenderer = new JsonRenderer {}

// noinspection Deprecated
typealias CRD = CustomResourceDefinition|BetaCRD

/// The CRD
crd: CRD

logPaths: Boolean = false

k8sImportPath: String

// noinspection Deprecated
local version: CustomResourceDefinition.CustomResourceDefinitionVersion|BetaCRD.CustomResourceDefinitionVersion =
  crd.spec.versions.toList().find((version) -> version.storage)
// noinspection Deprecated
local schema: CustomResourceDefinition.CustomResourceValidation|BetaCRD.CustomResourceValidation =
  (if (crd is BetaCRD) version.schema ?? crd.spec.validation else version.schema)!!

/// The Schema
rootSchema: JsonSchema((s) -> validCRDSchema(s)) = Parser.parse(new JsonRenderer {}.renderDocument(schema.openAPIV3Schema)) as JsonSchema

local ignoreProperties = Set("apiVersion", "kind", "metadata")
local filteredRootSchema = (rootSchema) {
  when (rootSchema.properties != null) {
    properties = new {
      for (k, v in rootSchema.properties!!) {
        when (!ignoreProperties.contains(k)) {
          [k] = v
        }
      }
    }
  }
}

// https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#validation
local function validCRDSchema(schema: (JsonSchema.Schema|Listing<JsonSchema.Schema>)?) =
  if (schema == null)
    true
  else if (schema is JsonSchema)
    validCRDJsonSchema(schema)
  else if (schema is Listing<JsonSchema.Schema>)
    schema.toList().every((s) -> validCRDSchema(s))
  else
    true

local function validCRDJsonSchema(schema: JsonSchema) =
  schema.definitions == null
    && schema.$defs == null
    && schema.deprecated == null
    && schema.$id == null
    && schema.patternProperties == null
    && schema.readOnly == null
    && schema.writeOnly == null
    && schema.$ref == null
    && schema.uniqueItems != true
    && (schema.properties?.toMap()?.values?.every((s) -> validCRDSchema(s)) ?? true)
    && schema.additionalProperties != false
    && !(schema.additionalProperties != null && schema.properties != null)
    && validCRDSchema(schema.additionalProperties)
    && validCRDSchema(schema.propertyNames)
    && validCRDSchema(schema.items)
    && validCRDSchema(schema.additionalItems)
    && validCRDSchema(schema.contains)
    && validCRDSchema(schema.oneOf)
    && validCRDSchema(schema.anyOf)
    && validCRDSchema(schema.allOf)
    && validCRDSchema(schema.not)



converters: Mapping<List<String>, Module|Class|TypeAlias>

/// The URI representing the root schema, used for the doc comment.
baseUri: URI

/// The name of this module
moduleName: String = crd.spec.group.split(".").reverse()
  .add(version.name)
  .add(crd.spec.names.kind)
  .join(".")

local typesGenerator: TypesGenerator = new { baseUri = new {}; enclosingModuleName = moduleName }

/// The types described in this JSON Schema document, included those replaced via converters
moduleTypes: Type.TypeNames = convertedSchemas.map((schema, importAndType) -> Pair(schema, importAndType.type)) + classSchemas

/// Generate a Pkl [ModuleNode] from a given schema.
moduleNode: ModuleNode =
  let (allTypeNames = moduleTypes)
    new {
      imports {
        new {
          value = "\(k8sImportPath)/apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
        }
        for (_import in convertedSchemas.values.map((it) -> it._import).toSet()) {
          new {
            value = _import
          }
        }
      }
      classes {
        for (schema, type in classSchemas) {
          generatePklClass(schema, type, allTypeNames)
        }
      }
      declaration {
        docComment = getDocComment(filteredRootSchema, "module")
        moduleHeader {
          name {
            parts {
              for (part in moduleName.split(".")) {
                new { value = part }
              }
            }
          }
          moduleExtendsOrAmendsClause {
            type = "extends"
            extendedModule = "\(k8sImportPath)/K8sResource.pkl"
          }
        }
      }
      properties {
        new {
          modifiers { "fixed" }
          name { value = "apiVersion" }
          typeAnnotation {
            type = new TypeNode.StringLiteralTypeNode {
              value = "\(crd.spec.group)/\(version.name)"
            }
          }
        }
        new {
          modifiers { "fixed" }
          name { value = "kind" }
          typeAnnotation {
            type = new TypeNode.StringLiteralTypeNode {
              value = crd.spec.names.kind
            }
          }
        }
        new {
          name { value = "metadata" }
          docComment {
            value = """
              Standard object's metadata.

              More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.
              """
          }
          typeAnnotation {
            type = new TypeNode.NullableTypeNode {
              typeNode = new TypeNode.DeclaredTypeNode {
                name {
                  parts {
                    new {
                      value = "ObjectMeta"
                    }
                  }
                }
              }
            }
          }
        }
        when (isClassLike(filteredRootSchema)) {
          ...generateClassBody(filteredRootSchema, allTypeNames)
        }
      }
    }

/// Determine the doc comments of a schema.
///
/// This combines a schema's title, description and "default" descriptions into one doc comment.
/// Wraps the comments at 100 columns.
local function getDocComment(schema: JsonSchema|Boolean, type: "class"|"module"|Null): DocCommentNode? =
  if (schema is Boolean)
    null
  else
    let (docCommentText: String =
      new Listing {
        schema.description
        when (type is "module") { "This module was generated from the CustomResourceDefinition at <\(baseUri)>." }
        when (type is "class"|"module") { getWarnings(schema, type) }
        when (schema.default != null) { "Default if undefined: `\(pcfRenderer.renderValue(schema.default))`" }
      }.toList().filterNonNull().join("\n\n")
    )
      if (docCommentText.isEmpty) null
      else
        new DocCommentNode {
          value = docCommentText
          autoWrap = true
        }

local function getWarnings(schema: JsonSchema, type: "class"|"module"): String? =
  if (type == "class") null
  else if (schema.type != null && schema.type != "object")
    "WARN: The root schema's type is `\(jsonRenderer.renderValue(schema.type))`, and cannot be correctly mapped to a Pkl module."
  else
    null

local function generateClassBody(
  schema: JsonSchema(this.properties != null),
  typeNames: Type.TypeNames
): Listing<ClassOrModuleNode.PropertyDefinitionNode> =
  new {
    for (propName, propSchema in schema.properties!!) {
      new {
        name {
          value = propName
        }
        when (propSchema is JsonSchema && propSchema.deprecated == true) {
          annotations { utils.DEPRECATED }
        }
        docComment = getDocComment(propSchema, null)
        typeAnnotation {
          // If this property doesn't appear in the `required` array, mark it as nullable.
          // We can't do this within [TypesGenerator] because it doesn't have enough information available.
          type = let (underlyingType = typesGenerator.generateTypeNode(propSchema, typeNames))
              if (schema.required?.toSet()?.contains(propName) ?? false) underlyingType
              // If the type is already nullable, no need to make it *more* nullable.
              else if (underlyingType is TypeNode.NullableTypeNode) underlyingType
              else new TypeNode.NullableTypeNode { typeNode = underlyingType }
        }
      }
    }
  }

/// Generates a [ClassNode] from a [CRDJsonSchema].
local function generatePklClass(schema: JsonSchema, className: Type, typeNames: Type.TypeNames): ClassNode =
  new {
    docComment = getDocComment(schema, "class")
    classHeader {
      name {
        value = className.name
      }
    }
    properties = generateClassBody(schema, typeNames)
  }

function isClassLike(schema: JsonSchema.Schema): Boolean =
  !(schema is Boolean) && schema.properties != null

/// Determines the name of a type.
///
/// Try to use the parent property's name as part of the class name in case of conflict.
/// If already at the root, add a number at the end.
local function determineTypeName(path: List<String>, candidateName: String, existingTypeNames: Set<Type>, index: Int): Type =
  if (existingTypeNames.contains(utils.pascalCase(candidateName)))
    if (path.isEmpty)
      determineTypeName(path, candidateName + index.toString(), existingTypeNames, index + 1)
    else
      determineTypeName(
        path.dropLast(1),
        utils.pascalCase(path.last.capitalize()) + utils.pascalCase(candidateName),
        existingTypeNames,
        index
      )
  else
    new { name = utils.pascalCase(candidateName); moduleName = module.moduleName }

/// The schemas that should be rendered as classes.
///
/// Classes get rendered for any subschema that has [JsonSchema.properties] defined, and does not show up in converters
local classSchemas: Type.TypeNames =
  utils._findMatchingSubSchemas(filteredRootSchema, List(), (elem) -> elem != filteredRootSchema && isClassLike(elem))
    .filter((path, _) -> !pathPrefixes(path).any((prefix) -> converters.containsKey(prefix))) // path or prefix are not explicitly in converters
    .entries
    .fold(Map(), (accumulator: Type.TypeNames, pair) ->
      let (path = pair.first)
      let (schema = pair.second)
      let (typeName = determineTypeName(path, path.lastOrNull?.capitalize() ?? "Item", accumulator.values.toSet(), 0))
        accumulator.put(schema, typeName)
    )

// Return all possible path prefixes of this path, starting with its first entry and ending with the full path
local function pathPrefixes(path: List<String>): List<List<String>> = new Listing {
  for (i, _ in path) {
    path.take(i + 1)
  }
}.toList()

/// mapSchema deeply transforms a CRD schema. CRD schemas are significantly simplified, as many fields must not be set.
/// Nested types are *always* represented in properties, items or additionalProperties, even if they are also set in oneOf etc
function mapSchema(
  schema: JsonSchema.Schema,
  path: Listing<String>,
  f: (JsonSchema.Schema) -> JsonSchema.Schema
): JsonSchema.Schema =
  let (applied = f.apply(schema))
    (applied) {
      when (applied.properties != null) {
        properties = new {
          for (name, property in applied.properties!!) {
            [name] = mapSchema(property, (path) { name }, f)
          }
        }
      }
      when (applied.additionalProperties != null) {
        additionalProperties =  mapSchema(applied.additionalProperties!!, (path) { "additionalProperties" }, f)
      }
      when (applied.items != null) {
        when (applied.items is Listing<JsonSchema>) {
          items = new {
            for (i, item in applied.items as Listing<JsonSchema.Schema>) {
              [i] = mapSchema(item, (path) { i.toString() }, f)
            }
          }
        } else {
          items = mapSchema(applied.items as JsonSchema.Schema, (path) { "items" }, f)
        }
      }
    }

local convertedSchemas: Map<JsonSchema, ImportAndType> =
  utils.findMatchingSubschemas(filteredRootSchema, (elem) -> elem != filteredRootSchema)
    .filter((path, _) -> converters.containsKey(if (logPaths) trace(path) else path))
    .entries
    .fold(Map(), (accumulator: Map<JsonSchema, ImportAndType>, pair) ->
      let (path = pair.first)
      let (schema = pair.second)
      let (converted = converters[path])
      let (reflected =
        if (converted is Module)
          reflect.Module(converted)
        else if (converted is TypeAlias)
          reflect.TypeAlias(converted)
        else
          reflect.Class(converted)
      )
        accumulator.put(schema, new ImportAndType {
          type {
            moduleName = if (reflected is reflect.Module) module.moduleName else reflected.enclosingDeclaration.name
            name = reflected.name.split(".").last
          }
          local uri =
            if (reflected is reflect.Module)
              reflected.uri
            else
              reflected.enclosingDeclaration.uri
          _import = determineImportPath(uri)
        })
  )

/// If any conversions are from the core k8s library, replace the import path with [k8sImportPath]
local function determineImportPath(uri: String): String =
  if (
    uri.startsWith("package://pkg.pkl-lang.org/pkl-k8s/k8s")
    || uri.startsWith("projectpackage://pkg.pkl-lang.org/pkl-k8s/k8s")
  )
    k8sImportPath + uri.dropWhile((it) -> it != "#").drop(1)
  else uri

class ImportAndType {
  _import: String
  type: Type
}
