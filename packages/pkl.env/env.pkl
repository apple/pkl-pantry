//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
/// A renderer for [ENV](https://github.com/motdotla/dotenv) configuration files.
///
/// Basic usage:
/// ```
/// import "package://pkg.pkl-lang.org/pkl-pantry/pkl.env@1.0.0#/env.pkl"
///
/// output {
///   renderer = new env.Renderer {}
/// }
/// ```
@ModuleInfo { minPklVersion = "0.25.0" }
module pkl.env.env

/// Renders values as ENV.
class Renderer extends ValueRenderer {
  /// Value converters to apply before values are rendered.
  ///
  /// For further information see [PcfRenderer.converters].
  /// For path converters, only "*" is supported.
  converters: Mapping<Class|String, (unknown) -> Any>

  function renderDocument(value: Any): String =
    renderValue(value)

  function renderValue(value: Any): String =
    let (_value = convert(value, false))
      render(_value, List()).trim()

  local function convert(value: Any, skipConversion: Boolean): unknown =
    if (!skipConversion && !getConverters(value).isEmpty)
      convert(applyConverters(value), true)
    else if (isTrueDynamic(value))
      throw("""
        Cannot render object with both properties/entries and elements as ENV. Received: \(value).
        """)
    else if (isMapLike(value))
      getMap(value).mapValues((_, elem) -> convert(elem, false))
    else if (isListLike(value))
      getList(value).map((elem) -> convert(elem, false))
    else value

  local function applyConverters(value: Any): unknown =
    let (converters = getConverters(value))
      converters.fold(value, (acc, converter) -> converter.apply(acc))

  local function render(value: Any, prefix: List<String>): String =
    if (value is Map)
      renderMap(value, prefix)
    else if (value is List)
      renderList(value, prefix)
    else
      renderInline(value)

  local function renderMap(map: Map, prefix: List<String>): String =
    map.fold("", (acc, key, val) -> renderLine(acc, prefix.add(key), val))

  local function renderList(list: List, prefix: List<String>): String =
    list.foldIndexed("", (i, acc, elem) -> renderLine(acc, prefix.add(i.toString()), elem))

  local function renderLine(acc: String, idPath: List<String>, val: Any): String =
    acc + if (val is List|Map)
        render(val, idPath) else
        makeAssignmentExpression(idPath, val)
        + "\n"

  local function makeAssignmentExpression(idPath: List<String>, value: Any): String =
    "\(makeId(idPath))=\(renderInline(value))"

  local function makeId(idPath: List<String>): String =
    idPath
      .map((component: String) -> component.split(" "))
      .flatten()
      .filter((component: String) -> !component.isEmpty)
      .map((component: String) -> component.toUpperCase())
      .join("_")

  local function renderInline(value: Any): String =
    if (value is String && value.contains("\""))
      "`\(value.split("\n").join("\\n"))`"
    else if (value is String)
      jsonRenderer.renderValue(value)
    else
      "\"" + value.toString() + "\""

  local function getConverters(value: Any): List<(Any) -> unknown> =
    new Listing {
      when (convertersMap.containsKey(value.getClass())) {
        convertersMap[value.getClass()]
      }
      when (convertersMap.containsKey("*")) {
        convertersMap["*"]
      }
    }.toList()

  local jsonRenderer = new JsonRenderer {}

  local convertersMap = converters.toMap()

  local function getMap(obj: unknown): Map = (if (obj is Map) obj else obj.toMap())

  local function getList(obj: unknown): List = (if (obj is List) obj else obj.toList())

  local function isTrueDynamic(obj: Any): Boolean = (obj is Dynamic && !obj.toList().isEmpty && !obj.toMap().isEmpty)

  local function isMapLike(obj: Any): Boolean = (obj is Dynamic && obj.toList().isEmpty) || obj is (Typed|Map|Mapping)

  local function isListLike(obj: Any): Boolean = (obj is Dynamic && !obj.toList().isEmpty) || obj is (List|Listing)
}
