//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
open module org.openapis.v3.Document

import "Info.pkl"
import "Server.pkl"
import "PathItem.pkl"
import "Components.pkl"
import "Security.pkl"
import "Tag.pkl"
import "ExternalDocs.pkl"
import "Reference.pkl" as _Reference
import "HTTPResponse.pkl" as _HttpResponse

/// This string MUST be the semantic version number of the OpenAPI Specification version that the OpenAPI document
/// uses.
///
/// The openapi field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is
/// not related to the API info.version string. The default value corresponds to the version of the spec we've
/// implemented in this package.
///
/// Since this library specifically follows version 3.0.3 of the OpenAPI spec, this value cannot change unless this
/// library is updated to implement a later version.
fixed openapi = "3.0.3"

/// Provides metadata about the API.
///
/// The metadata MAY be used by tooling as required.
info: Info

/// An array of Server Objects, which provide connectivity information to a target server.
///
/// If the servers property is not provided, or is an empty array, the default value would be a Server Object with a
/// url value of /.
servers: Listing<Server>?

/// The available paths and operations for the API.
///
/// Contains relative paths to an individual endpoint. The field name MUST begin with a forward slash (/). The path is
/// appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct
/// the full URL. Path templating is allowed.
///
/// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.
/// Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical.
///
/// In case of ambiguous matching, it's up to the tooling to decide which one to use.
paths: Mapping<String(startsWith("/")), PathItem>

/// An element to hold various schemas for the specification.
components: Components?

/// A declaration of which security mechanisms can be used across the API.
///
/// The list of values includes alternative security requirement objects that can be used. Only one of the security
/// requirement objects need to be satisfied to authorize a request. Individual operations can override this
/// definition. To make security optional, an empty security requirement ({}) can be included in the array.
security: Listing<Security.Requirement>?

/// A list of tags used by the specification with additional metadata.
///
/// The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by
/// the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the
/// tools' logic. Each tag name in the list MUST be unique.
tags: Listing<Tag>(isDistinct)?

/// Additional external documentation.
externalDocs: ExternalDocs?

// re-export types so they are available without import
typealias Reference = _Reference

// noinspection TypeMismatch
/// The output format to render.
///
/// OpenAPI documents can be defined in either JSON or YAML.
/// This is a Pkl-only property that is excluded from OpenAPI output.
hidden __format__: "json"|"yaml" = read?("prop:pkl.outputFormat") ?? "json"

output {
  renderer =
    if (__format__ == "json")
      new JsonRenderer {}
    else
      new YamlRenderer {}
}
