examples {
  ["empty"] {
    new {}
  }
  ["null"] {
    new {
      foo = null
    }
  }
  ["boolean"] {
    new {
      foo = true
      bar = false
    }
  }
  ["number"] {
    new {
      zero = 0
      one = 1
      negative = -1
      maxInt32 = 2147483647
      minInt32 = -2147483648
      zerof = 0.0
      float = 5.32
      negfloat = -10.26
      hex = 43981
      hexf = 128.0
      hexf2 = 128.5
      hexf3 = 127.9375
      hexf4 = 127.515625
      hexf5 = 127.6708984375
      hexp = 2.0
      hexp2 = 4.0
      hexp3 = 0.5
      hexp4 = 257.0
    }
  }
  ["string"] {
    new {
      s = "hello world"
      single = "one'two"
      double = "one\"two"
      escapes = "\u{7}\u{8}\u{c}\n\r\t\u{b}"
      hex = "\u{0}::\u{7f}"
      dec = "\u{0}:::0\u{7f}"
      u = "\u{0}《》\u{10FFFF}"
      newline = "foo\n  bar"
      z = "foobar"
      long = "foo"
      long2 = "foo"
      long3 = "  foo"
      long4 = "]]"
      long5 = "]==]]====]"
    }
  }
  ["class converters"] {
    new { foo = 2; bar = 3; baz = 1.0 }
    new { foo { 2; 3 } }
    new { foo { 2; 3 } }
    new { foo { [3] = 3; [4] = 4 } }
    new { 2; 3 }
    new { [3] = 3; [4] = 4 }
    new { foo = "bar!" }
    new { foo = "bar!" }
    new Dynamic { table { foo = "bar!" } }
    new Dynamic { ["new Dynamic { a = 2 }"] = true }
    new { foo = 1; done = true }
  }
  ["path converters"] {
    new { foo = 1; done = true }
    new { foo = 1; done = true }
    new { foo = 2 }
    new { foo = 2 }
    new { foo = 1 }
    new { foo { a = 2; b = 2 } }
    new { a = 2; foo { a = 1 } }
    new { a = 2; [true] = 1 }
    new { a = 1; b = 1; [true] = 2 }
    new { ["foo"] = new Mapping { ["a"] = 1; ["b"] = 1; [true] = 2 } }
  }
  ["path converters apply after converting keys"] {
    new { x { [42] = true } }
    new { x { `42` = "matched: true" } }
    new { x { `42` = "matched: true" } }
  }
  ["path converters in tables as table keys"] {
    new Dynamic { ["new Dynamic { a = 1 }"] = 1; done = true }
    new Dynamic { ["new Dynamic { a = 2 b = 1 }"] = 1; a = 2 }
    new Dynamic { ["new Dynamic { a = 1 b = 1 }"] = 1; a = 2 }
    new Dynamic { foo { ["new Dynamic { a { b = 2 } b = 1 }"] = 1 } }
  }
  ["converters can return non-Lua types"] {
    Pair("foo", 1)
    new { foo = Pair("int", 1) }
    new { [Pair("int", 5)] = true }
    new { foo { [Pair("int", 5)] = true } }
    new Mapping { [Pair("int", 5)] = true }
    new Mapping { ["foo"] = new Mapping { [Pair("int", 5)] = true } }
  }
  ["fixtures"] {
    new Dynamic {
      greeting = "Hello, world!"
      snippet = """
        Long Lua strings can be written inside brackets like this: [[
        This is a multiline string.
        It ends at the close double-bracket.]]

        """
      hex_floats {
        16.0
        0.9999990463256836
        -400.0
      }
      tableKeys {
        identifier = true
        string = "yes"
        [42] = "the meaning of life"
        [3.14159] = "pi"
        [true] = "very true"
        ["new Dynamic { 1 2 3 }"] = "even tables can be keys"
      }
    }
    new Dynamic {
      foo = "bar"
      count = 2
      enable = true
      frob = null
      ports { 80; 443 }
      ips {
        localhost = "127.0.0.1"
        `example.com` = "93.184.215.14"
      }
      ` ` = "space"
    }
  }
}
