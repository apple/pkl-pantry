//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
/// Prometheus supports two types of rules which may be configured
/// and then evaluated at regular intervals: recording rules and alerting rules.
///
/// To include rules in Prometheus, create a file containing the necessary rule statements
/// and have Prometheus load the file via [Configuration.rule_files].
///
/// The rule files can be reloaded at runtime by sending `SIGHUP` to the Prometheus process.
/// The changes are only applied if all rule files are well-formatted.
///
/// More details: <https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/>
@ModuleInfo { minPklVersion = "0.25.0" }
open module io.prometheus.Rule

extends "PrometheusObject.pkl"

import "Configuration.pkl"

groups: Listing<RuleGroup>?

typealias RuleGroup = *AlertingRuleGroup|RecordingRuleGroup

class RecordingRuleGroup {
  /// The name of the group. Must be unique within a file.
  name: MetricNameFormat

  /// How often rules in the group are evaluated.
  interval: Duration?

  rules: Listing<RecordingRule>
}

class AlertingRuleGroup {
  /// The name of the group. Must be unique within a file.
  name: LabelNameFormat

  /// How often rules in the group are evaluated.
  interval: Duration?

  rules: Listing<AlertingRule>
}

/// Alerting rules allow you to define alert conditions
/// based on Prometheus expression language expressions
/// and to send notifications about firing alerts to an external service.
///
/// Whenever the alert expression results in one or more vector elements at a given point in time,
/// the alert counts as active for these elements' label sets.
///
/// More details: <https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/#rule>
class AlertingRule {
  /// The name of the alert. Must be a valid label value.
  alert: String

  /// The PromQL expression to evaluate.
  ///
  /// Every evaluation cycle this is evaluated at the current time,
  /// and all resultant time series become pending/firing alerts.
  expr: String

  /// Alerts are considered firing once they have been returned for this long.
  ///
  /// Alerts which have not yet fired for long enough are considered pending.
  ///
  /// Default if omitted: `0.s`
  `for`: Duration?

  /// Labels to add or overwrite for each alert.
  labels: Labels?

  /// Annotations to add to each alert.
  annotations: Mapping<String, String>?
}

/// Recording rules allow you to precompute frequently needed or computationally
/// expensive expressions and save their result as a new set of time series.
///
/// Querying the precomputed result will then often be much faster
/// than executing the original expression every time it is needed.
/// This is especially useful for dashboards,
/// which need to query the same expression repeatedly every time they refresh.
///
/// Recording and alerting rules exist in a rule group.
/// Rules within a group are run sequentially at a regular interval,
/// with the same evaluation time.
/// The names of recording rules must be
/// [valid metric names](https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels).
/// The names of alerting rules must be
/// [valid label values](https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels).
///
/// More details: <https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule>
class RecordingRule {
  /// The name of the time series to output to. Must be a valid metric name.
  `record`: String

  /// The PromQL expression to evaluate.
  ///
  /// Every evaluation cycle this is evaluated at the current time,
  /// and the result recorded as a new set of time series with the metric name as given by 'record'.
  expr: String

  /// Labels to add or overwrite before storing the result.
  labels: Labels?
}
