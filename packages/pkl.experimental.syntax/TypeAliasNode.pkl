//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module pkl.experimental.syntax.TypeAliasNode

extends "Node.pkl"

import "IdentifierNode.pkl"
import "TypeNode.pkl"
import "DocCommentNode.pkl"
import "AnnotationNode.pkl"

docComment: DocCommentNode?

name: IdentifierNode

type: TypeNode

annotations: Listing<AnnotationNode>?

modifiers: Listing<"external"|"local">(isDistinct)?

local function renderAlias(currentIndent: String) = new Listing {
  ...?modifiers
  "typealias"
  name.render(currentIndent)
  "="
  type.render(currentIndent)
}.join(" ")

function render(currentIndent: String) = List(
  docComment?.render(currentIndent),
  annotations?.toList()?.map((an) -> an.render(currentIndent))?.join("\n"),
  currentIndent + renderAlias(currentIndent)
).filterNonNull().join("\n")
