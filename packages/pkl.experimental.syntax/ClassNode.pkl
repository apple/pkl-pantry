//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module pkl.experimental.syntax.ClassNode

extends "ClassOrModuleNode.pkl"

import "Node.pkl"
import "IdentifierNode.pkl"
import "AnnotationNode.pkl"
import "DocCommentNode.pkl"
import "TypeNode.pkl"

docComment: DocCommentNode?

annotations: Listing<AnnotationNode>?

classHeader: ClassHeader

class ClassHeader extends Node {
  modifiers: Listing<"abstract"|"external"|"local"|"open">(isDistinct)?
  name: IdentifierNode
  extendsClause: ClassExtendsClause?

  function render(currentIndent: String) = currentIndent + new Listing {
    modifiers?.join(" ")
    "class \(name.render(currentIndent))"
    extendsClause?.render(currentIndent)
    "{"
  }.toList().filterNonNull().join(" ")
}

class ClassExtendsClause extends Node {
  type: TypeNode.DeclaredTypeNode

  function render(currentIndent: String) = "extends " + type.render(currentIndent)
}

function render(currentIndent: String) = List(
  docComment?.render(currentIndent),
  annotations?.toList()?.map((a) -> a.render(currentIndent))?.join("\n"),
  classHeader.render(currentIndent),
  super.render(currentIndent + indent),
  "\(currentIndent)}"
)
  .filterNonNull()
  .join("\n")
