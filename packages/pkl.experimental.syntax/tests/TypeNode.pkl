//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module pkl.experimental.syntax.tests.TypeNode

amends "pkl:test"

import "../TypeNode.pkl"
import "../ExpressionNode.pkl"

facts {
  ["declared type"] {
    new TypeNode.DeclaredTypeNode {
      name {
        parts {
          new { value = "String" }
        }
      }
    }.render("") == "String"
    new TypeNode.DeclaredTypeNode {
      name {
        parts {
          new { value = "myModule" }
          new { value = "Bar" }
        }
      }
    }.render("") == "myModule.Bar"
  }
  ["declared type - type arguments"] {
    new TypeNode.DeclaredTypeNode {
      name {
        parts {
          new { value = "Listing" }
        }
      }
      typeArguments {
        new TypeNode.DeclaredTypeNode {
          name {
            parts {
              new { value = "Bar" }
            }
          }
        }
        new TypeNode.DeclaredTypeNode {
          name {
            parts {
              new { value = "Baz" }
            }
          }
        }
      }
    }.render("") == "Listing<Bar, Baz>"
  }
  ["constrained"] {
    new TypeNode.ConstrainedTypeNode {
      typeNode = new TypeNode.DeclaredTypeNode {
        name {
          parts {
            new { value = "Bar" }
          }
        }
      }
      constraints {
        new ExpressionNode.MemberAccessExpressionNode {
          identifier {
            value = "isLessThan"
          }
          arguments {
            new ExpressionNode.LiteralValueExpressionNode {
              value = 5
            }
          }
        }
      }
    }.render("") == "Bar(isLessThan(5))"
  }
  ["string literal"] {
    new TypeNode.StringLiteralTypeNode {
      value = "my string type"
    }.render("") == """
      "my string type"
      """
  }
  ["union"] {
    new TypeNode.UnionTypeNode {
      members {
        new TypeNode.StringLiteralTypeNode {
          value = "one"
        }
        new TypeNode.StringLiteralTypeNode {
          value = "two"
        }
      }
    }.render("") == """
      "one"|"two"
      """
  }
}
