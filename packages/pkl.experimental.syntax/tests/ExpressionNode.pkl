//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module pkl.experimental.syntax.tests.ExpressionNode

amends "pkl:test"

import "../ExpressionNode.pkl"

examples {
  ["binary operators - basic"] {
    new ExpressionNode.BinaryOperatorExpressionNode {
      lhs = new ExpressionNode.LiteralValueExpressionNode {
        value = "foo"
      }
      operator = "+"
      rhs = new ExpressionNode.LiteralValueExpressionNode {
        value = "bar"
      }
    }.render("")
  }
  ["binary operators - precedence: no parentheses when child precedence is higher"] {
    new ExpressionNode.BinaryOperatorExpressionNode {
      operator = "+"
      lhs = new ExpressionNode.BinaryOperatorExpressionNode {
        lhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        rhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        operator = "*"
      }
      rhs = new ExpressionNode.BinaryOperatorExpressionNode {
        lhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        rhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        operator = "*"
      }
    }.render("")
  }
  ["binary operators - precedence: parenthese added when child precedence is lower"] {
    new ExpressionNode.BinaryOperatorExpressionNode {
      operator = "*"
      lhs = new ExpressionNode.BinaryOperatorExpressionNode {
        lhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        rhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        operator = "+"
      }
      rhs = new ExpressionNode.BinaryOperatorExpressionNode {
        lhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        rhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        operator = "+"
      }
    }.render("")
  }
  ["unary operators"] {
    new ExpressionNode.PrefixOperatorExpressionNode {
      operator = "!"
      expression = new ExpressionNode.LiteralValueExpressionNode { value = false }
    }.render("")
  }
  ["unary operators - parenthesizes binary expressions"] {
    new ExpressionNode.PrefixOperatorExpressionNode {
      operator = "-"
      expression = new ExpressionNode.BinaryOperatorExpressionNode {
        operator = "+"
        lhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 5
        }
        rhs = new ExpressionNode.LiteralValueExpressionNode {
          value = 10
        }
      }
    }.render("")
  }
  ["member access - single identifier"] {
    new ExpressionNode.MemberAccessExpressionNode {
      identifier {
        value = "foo"
      }
    }.render("")
  }
  ["member access - method call"] {
    new ExpressionNode.MemberAccessExpressionNode {
      identifier {
        value = "foo"
      }
      arguments {
        new ExpressionNode.MemberAccessExpressionNode {
          identifier {
            value = "bar"
          }
        }
        new ExpressionNode.MemberAccessExpressionNode {
          identifier {
            value = "biz"
          }
        }
      }
    }.render("")
  }
  ["if/else"] {
    new ExpressionNode.IfElseExpressionNode {
      condition = new ExpressionNode.BinaryOperatorExpressionNode {
        lhs = new ExpressionNode.MemberAccessExpressionNode {
          identifier {
            value = "foo"
          }
        }
        operator = "=="
        rhs = new ExpressionNode.LiteralValueExpressionNode {
          value = "foo"
        }
      }
      ifBranch = new ExpressionNode.LiteralValueExpressionNode { value = "foo" }
      elseBranch = new ExpressionNode.LiteralValueExpressionNode { value = "bar" }
    }.render("")

    new ExpressionNode.IfElseExpressionNode {
      condition = new ExpressionNode.BinaryOperatorExpressionNode {
        lhs = new ExpressionNode.MemberAccessExpressionNode {
          identifier {
            value = "foo"
          }
        }
        operator = "=="
        rhs = new ExpressionNode.LiteralValueExpressionNode {
          value = "foo"
        }
      }
      ifBranch = new ExpressionNode.LiteralValueExpressionNode { value = "foo" }
      elseBranch = new ExpressionNode.LiteralValueExpressionNode { value = "bar" }
    }.render("  ")
  }
  ["super access"] {
    new ExpressionNode.SuperAccessExpressionNode {
      rhs {
        identifier { value = "someProperty" }
      }
    }.render("")
    new ExpressionNode.SuperAccessExpressionNode {
      rhs {
        identifier { value = "someProperty" }
        arguments {
          new ExpressionNode.LiteralValueExpressionNode { value = true }
        }
      }
    }.render("")
  }
  ["super subscript"] {
    new ExpressionNode.SuperSubscriptExpressionNode {
      subscript = new ExpressionNode.LiteralValueExpressionNode { value = "test" }
    }.render("")
  }
  ["subscript"] {
    new ExpressionNode.SubscriptExpressionNode {
      lhs = new ExpressionNode.MemberAccessExpressionNode {
        identifier { value = "test" }
      }
      subscript = new ExpressionNode.LiteralValueExpressionNode { value = "key" }
    }.render("")
    new ExpressionNode.SubscriptExpressionNode {
      lhs = new ExpressionNode.IfElseExpressionNode {
        condition = new ExpressionNode.MemberAccessExpressionNode {
          identifier { value = "test" }
        }
        ifBranch = new ExpressionNode.MemberAccessExpressionNode {
          identifier { value = "testTrue" }
        }
        elseBranch = new ExpressionNode.MemberAccessExpressionNode {
          identifier { value = "testFalse" }
        }
      }
      subscript = new ExpressionNode.BinaryOperatorExpressionNode {
        operator = "+"
        lhs = new ExpressionNode.LiteralValueExpressionNode { value = "test" }
        rhs = new ExpressionNode.LiteralValueExpressionNode { value = "Key" }
      }
    }.render("")
  }
  ["read"] {
    new ExpressionNode.ReadExpressionNode {
      value = new ExpressionNode.LiteralValueExpressionNode { value = "env:HOME" }
    }.render("")
    new ExpressionNode.ReadExpressionNode {
      keyword = "read*"
      value = new ExpressionNode.LiteralValueExpressionNode { value = "env:HOME" }
    }.render("")
    new ExpressionNode.ReadExpressionNode {
      keyword = "read?"
      value = new ExpressionNode.LiteralValueExpressionNode { value = "env:HOME" }
    }.render("")
  }
  ["trace"] {
    new ExpressionNode.TraceExpressionNode {
      value = new ExpressionNode.MemberAccessExpressionNode {
        identifier { value = "test" }
      }
    }.render("")
  }
}
