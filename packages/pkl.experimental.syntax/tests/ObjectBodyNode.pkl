//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module pkl.experimental.syntax.tests.ObjectBodyNode

amends "pkl:test"

import "../ObjectBodyNode.pkl"
import "../ExpressionNode.pkl"
import "../TypeNode.pkl"

local personDotName = new ExpressionNode.QualifiedMemberAccessExpressionNode {
  lhs = new ExpressionNode.MemberAccessExpressionNode {
    identifier { value = "person" }
  }
  rhs {
    identifier { value = "name" }
  }
}

examples {
  ["for generator"] {
    // only value w/o type
    new ObjectBodyNode {
      members {
        new ObjectBodyNode.ForGeneratorNode {
          valueParameter {
            name { value = "person" }
          }
          collection = new ExpressionNode.MemberAccessExpressionNode {
            identifier { value = "people" }
          }
          body {
            members {
              new ObjectBodyNode.ElementMemberNode {
                value = personDotName
              }
            }
          }
        }
      }
    }.render("")
    // only value w/ type
    new ObjectBodyNode {
      members {
        new ObjectBodyNode.ForGeneratorNode {
          valueParameter {
            name { value = "person" }
            typeAnnotation {
              type = new TypeNode.DeclaredTypeNode {
                name {
                  parts { new { value = "Person" } }
                }
              }
            }
          }
          collection = new ExpressionNode.MemberAccessExpressionNode {
            identifier { value = "people" }
          }
          body {
            members {
              new ObjectBodyNode.ElementMemberNode {
                value = personDotName
              }
            }
          }
        }
      }
    }.render("")
    // key and value w/o types
    new ObjectBodyNode {
      members {
        new ObjectBodyNode.ForGeneratorNode {
          keyParameter {
            name { value = "personIndex" }
          }
          valueParameter {
            name { value = "person" }
          }
          collection = new ExpressionNode.MemberAccessExpressionNode {
            identifier { value = "people" }
          }
          body {
            members {
              new ObjectBodyNode.ElementMemberNode {
                value = personDotName
              }
            }
          }
        }
      }
    }.render("")
    // key and value w/ types
    new ObjectBodyNode {
      members {
        new ObjectBodyNode.ForGeneratorNode {
          keyParameter {
            name { value = "personIndex" }
            typeAnnotation {
              type = new TypeNode.DeclaredTypeNode {
                name {
                  parts { new { value = "Int" } }
                }
              }
            }
          }
          valueParameter {
            name { value = "person" }
            typeAnnotation {
              type = new TypeNode.DeclaredTypeNode {
                name {
                  parts { new { value = "Person" } }
                }
              }
            }
          }
          collection = new ExpressionNode.MemberAccessExpressionNode {
            identifier { value = "people" }
          }
          body {
            members {
              new ObjectBodyNode.ElementMemberNode {
                value = personDotName
              }
            }
          }
        }
      }
    }.render("")
  }
  ["when generator"] {
    new ObjectBodyNode {
      members {
        new ObjectBodyNode.WhenGeneratorNode {
          condition = new ExpressionNode.MemberAccessExpressionNode {
            identifier { value = "test" }
          }
          body {
            members {
              new ObjectBodyNode.PropertyMemberNode {
                propertyName { value = "conditionalProperty" }
                assignment = new ExpressionNode.LiteralValueExpressionNode { value = true }
              }
            }
          }
        }
      }
    }.render("")
  }
}
