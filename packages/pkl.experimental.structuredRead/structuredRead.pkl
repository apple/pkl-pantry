//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module pkl.experimental.structuredRead.structuredRead
import "pkl:reflect"
import "@deepToTyped/deepToTyped.pkl"

/// Configures structureRead to read from environment variables
///
/// ```
/// import "structuredRead.pkl"
///
/// class Environment {
///   SHELL: String
///   PWD: String
///   USER: Int
/// }
///
/// environment = structuredRead.fromEnv.fill(Environment)
/// ```
hidden fixed fromEnv: module = (module) {
  inputScheme = "env:"
  pathSeparator = "_"
}

/// Configures structureRead to read from external properties
///
/// ```
/// import "structuredRead.pkl"
///
/// class Config {
///   name: String
///   location: String
///   age: Int
/// }
///
/// config = structuredRead.fromHttps.fill(Config)
/// ```
hidden fixed fromExternalProps: module = (module) {
  inputScheme = "prop:"
  pathSeparator = "."
}

/// Configures structureRead to read from https:// resources
///
/// ```
/// import "structuredRead.pkl"
///
/// Data {
///   `apple.com` {}
/// }
///
/// data = structuredRead.fromHttps.fill(Data)
/// ```
hidden fixed fromHttps: module = (module) {
  inputScheme = "https:"
  pathSeparator = "/"
  pathTemplate = (path) -> "\(inputScheme)//\(path.join(pathSeparator))"
}

/// Takes a given class or module and attempts to fill the properties from external resources.
///
/// Resources are read in by constructing resource URIs from the structure of the provided class
/// or modules. The read values are then coerced into the types specified in the class or module, making
/// it easy to get external properties (using [fromExternalProps] and passed using the `-p` flag)
/// or environment variables (using [fromEnv]) into a structured and typed format.
///
/// When embeded in another application, this Pkl module can be used to provide a
/// basic ability to override loaded configuration using CLI flags. The application
/// will need to parse the passed flags, then provide them to Pkl via a custom
/// [Resource Reader](https://pkl-lang.org/main/current/language-reference/index.html#extending-resource-readers),
/// or by passing them in as external properties.
function fill(target: Class|Module|Dynamic) =
  let (targetClass =
    if (!(target is Class))
      target.getClass()
    else
      target
  )
    let (mappedInputs =
      if (targetClass == Dynamic)
        applyToDynamic(List(), target)
      else
        applyToClass(targetClass, List()))
    if (assertNoFailures(targetClass, mappedInputs) && targetClass != Dynamic)
      deepToTyped.apply(targetClass, mappedInputs)
    else
      mappedInputs

/// The scheme used to read resources from.
///
/// By default, this is `"prop:"` so values are read from external
/// properties passed using the `-p` flag.
hidden inputScheme: String(matches(Regex(#"[\w-]+:"#)))

/// Path separator used to when building resource URI.
///
/// Default is `.` which means that nested values are passed in
/// using a dot seperated path as the key value.
hidden pathSeparator: String

/// Template used to convert a path of elements into a resource URI.
///
/// Default joins the path components with [pathSeparator] and
/// prepends the [inputScheme].
hidden pathTemplate: (List<String>) -> String = (path: List<String>) -> "\(inputScheme)\(path.join(pathSeparator))"

/// Debug hook for overriding how values are read.
hidden readFunc = (s) -> read?(s)

function applyToClass(target: Class, path: List<String>): Mapping<String, Any?> =
  let (reflected = reflect.Class(target))
  new Mapping {
    for (name, property in reflected.properties) {
      when (property.type is Coerceable) {
        [name] = let (potentialValue = readValueToTarget(path, name, property))
          if (!(potentialValue is ReadFailure)) potentialValue
          else if (property.type is reflect.NullableType) property.defaultValue
          else property.defaultValue ?? potentialValue
      }
    }
  }

typealias Coerceable = reflect.DeclaredType | reflect.NullableType | reflect.TypeAlias | reflect.UnknownType

local function assertNoFailures(target: Class, output: Mapping<String, Any?>|Dynamic): Boolean =
  let (fails = findFailures(output))
    fails.isEmpty ||
      let (msg = new Listing {
        "Error processing \(if (fails.length > 1) "properties" else "property") in \(target):\n"
        local maxPathLength = fails.map((f) -> f.path.join(pathSeparator).length).max
        for (fail in fails) {
          let (path = fail.path.join(pathSeparator))
            "\t'\(path)'\(" ".repeat(maxPathLength - path.length)): \(fail.message)"
        }
      }.join("\n"))
        throw(msg)

local function findFailures(output: Mapping<String, Any?>|Dynamic): List<Failure> =
  findFailureAcc.apply(List(), null, output)

local findFailureAcc = (result, _, value) ->
  if (value is Failure) result.add(value)
  else if (value is Mapping|Dynamic) value.toMap().fold(result, findFailureAcc)
  else result

abstract class Failure {
  message: String
  path: List<String>
}

class ReadFailure extends Failure
class CoerceFailure extends Failure

local function ReadFail(path: List<String>, msg: String) = let (_path = path ) new ReadFailure {
  message = msg
  path = _path
}

local function CoerceFail(path: List<String>, msg: String) = let (_path = path ) new CoerceFailure {
  message = msg
  path = _path
}

local function parseArraySyntax(input: String): Listing = new {
  when (input.startsWith("{") && input.endsWith("}")) {
    ...input.drop(1).dropLast(1).split(",").map((e) -> e.trim())
  } else {
    input
  }
}

local function applyToDynamic(path, default: Dynamic) =
  if (default.toList().isEmpty && default.toMap().isEmpty)
    // Do some special handling for empty dynamic objects
    let (potentialValue = readValue(path))
      if (potentialValue is ReadFailure)
        default
      else if (potentialValue is String)
        parseArraySyntax(potentialValue)
      else
        potentialValue ?? default
  else
    new Mapping {
      for (name, defaultValue in default) {
        when (defaultValue is Dynamic) {
          [name] = applyToDynamic(path.add(name.toString()), defaultValue)
        } else {
          [name] = let (_path = path.add(name.toString()))
            let (potentialValue = coerceInput(readValue(_path), defaultValue.getClass(), _path))
              if (potentialValue is ReadFailure)
                defaultValue
              else
                potentialValue
        }
      }
    }.toMap().toDynamic()

hidden classHandlers: Mapping<Class, (String) -> Any> = new {
  [Int] = (value) ->
    value.toIntOrNull()

  [String] = (value) ->
    value

  [Float] = (value) ->
    value.toFloatOrNull()

  [Number] = (value) ->
    value.toIntOrNull() ?? value.toFloatOrNull()

  [Boolean] = (value) ->
    value.toBooleanOrNull()

  [Null] = (_) -> throw("""
    Unable to perform structured read due to ambiguous type in schema.
    This is normally caused by a schema property having default value of `null`, and no type signature.
    """)

  [Resource] = (value) -> value
}

local function coerceInput(value: String?|Resource?, clazz: Class|TypeAlias, path:List<String>) =
  if (clazz is TypeAlias) coerceInput(value, reflect.TypeAlias(clazz).referent.referent.reflectee, path)
  else if (!classHandlers.containsKey(clazz)) applyToClass(clazz, path)
  else if (value is String)
    classHandlers[clazz].apply(value) ?? CoerceFail(path, "Unable to coerce '\(value)' into type \(clazz.simpleName)")
  else
    value ?? ReadFail(
      path,
      "Not provided. Make sure you pass the argument '-p \(path.join(pathSeparator))=<\(clazz.simpleName)>' to pkl eval"
    )


local function readValueToTarget(path: List<String>, name: String, target: reflect.Property): Any? =
  let (path = path.add(name))
    let (clazz =
      if (target.type is reflect.UnknownType)
        target.defaultValue.getClass()
      else if (target.type is reflect.NullableType)
        let (_type = target.type as reflect.NullableType)
          _type.member.referent.reflectee
      else if (target.type is reflect.DeclaredType)
        let (_type = target.type as reflect.DeclaredType)
          _type.referent.reflectee
      else
        null
    )
      if (clazz == Dynamic)
        applyToDynamic(path, target.defaultValue)
      else if (clazz != null)
        coerceInput(readValue(path), clazz, path)
      else
        null

local function readValue(path: List<String>) = readFunc.apply(pathTemplate.apply(path))