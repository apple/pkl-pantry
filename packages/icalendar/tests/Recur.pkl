//===----------------------------------------------------------------------===//
// Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module icalendar.tests.Recur
amends "pkl:test"

import "../type/Recur.pkl"
import "../type/Date.pkl"
import "../type/DateTime.pkl"

facts {
  ["with date"] {
    new Recur {
      dtstart = Date.Date("20000101")
      freq = "YEARLY"
      interval = 1
      until = Date.Date("20250101")
      byday {
        "MO"
        new { weeknum = -1; weekday = "FR" }
      }
      bymonthday { 15; -15 }
      byyearday { 100; -100 }
      bymonth { 1; 11 }
      wkst = "MO"
      bysetpos { -1; 1 }
    }.toString() == """
      DTSTART;VALUE=DATE:20000101
      RRULE:FREQ=YEARLY;INTERVAL=1;UNTIL=20250101;BYDAY=MO,-1FR;BYMONTHDAY=15,-15;BYYEARDAY=100,-100;BYMONTH=1,11;WKST=MO;BYSETPOS=-1,1
      """

    // tzid not allowed for dates, only datetimes
    module.catchOrNull(() -> new Recur {
      dtstart = Date.Date("20000101")
      tzid = "America/Los_Angeles"
      freq = "YEARLY"
    }.toString()) != null
    module.catchOrNull(() -> new Recur {
      tzid = "America/Los_Angeles"
      freq = "YEARLY"
      until = Date.Date("20250101")
    }.toString()) != null

    // until type must be date if dtstart is date
    module.catchOrNull(() -> new Recur {
      dtstart = Date.Date("20000101")
      freq = "YEARLY"
      until = DateTime.DateTime("20250101T000000")
    }.toString()) != null

    // until and count forbidden together
    module.catchOrNull(() -> new Recur {
      dtstart = Date.Date("20000101")
      freq = "YEARLY"
      count = 25
      until = Date.Date("20250101")
    }.toString()) != null

    // bysecond cannot be used with date dtstart
    module.catchOrNull(() -> new Recur {
      dtstart = Date.Date("20000101")
      freq = "YEARLY"
      bysecond { 0 }
    }.toString()) != null

    // byminute cannot be used with date dtstart
    module.catchOrNull(() -> new Recur {
      dtstart = Date.Date("20000101")
      freq = "YEARLY"
      byminute { 0 }
    }.toString()) != null

    // byhour cannot be used with date dtstart
    module.catchOrNull(() -> new Recur {
      dtstart = Date.Date("20000101")
      freq = "YEARLY"
      byhour { 0 }
    }.toString()) != null

    // bysetpos cannot be used without another by* property
    module.catchOrNull(() -> new Recur {
      dtstart = Date.Date("20000101")
      freq = "YEARLY"
      bysetpos { 1 }
    }.toString()) != null
  }

  ["with datetime"] {
    // utc
    new Recur {
      dtstart = DateTime.DateTime("20000101T000000Z")
      freq = "YEARLY"
      interval = 1
      until = DateTime.DateTime("20250101T000000Z")
      bysecond { 0; 30 }
      byminute { 0; 30 }
      byhour { 0; 12 }
      byday {
        "MO"
        new { weeknum = -1; weekday = "FR" }
      }
      bymonthday { 15; -15 }
      byyearday { 100; -100 }
      bymonth { 1; 11 }
      wkst = "MO"
      bysetpos { -1; 1 }
    }.toString() == """
      DTSTART:20000101T000000Z
      RRULE:FREQ=YEARLY;INTERVAL=1;UNTIL=20250101T000000Z;BYSECOND=0,30;BYMINUTE=0,30;BYHOUR=0,12;BYDAY=MO,-1FR;BYMONTHDAY=15,-15;BYYEARDAY=100,-100;BYMONTH=1,11;WKST=MO;BYSETPOS=-1,1
      """

    // floating
    new Recur {
      dtstart = DateTime.DateTime("20000101T000000")
      freq = "YEARLY"
      interval = 1
      until = DateTime.DateTime("20250101T000000")
      bysecond { 0; 30 }
      byminute { 0; 30 }
      byhour { 0; 12 }
      byday {
        "MO"
        new { weeknum = -1; weekday = "FR" }
      }
      bymonthday { 15; -15 }
      byyearday { 100; -100 }
      bymonth { 1; 11 }
      wkst = "MO"
      bysetpos { -1; 1 }
    }.toString() == """
      DTSTART:20000101T000000
      RRULE:FREQ=YEARLY;INTERVAL=1;UNTIL=20250101T000000;BYSECOND=0,30;BYMINUTE=0,30;BYHOUR=0,12;BYDAY=MO,-1FR;BYMONTHDAY=15,-15;BYYEARDAY=100,-100;BYMONTH=1,11;WKST=MO;BYSETPOS=-1,1
      """

    // with timezone
    new Recur {
      dtstart = DateTime.DateTime("20000101T000000")
      tzid = "America/Los_Angeles"
      freq = "YEARLY"
      interval = 1
      until = DateTime.DateTime("20250101T000000")
      bysecond { 0; 30 }
      byminute { 0; 30 }
      byhour { 0; 12 }
      byday {
        "MO"
        new { weeknum = -1; weekday = "FR" }
      }
      bymonthday { 15; -15 }
      byyearday { 100; -100 }
      bymonth { 1; 11 }
      wkst = "MO"
      bysetpos { -1; 1 }
    }.toString() == """
      DTSTART;TZID=America/Los_Angeles:20000101T000000
      RRULE:FREQ=YEARLY;INTERVAL=1;UNTIL=20250101T000000;BYSECOND=0,30;BYMINUTE=0,30;BYHOUR=0,12;BYDAY=MO,-1FR;BYMONTHDAY=15,-15;BYYEARDAY=100,-100;BYMONTH=1,11;WKST=MO;BYSETPOS=-1,1
      """

    // forbid utc until with non-utc dtstart
    module.catchOrNull(() -> new Recur {
      dtstart = DateTime.DateTime("20000101T000000")
      freq = "YEARLY"
      until = DateTime.DateTime("20250101T000000Z")
    }.toString()) != null
    // forbid utc dtstart with non-utc until
    module.catchOrNull(() -> new Recur {
      dtstart = DateTime.DateTime("20000101T000000Z")
      freq = "YEARLY"
      until = DateTime.DateTime("20250101T000000")
    }.toString()) != null
    // forbid utc dtstart with tzid
    module.catchOrNull(() -> new Recur {
      dtstart = DateTime.DateTime("20000101T000000Z")
      tzid = "America/Los_Angeles"
      freq = "YEARLY"
    }.toString()) != null
    // forbid utc until with tzid
    module.catchOrNull(() -> new Recur {
      tzid = "America/Los_Angeles"
      freq = "YEARLY"
      until = DateTime.DateTime("20250101T000000Z")
    }.toString()) != null
  }
}
